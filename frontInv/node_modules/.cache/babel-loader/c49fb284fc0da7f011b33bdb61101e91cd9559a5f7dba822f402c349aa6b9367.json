{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.canonicalDomain = canonicalDomain;\nconst constants_1 = require(\"./constants\");\nconst node_url_1 = require(\"node:url\");\n/**\n * Transforms a domain name into a canonical domain name. The canonical domain name is a domain name\n * that has been trimmed, lowercased, stripped of leading dot, and optionally punycode-encoded\n * ({@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.1.2 | Section 5.1.2 of RFC 6265}). For\n * the most part, this function is idempotent (calling the function with the output from a previous call\n * returns the same output).\n *\n * @remarks\n * A canonicalized host name is the string generated by the following\n * algorithm:\n *\n * 1.  Convert the host name to a sequence of individual domain name\n *     labels.\n *\n * 2.  Convert each label that is not a Non-Reserved LDH (NR-LDH) label,\n *     to an A-label (see Section 2.3.2.1 of [RFC5890] for the former\n *     and latter), or to a \"punycode label\" (a label resulting from the\n *     \"ToASCII\" conversion in Section 4 of [RFC3490]), as appropriate\n *     (see Section 6.3 of this specification).\n *\n * 3.  Concatenate the resulting labels, separated by a %x2E (\".\")\n *     character.\n *\n * @example\n * ```\n * canonicalDomain('.EXAMPLE.com') === 'example.com'\n * ```\n *\n * @param domainName - the domain name to generate the canonical domain from\n * @public\n */\nfunction canonicalDomain(domainName) {\n  if (domainName == null) {\n    return undefined;\n  }\n  let str = domainName.trim().replace(/^\\./, ''); // S4.1.2.3 & S5.2.3: ignore leading .\n  if (constants_1.IP_V6_REGEX_OBJECT.test(str)) {\n    if (!str.startsWith('[')) {\n      str = '[' + str;\n    }\n    if (!str.endsWith(']')) {\n      str = str + ']';\n    }\n    return (0, node_url_1.domainToASCII)(str).slice(1, -1); // remove [ and ]\n  }\n  // convert to IDN if any non-ASCII characters\n  // eslint-disable-next-line no-control-regex\n  if (/[^\\u0001-\\u007f]/.test(str)) {\n    return (0, node_url_1.domainToASCII)(str);\n  }\n  // ASCII-only domain - not canonicalized with new URL() because it may be a malformed URL\n  return str.toLowerCase();\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","canonicalDomain","constants_1","require","node_url_1","domainName","undefined","str","trim","replace","IP_V6_REGEX_OBJECT","test","startsWith","endsWith","domainToASCII","slice","toLowerCase"],"sources":["/Users/feyraf/Desktop/projets/Roma/invest/node_modules/tough-cookie/dist/cookie/canonicalDomain.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.canonicalDomain = canonicalDomain;\nconst constants_1 = require(\"./constants\");\nconst node_url_1 = require(\"node:url\");\n/**\n * Transforms a domain name into a canonical domain name. The canonical domain name is a domain name\n * that has been trimmed, lowercased, stripped of leading dot, and optionally punycode-encoded\n * ({@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.1.2 | Section 5.1.2 of RFC 6265}). For\n * the most part, this function is idempotent (calling the function with the output from a previous call\n * returns the same output).\n *\n * @remarks\n * A canonicalized host name is the string generated by the following\n * algorithm:\n *\n * 1.  Convert the host name to a sequence of individual domain name\n *     labels.\n *\n * 2.  Convert each label that is not a Non-Reserved LDH (NR-LDH) label,\n *     to an A-label (see Section 2.3.2.1 of [RFC5890] for the former\n *     and latter), or to a \"punycode label\" (a label resulting from the\n *     \"ToASCII\" conversion in Section 4 of [RFC3490]), as appropriate\n *     (see Section 6.3 of this specification).\n *\n * 3.  Concatenate the resulting labels, separated by a %x2E (\".\")\n *     character.\n *\n * @example\n * ```\n * canonicalDomain('.EXAMPLE.com') === 'example.com'\n * ```\n *\n * @param domainName - the domain name to generate the canonical domain from\n * @public\n */\nfunction canonicalDomain(domainName) {\n    if (domainName == null) {\n        return undefined;\n    }\n    let str = domainName.trim().replace(/^\\./, ''); // S4.1.2.3 & S5.2.3: ignore leading .\n    if (constants_1.IP_V6_REGEX_OBJECT.test(str)) {\n        if (!str.startsWith('[')) {\n            str = '[' + str;\n        }\n        if (!str.endsWith(']')) {\n            str = str + ']';\n        }\n        return (0, node_url_1.domainToASCII)(str).slice(1, -1); // remove [ and ]\n    }\n    // convert to IDN if any non-ASCII characters\n    // eslint-disable-next-line no-control-regex\n    if (/[^\\u0001-\\u007f]/.test(str)) {\n        return (0, node_url_1.domainToASCII)(str);\n    }\n    // ASCII-only domain - not canonicalized with new URL() because it may be a malformed URL\n    return str.toLowerCase();\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGA,eAAe;AACzC,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMC,UAAU,GAAGD,OAAO,CAAC,UAAU,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,eAAeA,CAACI,UAAU,EAAE;EACjC,IAAIA,UAAU,IAAI,IAAI,EAAE;IACpB,OAAOC,SAAS;EACpB;EACA,IAAIC,GAAG,GAAGF,UAAU,CAACG,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;EAChD,IAAIP,WAAW,CAACQ,kBAAkB,CAACC,IAAI,CAACJ,GAAG,CAAC,EAAE;IAC1C,IAAI,CAACA,GAAG,CAACK,UAAU,CAAC,GAAG,CAAC,EAAE;MACtBL,GAAG,GAAG,GAAG,GAAGA,GAAG;IACnB;IACA,IAAI,CAACA,GAAG,CAACM,QAAQ,CAAC,GAAG,CAAC,EAAE;MACpBN,GAAG,GAAGA,GAAG,GAAG,GAAG;IACnB;IACA,OAAO,CAAC,CAAC,EAAEH,UAAU,CAACU,aAAa,EAAEP,GAAG,CAAC,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5D;EACA;EACA;EACA,IAAI,kBAAkB,CAACJ,IAAI,CAACJ,GAAG,CAAC,EAAE;IAC9B,OAAO,CAAC,CAAC,EAAEH,UAAU,CAACU,aAAa,EAAEP,GAAG,CAAC;EAC7C;EACA;EACA,OAAOA,GAAG,CAACS,WAAW,CAAC,CAAC;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}