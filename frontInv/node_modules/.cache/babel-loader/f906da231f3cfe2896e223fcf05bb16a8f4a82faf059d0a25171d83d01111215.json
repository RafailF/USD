{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPublicSuffix = getPublicSuffix;\nconst tldts_1 = require(\"tldts\");\n// RFC 6761\nconst SPECIAL_USE_DOMAINS = ['local', 'example', 'invalid', 'localhost', 'test'];\nconst SPECIAL_TREATMENT_DOMAINS = ['localhost', 'invalid'];\nconst defaultGetPublicSuffixOptions = {\n  allowSpecialUseDomain: false,\n  ignoreError: false\n};\n/**\n * Returns the public suffix of this hostname. The public suffix is the shortest domain\n * name upon which a cookie can be set.\n *\n * @remarks\n * A \"public suffix\" is a domain that is controlled by a\n * public registry, such as \"com\", \"co.uk\", and \"pvt.k12.wy.us\".\n * This step is essential for preventing attacker.com from\n * disrupting the integrity of example.com by setting a cookie\n * with a Domain attribute of \"com\".  Unfortunately, the set of\n * public suffixes (also known as \"registry controlled domains\")\n * changes over time.  If feasible, user agents SHOULD use an\n * up-to-date public suffix list, such as the one maintained by\n * the Mozilla project at http://publicsuffix.org/.\n * (See {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.3 | RFC6265 - Section 5.3})\n *\n * @example\n * ```\n * getPublicSuffix('www.example.com') === 'example.com'\n * getPublicSuffix('www.subdomain.example.com') === 'example.com'\n * ```\n *\n * @param domain - the domain attribute of a cookie\n * @param options - optional configuration for controlling how the public suffix is determined\n * @public\n */\nfunction getPublicSuffix(domain, options = {}) {\n  options = {\n    ...defaultGetPublicSuffixOptions,\n    ...options\n  };\n  const domainParts = domain.split('.');\n  const topLevelDomain = domainParts[domainParts.length - 1];\n  const allowSpecialUseDomain = !!options.allowSpecialUseDomain;\n  const ignoreError = !!options.ignoreError;\n  if (allowSpecialUseDomain && topLevelDomain !== undefined && SPECIAL_USE_DOMAINS.includes(topLevelDomain)) {\n    if (domainParts.length > 1) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const secondLevelDomain = domainParts[domainParts.length - 2];\n      // In aforementioned example, the eTLD/pubSuf will be apple.localhost\n      return `${secondLevelDomain}.${topLevelDomain}`;\n    } else if (SPECIAL_TREATMENT_DOMAINS.includes(topLevelDomain)) {\n      // For a single word special use domain, e.g. 'localhost' or 'invalid', per RFC 6761,\n      // \"Application software MAY recognize {localhost/invalid} names as special, or\n      // MAY pass them to name resolution APIs as they would for other domain names.\"\n      return topLevelDomain;\n    }\n  }\n  if (!ignoreError && topLevelDomain !== undefined && SPECIAL_USE_DOMAINS.includes(topLevelDomain)) {\n    throw new Error(`Cookie has domain set to the public suffix \"${topLevelDomain}\" which is a special use domain. To allow this, configure your CookieJar with {allowSpecialUseDomain: true, rejectPublicSuffixes: false}.`);\n  }\n  const publicSuffix = (0, tldts_1.getDomain)(domain, {\n    allowIcannDomains: true,\n    allowPrivateDomains: true\n  });\n  if (publicSuffix) return publicSuffix;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getPublicSuffix","tldts_1","require","SPECIAL_USE_DOMAINS","SPECIAL_TREATMENT_DOMAINS","defaultGetPublicSuffixOptions","allowSpecialUseDomain","ignoreError","domain","options","domainParts","split","topLevelDomain","length","undefined","includes","secondLevelDomain","Error","publicSuffix","getDomain","allowIcannDomains","allowPrivateDomains"],"sources":["/Users/feyraf/Desktop/projets/Roma/invest/node_modules/tough-cookie/dist/getPublicSuffix.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPublicSuffix = getPublicSuffix;\nconst tldts_1 = require(\"tldts\");\n// RFC 6761\nconst SPECIAL_USE_DOMAINS = ['local', 'example', 'invalid', 'localhost', 'test'];\nconst SPECIAL_TREATMENT_DOMAINS = ['localhost', 'invalid'];\nconst defaultGetPublicSuffixOptions = {\n    allowSpecialUseDomain: false,\n    ignoreError: false,\n};\n/**\n * Returns the public suffix of this hostname. The public suffix is the shortest domain\n * name upon which a cookie can be set.\n *\n * @remarks\n * A \"public suffix\" is a domain that is controlled by a\n * public registry, such as \"com\", \"co.uk\", and \"pvt.k12.wy.us\".\n * This step is essential for preventing attacker.com from\n * disrupting the integrity of example.com by setting a cookie\n * with a Domain attribute of \"com\".  Unfortunately, the set of\n * public suffixes (also known as \"registry controlled domains\")\n * changes over time.  If feasible, user agents SHOULD use an\n * up-to-date public suffix list, such as the one maintained by\n * the Mozilla project at http://publicsuffix.org/.\n * (See {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.3 | RFC6265 - Section 5.3})\n *\n * @example\n * ```\n * getPublicSuffix('www.example.com') === 'example.com'\n * getPublicSuffix('www.subdomain.example.com') === 'example.com'\n * ```\n *\n * @param domain - the domain attribute of a cookie\n * @param options - optional configuration for controlling how the public suffix is determined\n * @public\n */\nfunction getPublicSuffix(domain, options = {}) {\n    options = { ...defaultGetPublicSuffixOptions, ...options };\n    const domainParts = domain.split('.');\n    const topLevelDomain = domainParts[domainParts.length - 1];\n    const allowSpecialUseDomain = !!options.allowSpecialUseDomain;\n    const ignoreError = !!options.ignoreError;\n    if (allowSpecialUseDomain &&\n        topLevelDomain !== undefined &&\n        SPECIAL_USE_DOMAINS.includes(topLevelDomain)) {\n        if (domainParts.length > 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const secondLevelDomain = domainParts[domainParts.length - 2];\n            // In aforementioned example, the eTLD/pubSuf will be apple.localhost\n            return `${secondLevelDomain}.${topLevelDomain}`;\n        }\n        else if (SPECIAL_TREATMENT_DOMAINS.includes(topLevelDomain)) {\n            // For a single word special use domain, e.g. 'localhost' or 'invalid', per RFC 6761,\n            // \"Application software MAY recognize {localhost/invalid} names as special, or\n            // MAY pass them to name resolution APIs as they would for other domain names.\"\n            return topLevelDomain;\n        }\n    }\n    if (!ignoreError &&\n        topLevelDomain !== undefined &&\n        SPECIAL_USE_DOMAINS.includes(topLevelDomain)) {\n        throw new Error(`Cookie has domain set to the public suffix \"${topLevelDomain}\" which is a special use domain. To allow this, configure your CookieJar with {allowSpecialUseDomain: true, rejectPublicSuffixes: false}.`);\n    }\n    const publicSuffix = (0, tldts_1.getDomain)(domain, {\n        allowIcannDomains: true,\n        allowPrivateDomains: true,\n    });\n    if (publicSuffix)\n        return publicSuffix;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGA,eAAe;AACzC,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAChC;AACA,MAAMC,mBAAmB,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,CAAC;AAChF,MAAMC,yBAAyB,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC;AAC1D,MAAMC,6BAA6B,GAAG;EAClCC,qBAAqB,EAAE,KAAK;EAC5BC,WAAW,EAAE;AACjB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,eAAeA,CAACQ,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC3CA,OAAO,GAAG;IAAE,GAAGJ,6BAA6B;IAAE,GAAGI;EAAQ,CAAC;EAC1D,MAAMC,WAAW,GAAGF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC;EACrC,MAAMC,cAAc,GAAGF,WAAW,CAACA,WAAW,CAACG,MAAM,GAAG,CAAC,CAAC;EAC1D,MAAMP,qBAAqB,GAAG,CAAC,CAACG,OAAO,CAACH,qBAAqB;EAC7D,MAAMC,WAAW,GAAG,CAAC,CAACE,OAAO,CAACF,WAAW;EACzC,IAAID,qBAAqB,IACrBM,cAAc,KAAKE,SAAS,IAC5BX,mBAAmB,CAACY,QAAQ,CAACH,cAAc,CAAC,EAAE;IAC9C,IAAIF,WAAW,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB;MACA,MAAMG,iBAAiB,GAAGN,WAAW,CAACA,WAAW,CAACG,MAAM,GAAG,CAAC,CAAC;MAC7D;MACA,OAAO,GAAGG,iBAAiB,IAAIJ,cAAc,EAAE;IACnD,CAAC,MACI,IAAIR,yBAAyB,CAACW,QAAQ,CAACH,cAAc,CAAC,EAAE;MACzD;MACA;MACA;MACA,OAAOA,cAAc;IACzB;EACJ;EACA,IAAI,CAACL,WAAW,IACZK,cAAc,KAAKE,SAAS,IAC5BX,mBAAmB,CAACY,QAAQ,CAACH,cAAc,CAAC,EAAE;IAC9C,MAAM,IAAIK,KAAK,CAAC,+CAA+CL,cAAc,2IAA2I,CAAC;EAC7N;EACA,MAAMM,YAAY,GAAG,CAAC,CAAC,EAAEjB,OAAO,CAACkB,SAAS,EAAEX,MAAM,EAAE;IAChDY,iBAAiB,EAAE,IAAI;IACvBC,mBAAmB,EAAE;EACzB,CAAC,CAAC;EACF,IAAIH,YAAY,EACZ,OAAOA,YAAY;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}