{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.domainMatch = domainMatch;\nconst canonicalDomain_1 = require(\"./canonicalDomain\");\n// Dumped from ip-regex@4.0.0, with the following changes:\n// * all capturing groups converted to non-capturing -- \"(?:)\"\n// * support for IPv6 Scoped Literal (\"%eth1\") removed\n// * lowercase hexadecimal only\nconst IP_REGEX_LOWERCASE = /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-f\\d]{1,4}:){7}(?:[a-f\\d]{1,4}|:)|(?:[a-f\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-f\\d]{1,4}|:)|(?:[a-f\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,2}|:)|(?:[a-f\\d]{1,4}:){4}(?:(?::[a-f\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,3}|:)|(?:[a-f\\d]{1,4}:){3}(?:(?::[a-f\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,4}|:)|(?:[a-f\\d]{1,4}:){2}(?:(?::[a-f\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,5}|:)|(?:[a-f\\d]{1,4}:){1}(?:(?::[a-f\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-f\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,7}|:)))$)/;\n/**\n * Answers \"does this real domain match the domain in a cookie?\". The `domain` is the \"current\" domain name and the\n * `cookieDomain` is the \"cookie\" domain name. Matches according to {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.1.3 | RFC6265 - Section 5.1.3},\n * but it helps to think of it as a \"suffix match\".\n *\n * @remarks\n * ### 5.1.3.  Domain Matching\n *\n * A string domain-matches a given domain string if at least one of the\n * following conditions hold:\n *\n * - The domain string and the string are identical.  (Note that both\n *     the domain string and the string will have been canonicalized to\n *     lower case at this point.)\n *\n * - All of the following conditions hold:\n *\n *     - The domain string is a suffix of the string.\n *\n *     - The last character of the string that is not included in the\n *         domain string is a %x2E (\".\") character.\n *\n *     - The string is a host name (i.e., not an IP address).\n *\n * @example\n * ```\n * domainMatch('example.com', 'example.com') === true\n * domainMatch('eXaMpLe.cOm', 'ExAmPlE.CoM') === true\n * domainMatch('no.ca', 'yes.ca') === false\n * ```\n *\n * @param domain - The domain string to test\n * @param cookieDomain - The cookie domain string to match against\n * @param canonicalize - The canonicalize parameter toggles whether the domain parameters get normalized with canonicalDomain or not\n * @public\n */\nfunction domainMatch(domain, cookieDomain, canonicalize) {\n  if (domain == null || cookieDomain == null) {\n    return undefined;\n  }\n  let _str;\n  let _domStr;\n  if (canonicalize !== false) {\n    _str = (0, canonicalDomain_1.canonicalDomain)(domain);\n    _domStr = (0, canonicalDomain_1.canonicalDomain)(cookieDomain);\n  } else {\n    _str = domain;\n    _domStr = cookieDomain;\n  }\n  if (_str == null || _domStr == null) {\n    return undefined;\n  }\n  /*\n   * S5.1.3:\n   * \"A string domain-matches a given domain string if at least one of the\n   * following conditions hold:\"\n   *\n   * \" o The domain string and the string are identical. (Note that both the\n   * domain string and the string will have been canonicalized to lower case at\n   * this point)\"\n   */\n  if (_str == _domStr) {\n    return true;\n  }\n  /* \" o All of the following [three] conditions hold:\" */\n  /* \"* The domain string is a suffix of the string\" */\n  const idx = _str.lastIndexOf(cookieDomain);\n  if (idx <= 0) {\n    return false; // it's a non-match (-1) or prefix (0)\n  }\n  // next, check it's a proper suffix\n  // e.g., \"a.b.c\".indexOf(\"b.c\") === 2\n  // 5 === 3+2\n  if (_str.length !== _domStr.length + idx) {\n    return false; // it's not a suffix\n  }\n  /* \"  * The last character of the string that is not included in the\n   * domain string is a %x2E (\".\") character.\" */\n  if (_str.substring(idx - 1, idx) !== '.') {\n    return false; // doesn't align on \".\"\n  }\n  /* \"  * The string is a host name (i.e., not an IP address).\" */\n  return !IP_REGEX_LOWERCASE.test(_str);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","domainMatch","canonicalDomain_1","require","IP_REGEX_LOWERCASE","domain","cookieDomain","canonicalize","undefined","_str","_domStr","canonicalDomain","idx","lastIndexOf","length","substring","test"],"sources":["/Users/feyraf/Desktop/projets/Roma/invest/node_modules/tough-cookie/dist/cookie/domainMatch.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.domainMatch = domainMatch;\nconst canonicalDomain_1 = require(\"./canonicalDomain\");\n// Dumped from ip-regex@4.0.0, with the following changes:\n// * all capturing groups converted to non-capturing -- \"(?:)\"\n// * support for IPv6 Scoped Literal (\"%eth1\") removed\n// * lowercase hexadecimal only\nconst IP_REGEX_LOWERCASE = /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-f\\d]{1,4}:){7}(?:[a-f\\d]{1,4}|:)|(?:[a-f\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-f\\d]{1,4}|:)|(?:[a-f\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,2}|:)|(?:[a-f\\d]{1,4}:){4}(?:(?::[a-f\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,3}|:)|(?:[a-f\\d]{1,4}:){3}(?:(?::[a-f\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,4}|:)|(?:[a-f\\d]{1,4}:){2}(?:(?::[a-f\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,5}|:)|(?:[a-f\\d]{1,4}:){1}(?:(?::[a-f\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-f\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,7}|:)))$)/;\n/**\n * Answers \"does this real domain match the domain in a cookie?\". The `domain` is the \"current\" domain name and the\n * `cookieDomain` is the \"cookie\" domain name. Matches according to {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.1.3 | RFC6265 - Section 5.1.3},\n * but it helps to think of it as a \"suffix match\".\n *\n * @remarks\n * ### 5.1.3.  Domain Matching\n *\n * A string domain-matches a given domain string if at least one of the\n * following conditions hold:\n *\n * - The domain string and the string are identical.  (Note that both\n *     the domain string and the string will have been canonicalized to\n *     lower case at this point.)\n *\n * - All of the following conditions hold:\n *\n *     - The domain string is a suffix of the string.\n *\n *     - The last character of the string that is not included in the\n *         domain string is a %x2E (\".\") character.\n *\n *     - The string is a host name (i.e., not an IP address).\n *\n * @example\n * ```\n * domainMatch('example.com', 'example.com') === true\n * domainMatch('eXaMpLe.cOm', 'ExAmPlE.CoM') === true\n * domainMatch('no.ca', 'yes.ca') === false\n * ```\n *\n * @param domain - The domain string to test\n * @param cookieDomain - The cookie domain string to match against\n * @param canonicalize - The canonicalize parameter toggles whether the domain parameters get normalized with canonicalDomain or not\n * @public\n */\nfunction domainMatch(domain, cookieDomain, canonicalize) {\n    if (domain == null || cookieDomain == null) {\n        return undefined;\n    }\n    let _str;\n    let _domStr;\n    if (canonicalize !== false) {\n        _str = (0, canonicalDomain_1.canonicalDomain)(domain);\n        _domStr = (0, canonicalDomain_1.canonicalDomain)(cookieDomain);\n    }\n    else {\n        _str = domain;\n        _domStr = cookieDomain;\n    }\n    if (_str == null || _domStr == null) {\n        return undefined;\n    }\n    /*\n     * S5.1.3:\n     * \"A string domain-matches a given domain string if at least one of the\n     * following conditions hold:\"\n     *\n     * \" o The domain string and the string are identical. (Note that both the\n     * domain string and the string will have been canonicalized to lower case at\n     * this point)\"\n     */\n    if (_str == _domStr) {\n        return true;\n    }\n    /* \" o All of the following [three] conditions hold:\" */\n    /* \"* The domain string is a suffix of the string\" */\n    const idx = _str.lastIndexOf(cookieDomain);\n    if (idx <= 0) {\n        return false; // it's a non-match (-1) or prefix (0)\n    }\n    // next, check it's a proper suffix\n    // e.g., \"a.b.c\".indexOf(\"b.c\") === 2\n    // 5 === 3+2\n    if (_str.length !== _domStr.length + idx) {\n        return false; // it's not a suffix\n    }\n    /* \"  * The last character of the string that is not included in the\n     * domain string is a %x2E (\".\") character.\" */\n    if (_str.substring(idx - 1, idx) !== '.') {\n        return false; // doesn't align on \".\"\n    }\n    /* \"  * The string is a host name (i.e., not an IP address).\" */\n    return !IP_REGEX_LOWERCASE.test(_str);\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGA,WAAW;AACjC,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACtD;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,2oCAA2oC;AACtqC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,WAAWA,CAACI,MAAM,EAAEC,YAAY,EAAEC,YAAY,EAAE;EACrD,IAAIF,MAAM,IAAI,IAAI,IAAIC,YAAY,IAAI,IAAI,EAAE;IACxC,OAAOE,SAAS;EACpB;EACA,IAAIC,IAAI;EACR,IAAIC,OAAO;EACX,IAAIH,YAAY,KAAK,KAAK,EAAE;IACxBE,IAAI,GAAG,CAAC,CAAC,EAAEP,iBAAiB,CAACS,eAAe,EAAEN,MAAM,CAAC;IACrDK,OAAO,GAAG,CAAC,CAAC,EAAER,iBAAiB,CAACS,eAAe,EAAEL,YAAY,CAAC;EAClE,CAAC,MACI;IACDG,IAAI,GAAGJ,MAAM;IACbK,OAAO,GAAGJ,YAAY;EAC1B;EACA,IAAIG,IAAI,IAAI,IAAI,IAAIC,OAAO,IAAI,IAAI,EAAE;IACjC,OAAOF,SAAS;EACpB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,IAAI,IAAIC,OAAO,EAAE;IACjB,OAAO,IAAI;EACf;EACA;EACA;EACA,MAAME,GAAG,GAAGH,IAAI,CAACI,WAAW,CAACP,YAAY,CAAC;EAC1C,IAAIM,GAAG,IAAI,CAAC,EAAE;IACV,OAAO,KAAK,CAAC,CAAC;EAClB;EACA;EACA;EACA;EACA,IAAIH,IAAI,CAACK,MAAM,KAAKJ,OAAO,CAACI,MAAM,GAAGF,GAAG,EAAE;IACtC,OAAO,KAAK,CAAC,CAAC;EAClB;EACA;AACJ;EACI,IAAIH,IAAI,CAACM,SAAS,CAACH,GAAG,GAAG,CAAC,EAAEA,GAAG,CAAC,KAAK,GAAG,EAAE;IACtC,OAAO,KAAK,CAAC,CAAC;EAClB;EACA;EACA,OAAO,CAACR,kBAAkB,CAACY,IAAI,CAACP,IAAI,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}