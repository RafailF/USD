{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.set.difference.v2.js\");\nrequire(\"core-js/modules/es.set.intersection.v2.js\");\nrequire(\"core-js/modules/es.set.is-disjoint-from.v2.js\");\nrequire(\"core-js/modules/es.set.is-subset-of.v2.js\");\nrequire(\"core-js/modules/es.set.is-superset-of.v2.js\");\nrequire(\"core-js/modules/es.set.symmetric-difference.v2.js\");\nrequire(\"core-js/modules/es.set.union.v2.js\");\nconst idlUtils = require(\"../generated/utils.js\");\nconst {\n  setAttributeValue,\n  removeAttributeByName\n} = require(\"../attributes\");\nconst validateName = require(\"../helpers/validate-names\").name;\nconst DOMException = require(\"../generated/DOMException\");\nconst dataAttrRe = /^data-([^A-Z]*)$/;\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\n}\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n}\nexports.implementation = class DOMStringMapImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._element = privateData.element;\n  }\n  get [idlUtils.supportedPropertyNames]() {\n    const result = new Set();\n    const {\n      attributes\n    } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches) {\n        result.add(attrCamelCase(matches[1]));\n      }\n    }\n    return result;\n  }\n  [idlUtils.namedGet](name) {\n    const {\n      attributes\n    } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches && attrCamelCase(matches[1]) === name) {\n        return attr.value;\n      }\n    }\n    return undefined;\n  }\n  [idlUtils.namedSetNew](name, value) {\n    if (/-[a-z]/.test(name)) {\n      throw DOMException.create(this._globalObject, [`'${name}' is not a valid property name`, \"SyntaxError\"]);\n    }\n    name = `data-${attrSnakeCase(name)}`;\n    validateName(this._globalObject, name);\n    setAttributeValue(this._element, name, value);\n  }\n  [idlUtils.namedSetExisting](name, value) {\n    this[idlUtils.namedSetNew](name, value);\n  }\n  [idlUtils.namedDelete](name) {\n    name = `data-${attrSnakeCase(name)}`;\n    removeAttributeByName(this._element, name);\n  }\n};","map":{"version":3,"names":["require","idlUtils","setAttributeValue","removeAttributeByName","validateName","name","DOMException","dataAttrRe","attrCamelCase","replace","match","alpha","toUpperCase","attrSnakeCase","toLowerCase","exports","implementation","DOMStringMapImpl","constructor","globalObject","args","privateData","_globalObject","_element","element","supportedPropertyNames","result","Set","attributes","i","length","attr","item","matches","exec","localName","add","namedGet","value","undefined","namedSetNew","test","create","namedSetExisting","namedDelete"],"sources":["/Users/feyraf/Desktop/projets/Roma/invest/node_modules/jsdom/lib/jsdom/living/nodes/DOMStringMap-impl.js"],"sourcesContent":["\"use strict\";\n\nconst idlUtils = require(\"../generated/utils.js\");\nconst { setAttributeValue, removeAttributeByName } = require(\"../attributes\");\nconst validateName = require(\"../helpers/validate-names\").name;\nconst DOMException = require(\"../generated/DOMException\");\n\nconst dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n}\n\nexports.implementation = class DOMStringMapImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._element = privateData.element;\n  }\n  get [idlUtils.supportedPropertyNames]() {\n    const result = new Set();\n    const { attributes } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches) {\n        result.add(attrCamelCase(matches[1]));\n      }\n    }\n    return result;\n  }\n  [idlUtils.namedGet](name) {\n    const { attributes } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches && attrCamelCase(matches[1]) === name) {\n        return attr.value;\n      }\n    }\n    return undefined;\n  }\n  [idlUtils.namedSetNew](name, value) {\n    if (/-[a-z]/.test(name)) {\n      throw DOMException.create(this._globalObject, [\n        `'${name}' is not a valid property name`,\n        \"SyntaxError\"\n      ]);\n    }\n    name = `data-${attrSnakeCase(name)}`;\n    validateName(this._globalObject, name);\n    setAttributeValue(this._element, name, value);\n  }\n  [idlUtils.namedSetExisting](name, value) {\n    this[idlUtils.namedSetNew](name, value);\n  }\n  [idlUtils.namedDelete](name) {\n    name = `data-${attrSnakeCase(name)}`;\n    removeAttributeByName(this._element, name);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}