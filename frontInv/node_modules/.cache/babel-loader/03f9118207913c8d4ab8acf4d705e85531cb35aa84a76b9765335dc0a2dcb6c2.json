{"ast":null,"code":"\"use strict\";\n\n/* ************************************************************************************\nExtracted from check-types.js\nhttps://gitlab.com/philbooth/check-types.js\n\nMIT License\n\nCopyright (c) 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019 Phil Booth\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n************************************************************************************ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParameterError = void 0;\nexports.isNonEmptyString = isNonEmptyString;\nexports.isDate = isDate;\nexports.isEmptyString = isEmptyString;\nexports.isString = isString;\nexports.isObject = isObject;\nexports.isInteger = isInteger;\nexports.validate = validate;\nconst utils_1 = require(\"./utils\");\n/* Validation functions copied from check-types package - https://www.npmjs.com/package/check-types */\n/** Determines whether the argument is a non-empty string. */\nfunction isNonEmptyString(data) {\n  return isString(data) && data !== '';\n}\n/** Determines whether the argument is a *valid* Date. */\nfunction isDate(data) {\n  return data instanceof Date && isInteger(data.getTime());\n}\n/** Determines whether the argument is the empty string. */\nfunction isEmptyString(data) {\n  return data === '' || data instanceof String && data.toString() === '';\n}\n/** Determines whether the argument is a string. */\nfunction isString(data) {\n  return typeof data === 'string' || data instanceof String;\n}\n/** Determines whether the string representation of the argument is \"[object Object]\". */\nfunction isObject(data) {\n  return (0, utils_1.objectToString)(data) === '[object Object]';\n}\n/** Determines whether the argument is an integer. */\nfunction isInteger(data) {\n  return typeof data === 'number' && data % 1 === 0;\n}\n/* -- End validation functions -- */\n/**\n * When the first argument is false, an error is created with the given message. If a callback is\n * provided, the error is passed to the callback, otherwise the error is thrown.\n */\nfunction validate(bool, cbOrMessage, message) {\n  if (bool) return; // Validation passes\n  const cb = typeof cbOrMessage === 'function' ? cbOrMessage : undefined;\n  let options = typeof cbOrMessage === 'function' ? message : cbOrMessage;\n  // The default message prior to v5 was '[object Object]' due to a bug, and the message is kept\n  // for backwards compatibility.\n  if (!isObject(options)) options = '[object Object]';\n  const err = new ParameterError((0, utils_1.safeToString)(options));\n  if (cb) cb(err);else throw err;\n}\n/**\n * Represents a validation error.\n * @public\n */\nclass ParameterError extends Error {}\nexports.ParameterError = ParameterError;","map":{"version":3,"names":["Object","defineProperty","exports","value","ParameterError","isNonEmptyString","isDate","isEmptyString","isString","isObject","isInteger","validate","utils_1","require","data","Date","getTime","String","toString","objectToString","bool","cbOrMessage","message","cb","undefined","options","err","safeToString","Error"],"sources":["/Users/feyraf/Desktop/projets/Roma/invest/node_modules/tough-cookie/dist/validators.js"],"sourcesContent":["\"use strict\";\n/* ************************************************************************************\nExtracted from check-types.js\nhttps://gitlab.com/philbooth/check-types.js\n\nMIT License\n\nCopyright (c) 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019 Phil Booth\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n************************************************************************************ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParameterError = void 0;\nexports.isNonEmptyString = isNonEmptyString;\nexports.isDate = isDate;\nexports.isEmptyString = isEmptyString;\nexports.isString = isString;\nexports.isObject = isObject;\nexports.isInteger = isInteger;\nexports.validate = validate;\nconst utils_1 = require(\"./utils\");\n/* Validation functions copied from check-types package - https://www.npmjs.com/package/check-types */\n/** Determines whether the argument is a non-empty string. */\nfunction isNonEmptyString(data) {\n    return isString(data) && data !== '';\n}\n/** Determines whether the argument is a *valid* Date. */\nfunction isDate(data) {\n    return data instanceof Date && isInteger(data.getTime());\n}\n/** Determines whether the argument is the empty string. */\nfunction isEmptyString(data) {\n    return data === '' || (data instanceof String && data.toString() === '');\n}\n/** Determines whether the argument is a string. */\nfunction isString(data) {\n    return typeof data === 'string' || data instanceof String;\n}\n/** Determines whether the string representation of the argument is \"[object Object]\". */\nfunction isObject(data) {\n    return (0, utils_1.objectToString)(data) === '[object Object]';\n}\n/** Determines whether the argument is an integer. */\nfunction isInteger(data) {\n    return typeof data === 'number' && data % 1 === 0;\n}\n/* -- End validation functions -- */\n/**\n * When the first argument is false, an error is created with the given message. If a callback is\n * provided, the error is passed to the callback, otherwise the error is thrown.\n */\nfunction validate(bool, cbOrMessage, message) {\n    if (bool)\n        return; // Validation passes\n    const cb = typeof cbOrMessage === 'function' ? cbOrMessage : undefined;\n    let options = typeof cbOrMessage === 'function' ? message : cbOrMessage;\n    // The default message prior to v5 was '[object Object]' due to a bug, and the message is kept\n    // for backwards compatibility.\n    if (!isObject(options))\n        options = '[object Object]';\n    const err = new ParameterError((0, utils_1.safeToString)(options));\n    if (cb)\n        cb(err);\n    else\n        throw err;\n}\n/**\n * Represents a validation error.\n * @public\n */\nclass ParameterError extends Error {\n}\nexports.ParameterError = ParameterError;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/BF,OAAO,CAACG,gBAAgB,GAAGA,gBAAgB;AAC3CH,OAAO,CAACI,MAAM,GAAGA,MAAM;AACvBJ,OAAO,CAACK,aAAa,GAAGA,aAAa;AACrCL,OAAO,CAACM,QAAQ,GAAGA,QAAQ;AAC3BN,OAAO,CAACO,QAAQ,GAAGA,QAAQ;AAC3BP,OAAO,CAACQ,SAAS,GAAGA,SAAS;AAC7BR,OAAO,CAACS,QAAQ,GAAGA,QAAQ;AAC3B,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC;AACA;AACA,SAASR,gBAAgBA,CAACS,IAAI,EAAE;EAC5B,OAAON,QAAQ,CAACM,IAAI,CAAC,IAAIA,IAAI,KAAK,EAAE;AACxC;AACA;AACA,SAASR,MAAMA,CAACQ,IAAI,EAAE;EAClB,OAAOA,IAAI,YAAYC,IAAI,IAAIL,SAAS,CAACI,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;AAC5D;AACA;AACA,SAAST,aAAaA,CAACO,IAAI,EAAE;EACzB,OAAOA,IAAI,KAAK,EAAE,IAAKA,IAAI,YAAYG,MAAM,IAAIH,IAAI,CAACI,QAAQ,CAAC,CAAC,KAAK,EAAG;AAC5E;AACA;AACA,SAASV,QAAQA,CAACM,IAAI,EAAE;EACpB,OAAO,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,YAAYG,MAAM;AAC7D;AACA;AACA,SAASR,QAAQA,CAACK,IAAI,EAAE;EACpB,OAAO,CAAC,CAAC,EAAEF,OAAO,CAACO,cAAc,EAAEL,IAAI,CAAC,KAAK,iBAAiB;AAClE;AACA;AACA,SAASJ,SAASA,CAACI,IAAI,EAAE;EACrB,OAAO,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,GAAG,CAAC,KAAK,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,QAAQA,CAACS,IAAI,EAAEC,WAAW,EAAEC,OAAO,EAAE;EAC1C,IAAIF,IAAI,EACJ,OAAO,CAAC;EACZ,MAAMG,EAAE,GAAG,OAAOF,WAAW,KAAK,UAAU,GAAGA,WAAW,GAAGG,SAAS;EACtE,IAAIC,OAAO,GAAG,OAAOJ,WAAW,KAAK,UAAU,GAAGC,OAAO,GAAGD,WAAW;EACvE;EACA;EACA,IAAI,CAACZ,QAAQ,CAACgB,OAAO,CAAC,EAClBA,OAAO,GAAG,iBAAiB;EAC/B,MAAMC,GAAG,GAAG,IAAItB,cAAc,CAAC,CAAC,CAAC,EAAEQ,OAAO,CAACe,YAAY,EAAEF,OAAO,CAAC,CAAC;EAClE,IAAIF,EAAE,EACFA,EAAE,CAACG,GAAG,CAAC,CAAC,KAER,MAAMA,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA,MAAMtB,cAAc,SAASwB,KAAK,CAAC;AAEnC1B,OAAO,CAACE,cAAc,GAAGA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}