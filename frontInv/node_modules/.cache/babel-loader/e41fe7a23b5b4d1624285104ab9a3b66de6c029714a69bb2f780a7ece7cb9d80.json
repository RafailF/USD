{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/esnext.iterator.constructor.js\");\nrequire(\"core-js/modules/esnext.iterator.every.js\");\nrequire(\"core-js/modules/esnext.iterator.for-each.js\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cookie = void 0;\n/*!\n * Copyright (c) 2015-2020, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nconst getPublicSuffix_1 = require(\"../getPublicSuffix\");\nconst validators = __importStar(require(\"../validators\"));\nconst utils_1 = require(\"../utils\");\nconst formatDate_1 = require(\"./formatDate\");\nconst parseDate_1 = require(\"./parseDate\");\nconst canonicalDomain_1 = require(\"./canonicalDomain\");\n// From RFC6265 S4.1.1\n// note that it excludes \\x3B \";\"\nconst COOKIE_OCTETS = /^[\\x21\\x23-\\x2B\\x2D-\\x3A\\x3C-\\x5B\\x5D-\\x7E]+$/;\n// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or \";\"'\n// Note ';' is \\x3B\nconst PATH_VALUE = /[\\x20-\\x3A\\x3C-\\x7E]+/;\n// eslint-disable-next-line no-control-regex\nconst CONTROL_CHARS = /[\\x00-\\x1F]/;\n// From Chromium // '\\r', '\\n' and '\\0' should be treated as a terminator in\n// the \"relaxed\" mode, see:\n// https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60\nconst TERMINATORS = ['\\n', '\\r', '\\0'];\nfunction trimTerminator(str) {\n  if (validators.isEmptyString(str)) return str;\n  for (let t = 0; t < TERMINATORS.length; t++) {\n    const terminator = TERMINATORS[t];\n    const terminatorIdx = terminator ? str.indexOf(terminator) : -1;\n    if (terminatorIdx !== -1) {\n      str = str.slice(0, terminatorIdx);\n    }\n  }\n  return str;\n}\nfunction parseCookiePair(cookiePair, looseMode) {\n  cookiePair = trimTerminator(cookiePair);\n  let firstEq = cookiePair.indexOf('=');\n  if (looseMode) {\n    if (firstEq === 0) {\n      // '=' is immediately at start\n      cookiePair = cookiePair.substring(1);\n      firstEq = cookiePair.indexOf('='); // might still need to split on '='\n    }\n  } else {\n    // non-loose mode\n    if (firstEq <= 0) {\n      // no '=' or is at start\n      return undefined; // needs to have non-empty \"cookie-name\"\n    }\n  }\n  let cookieName, cookieValue;\n  if (firstEq <= 0) {\n    cookieName = '';\n    cookieValue = cookiePair.trim();\n  } else {\n    cookieName = cookiePair.slice(0, firstEq).trim();\n    cookieValue = cookiePair.slice(firstEq + 1).trim();\n  }\n  if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {\n    return undefined;\n  }\n  const c = new Cookie();\n  c.key = cookieName;\n  c.value = cookieValue;\n  return c;\n}\nfunction parse(str, options) {\n  if (validators.isEmptyString(str) || !validators.isString(str)) {\n    return undefined;\n  }\n  str = str.trim();\n  // We use a regex to parse the \"name-value-pair\" part of S5.2\n  const firstSemi = str.indexOf(';'); // S5.2 step 1\n  const cookiePair = firstSemi === -1 ? str : str.slice(0, firstSemi);\n  const c = parseCookiePair(cookiePair, options?.loose ?? false);\n  if (!c) {\n    return undefined;\n  }\n  if (firstSemi === -1) {\n    return c;\n  }\n  // S5.2.3 \"unparsed-attributes consist of the remainder of the set-cookie-string\n  // (including the %x3B (\";\") in question).\" plus later on in the same section\n  // \"discard the first \";\" and trim\".\n  const unparsed = str.slice(firstSemi + 1).trim();\n  // \"If the unparsed-attributes string is empty, skip the rest of these\n  // steps.\"\n  if (unparsed.length === 0) {\n    return c;\n  }\n  /*\n   * S5.2 says that when looping over the items \"[p]rocess the attribute-name\n   * and attribute-value according to the requirements in the following\n   * subsections\" for every item.  Plus, for many of the individual attributes\n   * in S5.3 it says to use the \"attribute-value of the last attribute in the\n   * cookie-attribute-list\".  Therefore, in this implementation, we overwrite\n   * the previous value.\n   */\n  const cookie_avs = unparsed.split(';');\n  while (cookie_avs.length) {\n    const av = (cookie_avs.shift() ?? '').trim();\n    if (av.length === 0) {\n      // happens if \";;\" appears\n      continue;\n    }\n    const av_sep = av.indexOf('=');\n    let av_key, av_value;\n    if (av_sep === -1) {\n      av_key = av;\n      av_value = null;\n    } else {\n      av_key = av.slice(0, av_sep);\n      av_value = av.slice(av_sep + 1);\n    }\n    av_key = av_key.trim().toLowerCase();\n    if (av_value) {\n      av_value = av_value.trim();\n    }\n    switch (av_key) {\n      case 'expires':\n        // S5.2.1\n        if (av_value) {\n          const exp = (0, parseDate_1.parseDate)(av_value);\n          // \"If the attribute-value failed to parse as a cookie date, ignore the\n          // cookie-av.\"\n          if (exp) {\n            // over and underflow not realistically a concern: V8's getTime() seems to\n            // store something larger than a 32-bit time_t (even with 32-bit node)\n            c.expires = exp;\n          }\n        }\n        break;\n      case 'max-age':\n        // S5.2.2\n        if (av_value) {\n          // \"If the first character of the attribute-value is not a DIGIT or a \"-\"\n          // character ...[or]... If the remainder of attribute-value contains a\n          // non-DIGIT character, ignore the cookie-av.\"\n          if (/^-?[0-9]+$/.test(av_value)) {\n            const delta = parseInt(av_value, 10);\n            // \"If delta-seconds is less than or equal to zero (0), let expiry-time\n            // be the earliest representable date and time.\"\n            c.setMaxAge(delta);\n          }\n        }\n        break;\n      case 'domain':\n        // S5.2.3\n        // \"If the attribute-value is empty, the behavior is undefined.  However,\n        // the user agent SHOULD ignore the cookie-av entirely.\"\n        if (av_value) {\n          // S5.2.3 \"Let cookie-domain be the attribute-value without the leading %x2E\n          // (\".\") character.\"\n          const domain = av_value.trim().replace(/^\\./, '');\n          if (domain) {\n            // \"Convert the cookie-domain to lower case.\"\n            c.domain = domain.toLowerCase();\n          }\n        }\n        break;\n      case 'path':\n        // S5.2.4\n        /*\n         * \"If the attribute-value is empty or if the first character of the\n         * attribute-value is not %x2F (\"/\"):\n         *   Let cookie-path be the default-path.\n         * Otherwise:\n         *   Let cookie-path be the attribute-value.\"\n         *\n         * We'll represent the default-path as null since it depends on the\n         * context of the parsing.\n         */\n        c.path = av_value && av_value[0] === '/' ? av_value : null;\n        break;\n      case 'secure':\n        // S5.2.5\n        /*\n         * \"If the attribute-name case-insensitively matches the string \"Secure\",\n         * the user agent MUST append an attribute to the cookie-attribute-list\n         * with an attribute-name of Secure and an empty attribute-value.\"\n         */\n        c.secure = true;\n        break;\n      case 'httponly':\n        // S5.2.6 -- effectively the same as 'secure'\n        c.httpOnly = true;\n        break;\n      case 'samesite':\n        // RFC6265bis-02 S5.3.7\n        switch (av_value ? av_value.toLowerCase() : '') {\n          case 'strict':\n            c.sameSite = 'strict';\n            break;\n          case 'lax':\n            c.sameSite = 'lax';\n            break;\n          case 'none':\n            c.sameSite = 'none';\n            break;\n          default:\n            c.sameSite = undefined;\n            break;\n        }\n        break;\n      default:\n        c.extensions = c.extensions || [];\n        c.extensions.push(av);\n        break;\n    }\n  }\n  return c;\n}\nfunction fromJSON(str) {\n  if (!str || validators.isEmptyString(str)) {\n    return undefined;\n  }\n  let obj;\n  if (typeof str === 'string') {\n    try {\n      obj = JSON.parse(str);\n    } catch {\n      return undefined;\n    }\n  } else {\n    // assume it's an Object\n    obj = str;\n  }\n  const c = new Cookie();\n  Cookie.serializableProperties.forEach(prop => {\n    if (obj && typeof obj === 'object' && (0, utils_1.inOperator)(prop, obj)) {\n      const val = obj[prop];\n      if (val === undefined) {\n        return;\n      }\n      if ((0, utils_1.inOperator)(prop, cookieDefaults) && val === cookieDefaults[prop]) {\n        return;\n      }\n      switch (prop) {\n        case 'key':\n        case 'value':\n        case 'sameSite':\n          if (typeof val === 'string') {\n            c[prop] = val;\n          }\n          break;\n        case 'expires':\n        case 'creation':\n        case 'lastAccessed':\n          if (typeof val === 'number' || typeof val === 'string' || val instanceof Date) {\n            c[prop] = obj[prop] == 'Infinity' ? 'Infinity' : new Date(val);\n          } else if (val === null) {\n            c[prop] = null;\n          }\n          break;\n        case 'maxAge':\n          if (typeof val === 'number' || val === 'Infinity' || val === '-Infinity') {\n            c[prop] = val;\n          }\n          break;\n        case 'domain':\n        case 'path':\n          if (typeof val === 'string' || val === null) {\n            c[prop] = val;\n          }\n          break;\n        case 'secure':\n        case 'httpOnly':\n          if (typeof val === 'boolean') {\n            c[prop] = val;\n          }\n          break;\n        case 'extensions':\n          if (Array.isArray(val) && val.every(item => typeof item === 'string')) {\n            c[prop] = val;\n          }\n          break;\n        case 'hostOnly':\n        case 'pathIsDefault':\n          if (typeof val === 'boolean' || val === null) {\n            c[prop] = val;\n          }\n          break;\n      }\n    }\n  });\n  return c;\n}\nconst cookieDefaults = {\n  // the order in which the RFC has them:\n  key: '',\n  value: '',\n  expires: 'Infinity',\n  maxAge: null,\n  domain: null,\n  path: null,\n  secure: false,\n  httpOnly: false,\n  extensions: null,\n  // set by the CookieJar:\n  hostOnly: null,\n  pathIsDefault: null,\n  creation: null,\n  lastAccessed: null,\n  sameSite: undefined\n};\n/**\n * An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to a user's web browser.\n * It is defined in {@link https://www.rfc-editor.org/rfc/rfc6265.html | RFC6265}.\n * @public\n */\nclass Cookie {\n  /**\n   * Create a new Cookie instance.\n   * @public\n   * @param options - The attributes to set on the cookie\n   */\n  constructor(options = {}) {\n    this.key = options.key ?? cookieDefaults.key;\n    this.value = options.value ?? cookieDefaults.value;\n    this.expires = options.expires ?? cookieDefaults.expires;\n    this.maxAge = options.maxAge ?? cookieDefaults.maxAge;\n    this.domain = options.domain ?? cookieDefaults.domain;\n    this.path = options.path ?? cookieDefaults.path;\n    this.secure = options.secure ?? cookieDefaults.secure;\n    this.httpOnly = options.httpOnly ?? cookieDefaults.httpOnly;\n    this.extensions = options.extensions ?? cookieDefaults.extensions;\n    this.creation = options.creation ?? cookieDefaults.creation;\n    this.hostOnly = options.hostOnly ?? cookieDefaults.hostOnly;\n    this.pathIsDefault = options.pathIsDefault ?? cookieDefaults.pathIsDefault;\n    this.lastAccessed = options.lastAccessed ?? cookieDefaults.lastAccessed;\n    this.sameSite = options.sameSite ?? cookieDefaults.sameSite;\n    this.creation = options.creation ?? new Date();\n    // used to break creation ties in cookieCompare():\n    Object.defineProperty(this, 'creationIndex', {\n      configurable: false,\n      enumerable: false,\n      // important for assert.deepEqual checks\n      writable: true,\n      value: ++Cookie.cookiesCreated\n    });\n    // Duplicate operation, but it makes TypeScript happy...\n    this.creationIndex = Cookie.cookiesCreated;\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    const now = Date.now();\n    const hostOnly = this.hostOnly != null ? this.hostOnly.toString() : '?';\n    const createAge = this.creation && this.creation !== 'Infinity' ? `${String(now - this.creation.getTime())}ms` : '?';\n    const accessAge = this.lastAccessed && this.lastAccessed !== 'Infinity' ? `${String(now - this.lastAccessed.getTime())}ms` : '?';\n    return `Cookie=\"${this.toString()}; hostOnly=${hostOnly}; aAge=${accessAge}; cAge=${createAge}\"`;\n  }\n  /**\n   * For convenience in using `JSON.stringify(cookie)`. Returns a plain-old Object that can be JSON-serialized.\n   *\n   * @remarks\n   * - Any `Date` properties (such as {@link Cookie.expires}, {@link Cookie.creation}, and {@link Cookie.lastAccessed}) are exported in ISO format (`Date.toISOString()`).\n   *\n   *  - Custom Cookie properties are discarded. In tough-cookie 1.x, since there was no {@link Cookie.toJSON} method explicitly defined, all enumerable properties were captured.\n   *      If you want a property to be serialized, add the property name to {@link Cookie.serializableProperties}.\n   */\n  toJSON() {\n    const obj = {};\n    for (const prop of Cookie.serializableProperties) {\n      const val = this[prop];\n      if (val === cookieDefaults[prop]) {\n        continue; // leave as prototype default\n      }\n      switch (prop) {\n        case 'key':\n        case 'value':\n        case 'sameSite':\n          if (typeof val === 'string') {\n            obj[prop] = val;\n          }\n          break;\n        case 'expires':\n        case 'creation':\n        case 'lastAccessed':\n          if (typeof val === 'number' || typeof val === 'string' || val instanceof Date) {\n            obj[prop] = val == 'Infinity' ? 'Infinity' : new Date(val).toISOString();\n          } else if (val === null) {\n            obj[prop] = null;\n          }\n          break;\n        case 'maxAge':\n          if (typeof val === 'number' || val === 'Infinity' || val === '-Infinity') {\n            obj[prop] = val;\n          }\n          break;\n        case 'domain':\n        case 'path':\n          if (typeof val === 'string' || val === null) {\n            obj[prop] = val;\n          }\n          break;\n        case 'secure':\n        case 'httpOnly':\n          if (typeof val === 'boolean') {\n            obj[prop] = val;\n          }\n          break;\n        case 'extensions':\n          if (Array.isArray(val)) {\n            obj[prop] = val;\n          }\n          break;\n        case 'hostOnly':\n        case 'pathIsDefault':\n          if (typeof val === 'boolean' || val === null) {\n            obj[prop] = val;\n          }\n          break;\n      }\n    }\n    return obj;\n  }\n  /**\n   * Does a deep clone of this cookie, implemented exactly as `Cookie.fromJSON(cookie.toJSON())`.\n   * @public\n   */\n  clone() {\n    return fromJSON(this.toJSON());\n  }\n  /**\n   * Validates cookie attributes for semantic correctness. Useful for \"lint\" checking any `Set-Cookie` headers you generate.\n   * For now, it returns a boolean, but eventually could return a reason string.\n   *\n   * @remarks\n   * Works for a few things, but is by no means comprehensive.\n   *\n   * @beta\n   */\n  validate() {\n    if (!this.value || !COOKIE_OCTETS.test(this.value)) {\n      return false;\n    }\n    if (this.expires != 'Infinity' && !(this.expires instanceof Date) && !(0, parseDate_1.parseDate)(this.expires)) {\n      return false;\n    }\n    if (this.maxAge != null && this.maxAge !== 'Infinity' && (this.maxAge === '-Infinity' || this.maxAge <= 0)) {\n      return false; // \"Max-Age=\" non-zero-digit *DIGIT\n    }\n    if (this.path != null && !PATH_VALUE.test(this.path)) {\n      return false;\n    }\n    const cdomain = this.cdomain();\n    if (cdomain) {\n      if (cdomain.match(/\\.$/)) {\n        return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this\n      }\n      const suffix = (0, getPublicSuffix_1.getPublicSuffix)(cdomain);\n      if (suffix == null) {\n        // it's a public suffix\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Sets the 'Expires' attribute on a cookie.\n   *\n   * @remarks\n   * When given a `string` value it will be parsed with {@link parseDate}. If the value can't be parsed as a cookie date\n   * then the 'Expires' attribute will be set to `\"Infinity\"`.\n   *\n   * @param exp - the new value for the 'Expires' attribute of the cookie.\n   */\n  setExpires(exp) {\n    if (exp instanceof Date) {\n      this.expires = exp;\n    } else {\n      this.expires = (0, parseDate_1.parseDate)(exp) || 'Infinity';\n    }\n  }\n  /**\n   * Sets the 'Max-Age' attribute (in seconds) on a cookie.\n   *\n   * @remarks\n   * Coerces `-Infinity` to `\"-Infinity\"` and `Infinity` to `\"Infinity\"` so it can be serialized to JSON.\n   *\n   * @param age - the new value for the 'Max-Age' attribute (in seconds).\n   */\n  setMaxAge(age) {\n    if (age === Infinity) {\n      this.maxAge = 'Infinity';\n    } else if (age === -Infinity) {\n      this.maxAge = '-Infinity';\n    } else {\n      this.maxAge = age;\n    }\n  }\n  /**\n   * Encodes to a `Cookie` header value (specifically, the {@link Cookie.key} and {@link Cookie.value} properties joined with \"=\").\n   * @public\n   */\n  cookieString() {\n    const val = this.value || '';\n    if (this.key) {\n      return `${this.key}=${val}`;\n    }\n    return val;\n  }\n  /**\n   * Encodes to a `Set-Cookie header` value.\n   * @public\n   */\n  toString() {\n    let str = this.cookieString();\n    if (this.expires != 'Infinity') {\n      if (this.expires instanceof Date) {\n        str += `; Expires=${(0, formatDate_1.formatDate)(this.expires)}`;\n      }\n    }\n    if (this.maxAge != null && this.maxAge != Infinity) {\n      str += `; Max-Age=${String(this.maxAge)}`;\n    }\n    if (this.domain && !this.hostOnly) {\n      str += `; Domain=${this.domain}`;\n    }\n    if (this.path) {\n      str += `; Path=${this.path}`;\n    }\n    if (this.secure) {\n      str += '; Secure';\n    }\n    if (this.httpOnly) {\n      str += '; HttpOnly';\n    }\n    if (this.sameSite && this.sameSite !== 'none') {\n      if (this.sameSite.toLowerCase() === Cookie.sameSiteCanonical.lax.toLowerCase()) {\n        str += `; SameSite=${Cookie.sameSiteCanonical.lax}`;\n      } else if (this.sameSite.toLowerCase() === Cookie.sameSiteCanonical.strict.toLowerCase()) {\n        str += `; SameSite=${Cookie.sameSiteCanonical.strict}`;\n      } else {\n        str += `; SameSite=${this.sameSite}`;\n      }\n    }\n    if (this.extensions) {\n      this.extensions.forEach(ext => {\n        str += `; ${ext}`;\n      });\n    }\n    return str;\n  }\n  /**\n   * Computes the TTL relative to now (milliseconds).\n   *\n   * @remarks\n   * - `Infinity` is returned for cookies without an explicit expiry\n   *\n   * - `0` is returned if the cookie is expired.\n   *\n   * - Otherwise a time-to-live in milliseconds is returned.\n   *\n   * @param now - passing an explicit value is mostly used for testing purposes since this defaults to the `Date.now()`\n   * @public\n   */\n  TTL(now = Date.now()) {\n    // TTL() partially replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n    // elsewhere)\n    // S5.3 says to give the \"latest representable date\" for which we use Infinity\n    // For \"expired\" we use 0\n    // -----\n    // RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires\n    // attribute, the Max-Age attribute has precedence and controls the\n    // expiration date of the cookie.\n    // (Concurs with S5.3 step 3)\n    if (this.maxAge != null && typeof this.maxAge === 'number') {\n      return this.maxAge <= 0 ? 0 : this.maxAge * 1000;\n    }\n    const expires = this.expires;\n    if (expires === 'Infinity') {\n      return Infinity;\n    }\n    return (expires?.getTime() ?? now) - (now || Date.now());\n  }\n  /**\n   * Computes the absolute unix-epoch milliseconds that this cookie expires.\n   *\n   * The \"Max-Age\" attribute takes precedence over \"Expires\" (as per the RFC). The {@link Cookie.lastAccessed} attribute\n   * (or the `now` parameter if given) is used to offset the {@link Cookie.maxAge} attribute.\n   *\n   * If Expires ({@link Cookie.expires}) is set, that's returned.\n   *\n   * @param now - can be used to provide a time offset (instead of {@link Cookie.lastAccessed}) to use when calculating the \"Max-Age\" value\n   */\n  expiryTime(now) {\n    // expiryTime() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie() elsewhere)\n    if (this.maxAge != null) {\n      const relativeTo = now || this.lastAccessed || new Date();\n      const maxAge = typeof this.maxAge === 'number' ? this.maxAge : -Infinity;\n      const age = maxAge <= 0 ? -Infinity : maxAge * 1000;\n      if (relativeTo === 'Infinity') {\n        return Infinity;\n      }\n      return relativeTo.getTime() + age;\n    }\n    if (this.expires == 'Infinity') {\n      return Infinity;\n    }\n    return this.expires ? this.expires.getTime() : undefined;\n  }\n  /**\n   * Indicates if the cookie has been persisted to a store or not.\n   * @public\n   */\n  isPersistent() {\n    // This replaces the \"persistent-flag\" parts of S5.3 step 3\n    return this.maxAge != null || this.expires != 'Infinity';\n  }\n  /**\n   * Calls {@link canonicalDomain} with the {@link Cookie.domain} property.\n   * @public\n   */\n  canonicalizedDomain() {\n    // Mostly S5.1.2 and S5.2.3:\n    return (0, canonicalDomain_1.canonicalDomain)(this.domain);\n  }\n  /**\n   * Alias for {@link Cookie.canonicalizedDomain}\n   * @public\n   */\n  cdomain() {\n    return (0, canonicalDomain_1.canonicalDomain)(this.domain);\n  }\n  /**\n   * Parses a string into a Cookie object.\n   *\n   * @remarks\n   * Note: when parsing a `Cookie` header it must be split by ';' before each Cookie string can be parsed.\n   *\n   * @example\n   * ```\n   * // parse a `Set-Cookie` header\n   * const setCookieHeader = 'a=bcd; Expires=Tue, 18 Oct 2011 07:05:03 GMT'\n   * const cookie = Cookie.parse(setCookieHeader)\n   * cookie.key === 'a'\n   * cookie.value === 'bcd'\n   * cookie.expires === new Date(Date.parse('Tue, 18 Oct 2011 07:05:03 GMT'))\n   * ```\n   *\n   * @example\n   * ```\n   * // parse a `Cookie` header\n   * const cookieHeader = 'name=value; name2=value2; name3=value3'\n   * const cookies = cookieHeader.split(';').map(Cookie.parse)\n   * cookies[0].name === 'name'\n   * cookies[0].value === 'value'\n   * cookies[1].name === 'name2'\n   * cookies[1].value === 'value2'\n   * cookies[2].name === 'name3'\n   * cookies[2].value === 'value3'\n   * ```\n   *\n   * @param str - The `Set-Cookie` header or a Cookie string to parse.\n   * @param options - Configures `strict` or `loose` mode for cookie parsing\n   */\n  static parse(str, options) {\n    return parse(str, options);\n  }\n  /**\n   * Does the reverse of {@link Cookie.toJSON}.\n   *\n   * @remarks\n   * Any Date properties (such as .expires, .creation, and .lastAccessed) are parsed via Date.parse, not tough-cookie's parseDate, since ISO timestamps are being handled at this layer.\n   *\n   * @example\n   * ```\n   * const json = JSON.stringify({\n   *   key: 'alpha',\n   *   value: 'beta',\n   *   domain: 'example.com',\n   *   path: '/foo',\n   *   expires: '2038-01-19T03:14:07.000Z',\n   * })\n   * const cookie = Cookie.fromJSON(json)\n   * cookie.key === 'alpha'\n   * cookie.value === 'beta'\n   * cookie.domain === 'example.com'\n   * cookie.path === '/foo'\n   * cookie.expires === new Date(Date.parse('2038-01-19T03:14:07.000Z'))\n   * ```\n   *\n   * @param str - An unparsed JSON string or a value that has already been parsed as JSON\n   */\n  static fromJSON(str) {\n    return fromJSON(str);\n  }\n}\nexports.Cookie = Cookie;\nCookie.cookiesCreated = 0;\n/**\n * @internal\n */\nCookie.sameSiteLevel = {\n  strict: 3,\n  lax: 2,\n  none: 1\n};\n/**\n * @internal\n */\nCookie.sameSiteCanonical = {\n  strict: 'Strict',\n  lax: 'Lax'\n};\n/**\n * Cookie properties that will be serialized when using {@link Cookie.fromJSON} and {@link Cookie.toJSON}.\n * @public\n */\nCookie.serializableProperties = ['key', 'value', 'expires', 'maxAge', 'domain', 'path', 'secure', 'httpOnly', 'extensions', 'hostOnly', 'pathIsDefault', 'creation', 'lastAccessed', 'sameSite'];","map":{"version":3,"names":["require","__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","Cookie","getPublicSuffix_1","validators","utils_1","formatDate_1","parseDate_1","canonicalDomain_1","COOKIE_OCTETS","PATH_VALUE","CONTROL_CHARS","TERMINATORS","trimTerminator","str","isEmptyString","t","length","terminator","terminatorIdx","indexOf","slice","parseCookiePair","cookiePair","looseMode","firstEq","substring","cookieName","cookieValue","trim","test","c","key","parse","options","isString","firstSemi","loose","unparsed","cookie_avs","split","av","shift","av_sep","av_key","av_value","toLowerCase","exp","parseDate","expires","delta","parseInt","setMaxAge","domain","replace","path","secure","httpOnly","sameSite","extensions","push","fromJSON","obj","JSON","serializableProperties","forEach","prop","inOperator","val","cookieDefaults","Date","Array","isArray","every","item","maxAge","hostOnly","pathIsDefault","creation","lastAccessed","constructor","cookiesCreated","creationIndex","Symbol","for","now","toString","createAge","String","getTime","accessAge","toJSON","toISOString","clone","validate","cdomain","match","suffix","getPublicSuffix","setExpires","age","Infinity","cookieString","formatDate","sameSiteCanonical","lax","strict","ext","TTL","expiryTime","relativeTo","isPersistent","canonicalizedDomain","canonicalDomain","sameSiteLevel","none"],"sources":["/Users/feyraf/Desktop/projets/Roma/invest/node_modules/tough-cookie/dist/cookie/cookie.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cookie = void 0;\n/*!\n * Copyright (c) 2015-2020, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nconst getPublicSuffix_1 = require(\"../getPublicSuffix\");\nconst validators = __importStar(require(\"../validators\"));\nconst utils_1 = require(\"../utils\");\nconst formatDate_1 = require(\"./formatDate\");\nconst parseDate_1 = require(\"./parseDate\");\nconst canonicalDomain_1 = require(\"./canonicalDomain\");\n// From RFC6265 S4.1.1\n// note that it excludes \\x3B \";\"\nconst COOKIE_OCTETS = /^[\\x21\\x23-\\x2B\\x2D-\\x3A\\x3C-\\x5B\\x5D-\\x7E]+$/;\n// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or \";\"'\n// Note ';' is \\x3B\nconst PATH_VALUE = /[\\x20-\\x3A\\x3C-\\x7E]+/;\n// eslint-disable-next-line no-control-regex\nconst CONTROL_CHARS = /[\\x00-\\x1F]/;\n// From Chromium // '\\r', '\\n' and '\\0' should be treated as a terminator in\n// the \"relaxed\" mode, see:\n// https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60\nconst TERMINATORS = ['\\n', '\\r', '\\0'];\nfunction trimTerminator(str) {\n    if (validators.isEmptyString(str))\n        return str;\n    for (let t = 0; t < TERMINATORS.length; t++) {\n        const terminator = TERMINATORS[t];\n        const terminatorIdx = terminator ? str.indexOf(terminator) : -1;\n        if (terminatorIdx !== -1) {\n            str = str.slice(0, terminatorIdx);\n        }\n    }\n    return str;\n}\nfunction parseCookiePair(cookiePair, looseMode) {\n    cookiePair = trimTerminator(cookiePair);\n    let firstEq = cookiePair.indexOf('=');\n    if (looseMode) {\n        if (firstEq === 0) {\n            // '=' is immediately at start\n            cookiePair = cookiePair.substring(1);\n            firstEq = cookiePair.indexOf('='); // might still need to split on '='\n        }\n    }\n    else {\n        // non-loose mode\n        if (firstEq <= 0) {\n            // no '=' or is at start\n            return undefined; // needs to have non-empty \"cookie-name\"\n        }\n    }\n    let cookieName, cookieValue;\n    if (firstEq <= 0) {\n        cookieName = '';\n        cookieValue = cookiePair.trim();\n    }\n    else {\n        cookieName = cookiePair.slice(0, firstEq).trim();\n        cookieValue = cookiePair.slice(firstEq + 1).trim();\n    }\n    if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {\n        return undefined;\n    }\n    const c = new Cookie();\n    c.key = cookieName;\n    c.value = cookieValue;\n    return c;\n}\nfunction parse(str, options) {\n    if (validators.isEmptyString(str) || !validators.isString(str)) {\n        return undefined;\n    }\n    str = str.trim();\n    // We use a regex to parse the \"name-value-pair\" part of S5.2\n    const firstSemi = str.indexOf(';'); // S5.2 step 1\n    const cookiePair = firstSemi === -1 ? str : str.slice(0, firstSemi);\n    const c = parseCookiePair(cookiePair, options?.loose ?? false);\n    if (!c) {\n        return undefined;\n    }\n    if (firstSemi === -1) {\n        return c;\n    }\n    // S5.2.3 \"unparsed-attributes consist of the remainder of the set-cookie-string\n    // (including the %x3B (\";\") in question).\" plus later on in the same section\n    // \"discard the first \";\" and trim\".\n    const unparsed = str.slice(firstSemi + 1).trim();\n    // \"If the unparsed-attributes string is empty, skip the rest of these\n    // steps.\"\n    if (unparsed.length === 0) {\n        return c;\n    }\n    /*\n     * S5.2 says that when looping over the items \"[p]rocess the attribute-name\n     * and attribute-value according to the requirements in the following\n     * subsections\" for every item.  Plus, for many of the individual attributes\n     * in S5.3 it says to use the \"attribute-value of the last attribute in the\n     * cookie-attribute-list\".  Therefore, in this implementation, we overwrite\n     * the previous value.\n     */\n    const cookie_avs = unparsed.split(';');\n    while (cookie_avs.length) {\n        const av = (cookie_avs.shift() ?? '').trim();\n        if (av.length === 0) {\n            // happens if \";;\" appears\n            continue;\n        }\n        const av_sep = av.indexOf('=');\n        let av_key, av_value;\n        if (av_sep === -1) {\n            av_key = av;\n            av_value = null;\n        }\n        else {\n            av_key = av.slice(0, av_sep);\n            av_value = av.slice(av_sep + 1);\n        }\n        av_key = av_key.trim().toLowerCase();\n        if (av_value) {\n            av_value = av_value.trim();\n        }\n        switch (av_key) {\n            case 'expires': // S5.2.1\n                if (av_value) {\n                    const exp = (0, parseDate_1.parseDate)(av_value);\n                    // \"If the attribute-value failed to parse as a cookie date, ignore the\n                    // cookie-av.\"\n                    if (exp) {\n                        // over and underflow not realistically a concern: V8's getTime() seems to\n                        // store something larger than a 32-bit time_t (even with 32-bit node)\n                        c.expires = exp;\n                    }\n                }\n                break;\n            case 'max-age': // S5.2.2\n                if (av_value) {\n                    // \"If the first character of the attribute-value is not a DIGIT or a \"-\"\n                    // character ...[or]... If the remainder of attribute-value contains a\n                    // non-DIGIT character, ignore the cookie-av.\"\n                    if (/^-?[0-9]+$/.test(av_value)) {\n                        const delta = parseInt(av_value, 10);\n                        // \"If delta-seconds is less than or equal to zero (0), let expiry-time\n                        // be the earliest representable date and time.\"\n                        c.setMaxAge(delta);\n                    }\n                }\n                break;\n            case 'domain': // S5.2.3\n                // \"If the attribute-value is empty, the behavior is undefined.  However,\n                // the user agent SHOULD ignore the cookie-av entirely.\"\n                if (av_value) {\n                    // S5.2.3 \"Let cookie-domain be the attribute-value without the leading %x2E\n                    // (\".\") character.\"\n                    const domain = av_value.trim().replace(/^\\./, '');\n                    if (domain) {\n                        // \"Convert the cookie-domain to lower case.\"\n                        c.domain = domain.toLowerCase();\n                    }\n                }\n                break;\n            case 'path': // S5.2.4\n                /*\n                 * \"If the attribute-value is empty or if the first character of the\n                 * attribute-value is not %x2F (\"/\"):\n                 *   Let cookie-path be the default-path.\n                 * Otherwise:\n                 *   Let cookie-path be the attribute-value.\"\n                 *\n                 * We'll represent the default-path as null since it depends on the\n                 * context of the parsing.\n                 */\n                c.path = av_value && av_value[0] === '/' ? av_value : null;\n                break;\n            case 'secure': // S5.2.5\n                /*\n                 * \"If the attribute-name case-insensitively matches the string \"Secure\",\n                 * the user agent MUST append an attribute to the cookie-attribute-list\n                 * with an attribute-name of Secure and an empty attribute-value.\"\n                 */\n                c.secure = true;\n                break;\n            case 'httponly': // S5.2.6 -- effectively the same as 'secure'\n                c.httpOnly = true;\n                break;\n            case 'samesite': // RFC6265bis-02 S5.3.7\n                switch (av_value ? av_value.toLowerCase() : '') {\n                    case 'strict':\n                        c.sameSite = 'strict';\n                        break;\n                    case 'lax':\n                        c.sameSite = 'lax';\n                        break;\n                    case 'none':\n                        c.sameSite = 'none';\n                        break;\n                    default:\n                        c.sameSite = undefined;\n                        break;\n                }\n                break;\n            default:\n                c.extensions = c.extensions || [];\n                c.extensions.push(av);\n                break;\n        }\n    }\n    return c;\n}\nfunction fromJSON(str) {\n    if (!str || validators.isEmptyString(str)) {\n        return undefined;\n    }\n    let obj;\n    if (typeof str === 'string') {\n        try {\n            obj = JSON.parse(str);\n        }\n        catch {\n            return undefined;\n        }\n    }\n    else {\n        // assume it's an Object\n        obj = str;\n    }\n    const c = new Cookie();\n    Cookie.serializableProperties.forEach((prop) => {\n        if (obj && typeof obj === 'object' && (0, utils_1.inOperator)(prop, obj)) {\n            const val = obj[prop];\n            if (val === undefined) {\n                return;\n            }\n            if ((0, utils_1.inOperator)(prop, cookieDefaults) && val === cookieDefaults[prop]) {\n                return;\n            }\n            switch (prop) {\n                case 'key':\n                case 'value':\n                case 'sameSite':\n                    if (typeof val === 'string') {\n                        c[prop] = val;\n                    }\n                    break;\n                case 'expires':\n                case 'creation':\n                case 'lastAccessed':\n                    if (typeof val === 'number' ||\n                        typeof val === 'string' ||\n                        val instanceof Date) {\n                        c[prop] = obj[prop] == 'Infinity' ? 'Infinity' : new Date(val);\n                    }\n                    else if (val === null) {\n                        c[prop] = null;\n                    }\n                    break;\n                case 'maxAge':\n                    if (typeof val === 'number' ||\n                        val === 'Infinity' ||\n                        val === '-Infinity') {\n                        c[prop] = val;\n                    }\n                    break;\n                case 'domain':\n                case 'path':\n                    if (typeof val === 'string' || val === null) {\n                        c[prop] = val;\n                    }\n                    break;\n                case 'secure':\n                case 'httpOnly':\n                    if (typeof val === 'boolean') {\n                        c[prop] = val;\n                    }\n                    break;\n                case 'extensions':\n                    if (Array.isArray(val) &&\n                        val.every((item) => typeof item === 'string')) {\n                        c[prop] = val;\n                    }\n                    break;\n                case 'hostOnly':\n                case 'pathIsDefault':\n                    if (typeof val === 'boolean' || val === null) {\n                        c[prop] = val;\n                    }\n                    break;\n            }\n        }\n    });\n    return c;\n}\nconst cookieDefaults = {\n    // the order in which the RFC has them:\n    key: '',\n    value: '',\n    expires: 'Infinity',\n    maxAge: null,\n    domain: null,\n    path: null,\n    secure: false,\n    httpOnly: false,\n    extensions: null,\n    // set by the CookieJar:\n    hostOnly: null,\n    pathIsDefault: null,\n    creation: null,\n    lastAccessed: null,\n    sameSite: undefined,\n};\n/**\n * An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to a user's web browser.\n * It is defined in {@link https://www.rfc-editor.org/rfc/rfc6265.html | RFC6265}.\n * @public\n */\nclass Cookie {\n    /**\n     * Create a new Cookie instance.\n     * @public\n     * @param options - The attributes to set on the cookie\n     */\n    constructor(options = {}) {\n        this.key = options.key ?? cookieDefaults.key;\n        this.value = options.value ?? cookieDefaults.value;\n        this.expires = options.expires ?? cookieDefaults.expires;\n        this.maxAge = options.maxAge ?? cookieDefaults.maxAge;\n        this.domain = options.domain ?? cookieDefaults.domain;\n        this.path = options.path ?? cookieDefaults.path;\n        this.secure = options.secure ?? cookieDefaults.secure;\n        this.httpOnly = options.httpOnly ?? cookieDefaults.httpOnly;\n        this.extensions = options.extensions ?? cookieDefaults.extensions;\n        this.creation = options.creation ?? cookieDefaults.creation;\n        this.hostOnly = options.hostOnly ?? cookieDefaults.hostOnly;\n        this.pathIsDefault = options.pathIsDefault ?? cookieDefaults.pathIsDefault;\n        this.lastAccessed = options.lastAccessed ?? cookieDefaults.lastAccessed;\n        this.sameSite = options.sameSite ?? cookieDefaults.sameSite;\n        this.creation = options.creation ?? new Date();\n        // used to break creation ties in cookieCompare():\n        Object.defineProperty(this, 'creationIndex', {\n            configurable: false,\n            enumerable: false, // important for assert.deepEqual checks\n            writable: true,\n            value: ++Cookie.cookiesCreated,\n        });\n        // Duplicate operation, but it makes TypeScript happy...\n        this.creationIndex = Cookie.cookiesCreated;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        const now = Date.now();\n        const hostOnly = this.hostOnly != null ? this.hostOnly.toString() : '?';\n        const createAge = this.creation && this.creation !== 'Infinity'\n            ? `${String(now - this.creation.getTime())}ms`\n            : '?';\n        const accessAge = this.lastAccessed && this.lastAccessed !== 'Infinity'\n            ? `${String(now - this.lastAccessed.getTime())}ms`\n            : '?';\n        return `Cookie=\"${this.toString()}; hostOnly=${hostOnly}; aAge=${accessAge}; cAge=${createAge}\"`;\n    }\n    /**\n     * For convenience in using `JSON.stringify(cookie)`. Returns a plain-old Object that can be JSON-serialized.\n     *\n     * @remarks\n     * - Any `Date` properties (such as {@link Cookie.expires}, {@link Cookie.creation}, and {@link Cookie.lastAccessed}) are exported in ISO format (`Date.toISOString()`).\n     *\n     *  - Custom Cookie properties are discarded. In tough-cookie 1.x, since there was no {@link Cookie.toJSON} method explicitly defined, all enumerable properties were captured.\n     *      If you want a property to be serialized, add the property name to {@link Cookie.serializableProperties}.\n     */\n    toJSON() {\n        const obj = {};\n        for (const prop of Cookie.serializableProperties) {\n            const val = this[prop];\n            if (val === cookieDefaults[prop]) {\n                continue; // leave as prototype default\n            }\n            switch (prop) {\n                case 'key':\n                case 'value':\n                case 'sameSite':\n                    if (typeof val === 'string') {\n                        obj[prop] = val;\n                    }\n                    break;\n                case 'expires':\n                case 'creation':\n                case 'lastAccessed':\n                    if (typeof val === 'number' ||\n                        typeof val === 'string' ||\n                        val instanceof Date) {\n                        obj[prop] =\n                            val == 'Infinity' ? 'Infinity' : new Date(val).toISOString();\n                    }\n                    else if (val === null) {\n                        obj[prop] = null;\n                    }\n                    break;\n                case 'maxAge':\n                    if (typeof val === 'number' ||\n                        val === 'Infinity' ||\n                        val === '-Infinity') {\n                        obj[prop] = val;\n                    }\n                    break;\n                case 'domain':\n                case 'path':\n                    if (typeof val === 'string' || val === null) {\n                        obj[prop] = val;\n                    }\n                    break;\n                case 'secure':\n                case 'httpOnly':\n                    if (typeof val === 'boolean') {\n                        obj[prop] = val;\n                    }\n                    break;\n                case 'extensions':\n                    if (Array.isArray(val)) {\n                        obj[prop] = val;\n                    }\n                    break;\n                case 'hostOnly':\n                case 'pathIsDefault':\n                    if (typeof val === 'boolean' || val === null) {\n                        obj[prop] = val;\n                    }\n                    break;\n            }\n        }\n        return obj;\n    }\n    /**\n     * Does a deep clone of this cookie, implemented exactly as `Cookie.fromJSON(cookie.toJSON())`.\n     * @public\n     */\n    clone() {\n        return fromJSON(this.toJSON());\n    }\n    /**\n     * Validates cookie attributes for semantic correctness. Useful for \"lint\" checking any `Set-Cookie` headers you generate.\n     * For now, it returns a boolean, but eventually could return a reason string.\n     *\n     * @remarks\n     * Works for a few things, but is by no means comprehensive.\n     *\n     * @beta\n     */\n    validate() {\n        if (!this.value || !COOKIE_OCTETS.test(this.value)) {\n            return false;\n        }\n        if (this.expires != 'Infinity' &&\n            !(this.expires instanceof Date) &&\n            !(0, parseDate_1.parseDate)(this.expires)) {\n            return false;\n        }\n        if (this.maxAge != null &&\n            this.maxAge !== 'Infinity' &&\n            (this.maxAge === '-Infinity' || this.maxAge <= 0)) {\n            return false; // \"Max-Age=\" non-zero-digit *DIGIT\n        }\n        if (this.path != null && !PATH_VALUE.test(this.path)) {\n            return false;\n        }\n        const cdomain = this.cdomain();\n        if (cdomain) {\n            if (cdomain.match(/\\.$/)) {\n                return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this\n            }\n            const suffix = (0, getPublicSuffix_1.getPublicSuffix)(cdomain);\n            if (suffix == null) {\n                // it's a public suffix\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Sets the 'Expires' attribute on a cookie.\n     *\n     * @remarks\n     * When given a `string` value it will be parsed with {@link parseDate}. If the value can't be parsed as a cookie date\n     * then the 'Expires' attribute will be set to `\"Infinity\"`.\n     *\n     * @param exp - the new value for the 'Expires' attribute of the cookie.\n     */\n    setExpires(exp) {\n        if (exp instanceof Date) {\n            this.expires = exp;\n        }\n        else {\n            this.expires = (0, parseDate_1.parseDate)(exp) || 'Infinity';\n        }\n    }\n    /**\n     * Sets the 'Max-Age' attribute (in seconds) on a cookie.\n     *\n     * @remarks\n     * Coerces `-Infinity` to `\"-Infinity\"` and `Infinity` to `\"Infinity\"` so it can be serialized to JSON.\n     *\n     * @param age - the new value for the 'Max-Age' attribute (in seconds).\n     */\n    setMaxAge(age) {\n        if (age === Infinity) {\n            this.maxAge = 'Infinity';\n        }\n        else if (age === -Infinity) {\n            this.maxAge = '-Infinity';\n        }\n        else {\n            this.maxAge = age;\n        }\n    }\n    /**\n     * Encodes to a `Cookie` header value (specifically, the {@link Cookie.key} and {@link Cookie.value} properties joined with \"=\").\n     * @public\n     */\n    cookieString() {\n        const val = this.value || '';\n        if (this.key) {\n            return `${this.key}=${val}`;\n        }\n        return val;\n    }\n    /**\n     * Encodes to a `Set-Cookie header` value.\n     * @public\n     */\n    toString() {\n        let str = this.cookieString();\n        if (this.expires != 'Infinity') {\n            if (this.expires instanceof Date) {\n                str += `; Expires=${(0, formatDate_1.formatDate)(this.expires)}`;\n            }\n        }\n        if (this.maxAge != null && this.maxAge != Infinity) {\n            str += `; Max-Age=${String(this.maxAge)}`;\n        }\n        if (this.domain && !this.hostOnly) {\n            str += `; Domain=${this.domain}`;\n        }\n        if (this.path) {\n            str += `; Path=${this.path}`;\n        }\n        if (this.secure) {\n            str += '; Secure';\n        }\n        if (this.httpOnly) {\n            str += '; HttpOnly';\n        }\n        if (this.sameSite && this.sameSite !== 'none') {\n            if (this.sameSite.toLowerCase() ===\n                Cookie.sameSiteCanonical.lax.toLowerCase()) {\n                str += `; SameSite=${Cookie.sameSiteCanonical.lax}`;\n            }\n            else if (this.sameSite.toLowerCase() ===\n                Cookie.sameSiteCanonical.strict.toLowerCase()) {\n                str += `; SameSite=${Cookie.sameSiteCanonical.strict}`;\n            }\n            else {\n                str += `; SameSite=${this.sameSite}`;\n            }\n        }\n        if (this.extensions) {\n            this.extensions.forEach((ext) => {\n                str += `; ${ext}`;\n            });\n        }\n        return str;\n    }\n    /**\n     * Computes the TTL relative to now (milliseconds).\n     *\n     * @remarks\n     * - `Infinity` is returned for cookies without an explicit expiry\n     *\n     * - `0` is returned if the cookie is expired.\n     *\n     * - Otherwise a time-to-live in milliseconds is returned.\n     *\n     * @param now - passing an explicit value is mostly used for testing purposes since this defaults to the `Date.now()`\n     * @public\n     */\n    TTL(now = Date.now()) {\n        // TTL() partially replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n        // elsewhere)\n        // S5.3 says to give the \"latest representable date\" for which we use Infinity\n        // For \"expired\" we use 0\n        // -----\n        // RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires\n        // attribute, the Max-Age attribute has precedence and controls the\n        // expiration date of the cookie.\n        // (Concurs with S5.3 step 3)\n        if (this.maxAge != null && typeof this.maxAge === 'number') {\n            return this.maxAge <= 0 ? 0 : this.maxAge * 1000;\n        }\n        const expires = this.expires;\n        if (expires === 'Infinity') {\n            return Infinity;\n        }\n        return (expires?.getTime() ?? now) - (now || Date.now());\n    }\n    /**\n     * Computes the absolute unix-epoch milliseconds that this cookie expires.\n     *\n     * The \"Max-Age\" attribute takes precedence over \"Expires\" (as per the RFC). The {@link Cookie.lastAccessed} attribute\n     * (or the `now` parameter if given) is used to offset the {@link Cookie.maxAge} attribute.\n     *\n     * If Expires ({@link Cookie.expires}) is set, that's returned.\n     *\n     * @param now - can be used to provide a time offset (instead of {@link Cookie.lastAccessed}) to use when calculating the \"Max-Age\" value\n     */\n    expiryTime(now) {\n        // expiryTime() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie() elsewhere)\n        if (this.maxAge != null) {\n            const relativeTo = now || this.lastAccessed || new Date();\n            const maxAge = typeof this.maxAge === 'number' ? this.maxAge : -Infinity;\n            const age = maxAge <= 0 ? -Infinity : maxAge * 1000;\n            if (relativeTo === 'Infinity') {\n                return Infinity;\n            }\n            return relativeTo.getTime() + age;\n        }\n        if (this.expires == 'Infinity') {\n            return Infinity;\n        }\n        return this.expires ? this.expires.getTime() : undefined;\n    }\n    /**\n     * Indicates if the cookie has been persisted to a store or not.\n     * @public\n     */\n    isPersistent() {\n        // This replaces the \"persistent-flag\" parts of S5.3 step 3\n        return this.maxAge != null || this.expires != 'Infinity';\n    }\n    /**\n     * Calls {@link canonicalDomain} with the {@link Cookie.domain} property.\n     * @public\n     */\n    canonicalizedDomain() {\n        // Mostly S5.1.2 and S5.2.3:\n        return (0, canonicalDomain_1.canonicalDomain)(this.domain);\n    }\n    /**\n     * Alias for {@link Cookie.canonicalizedDomain}\n     * @public\n     */\n    cdomain() {\n        return (0, canonicalDomain_1.canonicalDomain)(this.domain);\n    }\n    /**\n     * Parses a string into a Cookie object.\n     *\n     * @remarks\n     * Note: when parsing a `Cookie` header it must be split by ';' before each Cookie string can be parsed.\n     *\n     * @example\n     * ```\n     * // parse a `Set-Cookie` header\n     * const setCookieHeader = 'a=bcd; Expires=Tue, 18 Oct 2011 07:05:03 GMT'\n     * const cookie = Cookie.parse(setCookieHeader)\n     * cookie.key === 'a'\n     * cookie.value === 'bcd'\n     * cookie.expires === new Date(Date.parse('Tue, 18 Oct 2011 07:05:03 GMT'))\n     * ```\n     *\n     * @example\n     * ```\n     * // parse a `Cookie` header\n     * const cookieHeader = 'name=value; name2=value2; name3=value3'\n     * const cookies = cookieHeader.split(';').map(Cookie.parse)\n     * cookies[0].name === 'name'\n     * cookies[0].value === 'value'\n     * cookies[1].name === 'name2'\n     * cookies[1].value === 'value2'\n     * cookies[2].name === 'name3'\n     * cookies[2].value === 'value3'\n     * ```\n     *\n     * @param str - The `Set-Cookie` header or a Cookie string to parse.\n     * @param options - Configures `strict` or `loose` mode for cookie parsing\n     */\n    static parse(str, options) {\n        return parse(str, options);\n    }\n    /**\n     * Does the reverse of {@link Cookie.toJSON}.\n     *\n     * @remarks\n     * Any Date properties (such as .expires, .creation, and .lastAccessed) are parsed via Date.parse, not tough-cookie's parseDate, since ISO timestamps are being handled at this layer.\n     *\n     * @example\n     * ```\n     * const json = JSON.stringify({\n     *   key: 'alpha',\n     *   value: 'beta',\n     *   domain: 'example.com',\n     *   path: '/foo',\n     *   expires: '2038-01-19T03:14:07.000Z',\n     * })\n     * const cookie = Cookie.fromJSON(json)\n     * cookie.key === 'alpha'\n     * cookie.value === 'beta'\n     * cookie.domain === 'example.com'\n     * cookie.path === '/foo'\n     * cookie.expires === new Date(Date.parse('2038-01-19T03:14:07.000Z'))\n     * ```\n     *\n     * @param str - An unparsed JSON string or a value that has already been parsed as JSON\n     */\n    static fromJSON(str) {\n        return fromJSON(str);\n    }\n}\nexports.Cookie = Cookie;\nCookie.cookiesCreated = 0;\n/**\n * @internal\n */\nCookie.sameSiteLevel = {\n    strict: 3,\n    lax: 2,\n    none: 1,\n};\n/**\n * @internal\n */\nCookie.sameSiteCanonical = {\n    strict: 'Strict',\n    lax: 'Lax',\n};\n/**\n * Cookie properties that will be serialized when using {@link Cookie.fromJSON} and {@link Cookie.toJSON}.\n * @public\n */\nCookie.serializableProperties = [\n    'key',\n    'value',\n    'expires',\n    'maxAge',\n    'domain',\n    'path',\n    'secure',\n    'httpOnly',\n    'extensions',\n    'hostOnly',\n    'pathIsDefault',\n    'creation',\n    'lastAccessed',\n    'sameSite',\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}