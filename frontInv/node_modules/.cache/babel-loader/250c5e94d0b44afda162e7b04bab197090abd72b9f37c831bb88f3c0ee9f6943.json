{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.set.difference.v2.js\");\nrequire(\"core-js/modules/es.set.intersection.v2.js\");\nrequire(\"core-js/modules/es.set.is-disjoint-from.v2.js\");\nrequire(\"core-js/modules/es.set.is-subset-of.v2.js\");\nrequire(\"core-js/modules/es.set.is-superset-of.v2.js\");\nrequire(\"core-js/modules/es.set.symmetric-difference.v2.js\");\nrequire(\"core-js/modules/es.set.union.v2.js\");\nrequire(\"core-js/modules/esnext.iterator.constructor.js\");\nrequire(\"core-js/modules/esnext.iterator.map.js\");\nrequire(\"core-js/modules/esnext.iterator.some.js\");\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst HTMLFormElement = require(\"./HTMLFormElement.js\");\nconst HTMLElement = require(\"./HTMLElement.js\");\nconst Blob = require(\"./Blob.js\");\nconst Function = require(\"./Function.js\");\nconst newObjectInRealm = utils.newObjectInRealm;\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"FormData\";\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, {\n  context = \"The provided value\"\n} = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'FormData'.`);\n};\nexports.createDefaultIterator = (globalObject, target, kind) => {\n  const ctorRegistry = globalObject[ctorRegistrySymbol];\n  const iteratorPrototype = ctorRegistry[\"FormData Iterator\"];\n  const iterator = Object.create(iteratorPrototype);\n  Object.defineProperty(iterator, utils.iterInternalSymbol, {\n    value: {\n      target,\n      kind,\n      index: 0\n    },\n    configurable: true\n  });\n  return iterator;\n};\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"FormData\"].prototype;\n  }\n  return Object.create(proto);\n}\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\nexports._internalSetup = (wrapper, globalObject) => {};\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\nconst exposed = new Set([\"Window\", \"Worker\"]);\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class FormData {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          curArg = HTMLFormElement.convert(globalObject, curArg, {\n            context: \"Failed to construct 'FormData': parameter 1\"\n          });\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          if (curArg === null || curArg === undefined) {\n            curArg = null;\n          } else {\n            curArg = HTMLElement.convert(globalObject, curArg, {\n              context: \"Failed to construct 'FormData': parameter 2\"\n            });\n          }\n        } else {\n          curArg = null;\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n    append(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'append' called on an object that is not a valid instance of FormData.\");\n      }\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(`Failed to execute 'append' on 'FormData': 2 arguments required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      switch (arguments.length) {\n        case 2:\n          {\n            let curArg = arguments[0];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 1\",\n              globals: globalObject\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[1];\n            if (Blob.is(curArg)) {\n              {\n                let curArg = arguments[1];\n                curArg = Blob.convert(globalObject, curArg, {\n                  context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n                });\n                args.push(curArg);\n              }\n            } else {\n              {\n                let curArg = arguments[1];\n                curArg = conversions[\"USVString\"](curArg, {\n                  context: \"Failed to execute 'append' on 'FormData': parameter 2\",\n                  globals: globalObject\n                });\n                args.push(curArg);\n              }\n            }\n          }\n          break;\n        default:\n          {\n            let curArg = arguments[0];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 1\",\n              globals: globalObject\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[1];\n            curArg = Blob.convert(globalObject, curArg, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[2];\n            if (curArg !== undefined) {\n              curArg = conversions[\"USVString\"](curArg, {\n                context: \"Failed to execute 'append' on 'FormData': parameter 3\",\n                globals: globalObject\n              });\n            }\n            args.push(curArg);\n          }\n      }\n      return esValue[implSymbol].append(...args);\n    }\n    delete(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'delete' called on an object that is not a valid instance of FormData.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(`Failed to execute 'delete' on 'FormData': 1 argument required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'delete' on 'FormData': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].delete(...args);\n    }\n    get(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of FormData.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(`Failed to execute 'get' on 'FormData': 1 argument required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'get' on 'FormData': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].get(...args));\n    }\n    getAll(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'getAll' called on an object that is not a valid instance of FormData.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(`Failed to execute 'getAll' on 'FormData': 1 argument required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'getAll' on 'FormData': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].getAll(...args));\n    }\n    has(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of FormData.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(`Failed to execute 'has' on 'FormData': 1 argument required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'has' on 'FormData': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].has(...args);\n    }\n    set(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of FormData.\");\n      }\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(`Failed to execute 'set' on 'FormData': 2 arguments required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      switch (arguments.length) {\n        case 2:\n          {\n            let curArg = arguments[0];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 1\",\n              globals: globalObject\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[1];\n            if (Blob.is(curArg)) {\n              {\n                let curArg = arguments[1];\n                curArg = Blob.convert(globalObject, curArg, {\n                  context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n                });\n                args.push(curArg);\n              }\n            } else {\n              {\n                let curArg = arguments[1];\n                curArg = conversions[\"USVString\"](curArg, {\n                  context: \"Failed to execute 'set' on 'FormData': parameter 2\",\n                  globals: globalObject\n                });\n                args.push(curArg);\n              }\n            }\n          }\n          break;\n        default:\n          {\n            let curArg = arguments[0];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 1\",\n              globals: globalObject\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[1];\n            curArg = Blob.convert(globalObject, curArg, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[2];\n            if (curArg !== undefined) {\n              curArg = conversions[\"USVString\"](curArg, {\n                context: \"Failed to execute 'set' on 'FormData': parameter 3\",\n                globals: globalObject\n              });\n            }\n            args.push(curArg);\n          }\n      }\n      return esValue[implSymbol].set(...args);\n    }\n    keys() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of FormData.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key\");\n    }\n    values() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'values' called on an object that is not a valid instance of FormData.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"value\");\n    }\n    entries() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'entries' called on an object that is not a valid instance of FormData.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key+value\");\n    }\n    forEach(callback) {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'forEach' called on an object that is not a valid instance of FormData.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\");\n      }\n      callback = Function.convert(globalObject, callback, {\n        context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n      });\n      const thisArg = arguments[1];\n      let pairs = Array.from(this[implSymbol]);\n      let i = 0;\n      while (i < pairs.length) {\n        const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n        callback.call(thisArg, value, key, this);\n        pairs = Array.from(this[implSymbol]);\n        i++;\n      }\n    }\n  }\n  Object.defineProperties(FormData.prototype, {\n    append: {\n      enumerable: true\n    },\n    delete: {\n      enumerable: true\n    },\n    get: {\n      enumerable: true\n    },\n    getAll: {\n      enumerable: true\n    },\n    has: {\n      enumerable: true\n    },\n    set: {\n      enumerable: true\n    },\n    keys: {\n      enumerable: true\n    },\n    values: {\n      enumerable: true\n    },\n    entries: {\n      enumerable: true\n    },\n    forEach: {\n      enumerable: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"FormData\",\n      configurable: true\n    },\n    [Symbol.iterator]: {\n      value: FormData.prototype.entries,\n      configurable: true,\n      writable: true\n    }\n  });\n  ctorRegistry[interfaceName] = FormData;\n  ctorRegistry[\"FormData Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], {\n    [Symbol.toStringTag]: {\n      configurable: true,\n      value: \"FormData Iterator\"\n    }\n  });\n  utils.define(ctorRegistry[\"FormData Iterator\"], {\n    next() {\n      const internal = this && this[utils.iterInternalSymbol];\n      if (!internal) {\n        throw new globalObject.TypeError(\"next() called on a value that is not a FormData iterator object\");\n      }\n      const {\n        target,\n        kind,\n        index\n      } = internal;\n      const values = Array.from(target[implSymbol]);\n      const len = values.length;\n      if (index >= len) {\n        return newObjectInRealm(globalObject, {\n          value: undefined,\n          done: true\n        });\n      }\n      const pair = values[index];\n      internal.index = index + 1;\n      return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n    }\n  });\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: FormData\n  });\n};\nconst Impl = require(\"../xhr/FormData-impl.js\");","map":{"version":3,"names":["require","conversions","utils","HTMLFormElement","HTMLElement","Blob","Function","newObjectInRealm","implSymbol","ctorRegistrySymbol","interfaceName","exports","is","value","isObject","hasOwn","Impl","implementation","isImpl","convert","globalObject","context","implForWrapper","TypeError","createDefaultIterator","target","kind","ctorRegistry","iteratorPrototype","iterator","Object","create","defineProperty","iterInternalSymbol","index","configurable","makeWrapper","newTarget","proto","undefined","prototype","constructorArgs","privateData","wrapper","setup","createImpl","_internalSetup","wrapperSymbol","init","new","exposed","Set","install","globalNames","some","globalName","has","initCtorRegistry","FormData","constructor","args","curArg","arguments","push","append","name","esValue","length","globals","delete","get","tryWrapperForImpl","getAll","set","keys","values","entries","forEach","callback","thisArg","pairs","Array","from","i","key","map","call","defineProperties","enumerable","Symbol","toStringTag","writable","define","next","internal","len","done","pair","iteratorResult"],"sources":["/Users/feyraf/Desktop/projets/Roma/invest/node_modules/jsdom/lib/jsdom/living/generated/FormData.js"],"sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst HTMLFormElement = require(\"./HTMLFormElement.js\");\nconst HTMLElement = require(\"./HTMLElement.js\");\nconst Blob = require(\"./Blob.js\");\nconst Function = require(\"./Function.js\");\nconst newObjectInRealm = utils.newObjectInRealm;\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"FormData\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'FormData'.`);\n};\n\nexports.createDefaultIterator = (globalObject, target, kind) => {\n  const ctorRegistry = globalObject[ctorRegistrySymbol];\n  const iteratorPrototype = ctorRegistry[\"FormData Iterator\"];\n  const iterator = Object.create(iteratorPrototype);\n  Object.defineProperty(iterator, utils.iterInternalSymbol, {\n    value: { target, kind, index: 0 },\n    configurable: true\n  });\n  return iterator;\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"FormData\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class FormData {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          curArg = HTMLFormElement.convert(globalObject, curArg, {\n            context: \"Failed to construct 'FormData': parameter 1\"\n          });\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          if (curArg === null || curArg === undefined) {\n            curArg = null;\n          } else {\n            curArg = HTMLElement.convert(globalObject, curArg, {\n              context: \"Failed to construct 'FormData': parameter 2\"\n            });\n          }\n        } else {\n          curArg = null;\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    append(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'append' called on an object that is not a valid instance of FormData.\");\n      }\n\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'append' on 'FormData': 2 arguments required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      switch (arguments.length) {\n        case 2:\n          {\n            let curArg = arguments[0];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 1\",\n              globals: globalObject\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[1];\n            if (Blob.is(curArg)) {\n              {\n                let curArg = arguments[1];\n                curArg = Blob.convert(globalObject, curArg, {\n                  context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n                });\n                args.push(curArg);\n              }\n            } else {\n              {\n                let curArg = arguments[1];\n                curArg = conversions[\"USVString\"](curArg, {\n                  context: \"Failed to execute 'append' on 'FormData': parameter 2\",\n                  globals: globalObject\n                });\n                args.push(curArg);\n              }\n            }\n          }\n          break;\n        default:\n          {\n            let curArg = arguments[0];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 1\",\n              globals: globalObject\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[1];\n            curArg = Blob.convert(globalObject, curArg, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[2];\n            if (curArg !== undefined) {\n              curArg = conversions[\"USVString\"](curArg, {\n                context: \"Failed to execute 'append' on 'FormData': parameter 3\",\n                globals: globalObject\n              });\n            }\n            args.push(curArg);\n          }\n      }\n      return esValue[implSymbol].append(...args);\n    }\n\n    delete(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'delete' called on an object that is not a valid instance of FormData.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'delete' on 'FormData': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'delete' on 'FormData': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].delete(...args);\n    }\n\n    get(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of FormData.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'get' on 'FormData': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'get' on 'FormData': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].get(...args));\n    }\n\n    getAll(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'getAll' called on an object that is not a valid instance of FormData.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'getAll' on 'FormData': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'getAll' on 'FormData': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].getAll(...args));\n    }\n\n    has(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of FormData.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'has' on 'FormData': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'has' on 'FormData': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].has(...args);\n    }\n\n    set(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of FormData.\");\n      }\n\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'set' on 'FormData': 2 arguments required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      switch (arguments.length) {\n        case 2:\n          {\n            let curArg = arguments[0];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 1\",\n              globals: globalObject\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[1];\n            if (Blob.is(curArg)) {\n              {\n                let curArg = arguments[1];\n                curArg = Blob.convert(globalObject, curArg, {\n                  context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n                });\n                args.push(curArg);\n              }\n            } else {\n              {\n                let curArg = arguments[1];\n                curArg = conversions[\"USVString\"](curArg, {\n                  context: \"Failed to execute 'set' on 'FormData': parameter 2\",\n                  globals: globalObject\n                });\n                args.push(curArg);\n              }\n            }\n          }\n          break;\n        default:\n          {\n            let curArg = arguments[0];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 1\",\n              globals: globalObject\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[1];\n            curArg = Blob.convert(globalObject, curArg, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n            });\n            args.push(curArg);\n          }\n          {\n            let curArg = arguments[2];\n            if (curArg !== undefined) {\n              curArg = conversions[\"USVString\"](curArg, {\n                context: \"Failed to execute 'set' on 'FormData': parameter 3\",\n                globals: globalObject\n              });\n            }\n            args.push(curArg);\n          }\n      }\n      return esValue[implSymbol].set(...args);\n    }\n\n    keys() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of FormData.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key\");\n    }\n\n    values() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'values' called on an object that is not a valid instance of FormData.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"value\");\n    }\n\n    entries() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'entries' called on an object that is not a valid instance of FormData.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key+value\");\n    }\n\n    forEach(callback) {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'forEach' called on an object that is not a valid instance of FormData.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          \"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\"\n        );\n      }\n      callback = Function.convert(globalObject, callback, {\n        context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n      });\n      const thisArg = arguments[1];\n      let pairs = Array.from(this[implSymbol]);\n      let i = 0;\n      while (i < pairs.length) {\n        const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n        callback.call(thisArg, value, key, this);\n        pairs = Array.from(this[implSymbol]);\n        i++;\n      }\n    }\n  }\n  Object.defineProperties(FormData.prototype, {\n    append: { enumerable: true },\n    delete: { enumerable: true },\n    get: { enumerable: true },\n    getAll: { enumerable: true },\n    has: { enumerable: true },\n    set: { enumerable: true },\n    keys: { enumerable: true },\n    values: { enumerable: true },\n    entries: { enumerable: true },\n    forEach: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"FormData\", configurable: true },\n    [Symbol.iterator]: { value: FormData.prototype.entries, configurable: true, writable: true }\n  });\n  ctorRegistry[interfaceName] = FormData;\n\n  ctorRegistry[\"FormData Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], {\n    [Symbol.toStringTag]: {\n      configurable: true,\n      value: \"FormData Iterator\"\n    }\n  });\n  utils.define(ctorRegistry[\"FormData Iterator\"], {\n    next() {\n      const internal = this && this[utils.iterInternalSymbol];\n      if (!internal) {\n        throw new globalObject.TypeError(\"next() called on a value that is not a FormData iterator object\");\n      }\n\n      const { target, kind, index } = internal;\n      const values = Array.from(target[implSymbol]);\n      const len = values.length;\n      if (index >= len) {\n        return newObjectInRealm(globalObject, { value: undefined, done: true });\n      }\n\n      const pair = values[index];\n      internal.index = index + 1;\n      return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n    }\n  });\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: FormData\n  });\n};\n\nconst Impl = require(\"../xhr/FormData-impl.js\");\n"],"mappings":"AAAA,YAAY;;AAACA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAEb,MAAMC,WAAW,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACjD,MAAME,KAAK,GAAGF,OAAO,CAAC,YAAY,CAAC;AAEnC,MAAMG,eAAe,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AACvD,MAAMI,WAAW,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;AAC/C,MAAMK,IAAI,GAAGL,OAAO,CAAC,WAAW,CAAC;AACjC,MAAMM,QAAQ,GAAGN,OAAO,CAAC,eAAe,CAAC;AACzC,MAAMO,gBAAgB,GAAGL,KAAK,CAACK,gBAAgB;AAC/C,MAAMC,UAAU,GAAGN,KAAK,CAACM,UAAU;AACnC,MAAMC,kBAAkB,GAAGP,KAAK,CAACO,kBAAkB;AAEnD,MAAMC,aAAa,GAAG,UAAU;AAEhCC,OAAO,CAACC,EAAE,GAAGC,KAAK,IAAI;EACpB,OAAOX,KAAK,CAACY,QAAQ,CAACD,KAAK,CAAC,IAAIX,KAAK,CAACa,MAAM,CAACF,KAAK,EAAEL,UAAU,CAAC,IAAIK,KAAK,CAACL,UAAU,CAAC,YAAYQ,IAAI,CAACC,cAAc;AACrH,CAAC;AACDN,OAAO,CAACO,MAAM,GAAGL,KAAK,IAAI;EACxB,OAAOX,KAAK,CAACY,QAAQ,CAACD,KAAK,CAAC,IAAIA,KAAK,YAAYG,IAAI,CAACC,cAAc;AACtE,CAAC;AACDN,OAAO,CAACQ,OAAO,GAAG,CAACC,YAAY,EAAEP,KAAK,EAAE;EAAEQ,OAAO,GAAG;AAAqB,CAAC,GAAG,CAAC,CAAC,KAAK;EAClF,IAAIV,OAAO,CAACC,EAAE,CAACC,KAAK,CAAC,EAAE;IACrB,OAAOX,KAAK,CAACoB,cAAc,CAACT,KAAK,CAAC;EACpC;EACA,MAAM,IAAIO,YAAY,CAACG,SAAS,CAAC,GAAGF,OAAO,6BAA6B,CAAC;AAC3E,CAAC;AAEDV,OAAO,CAACa,qBAAqB,GAAG,CAACJ,YAAY,EAAEK,MAAM,EAAEC,IAAI,KAAK;EAC9D,MAAMC,YAAY,GAAGP,YAAY,CAACX,kBAAkB,CAAC;EACrD,MAAMmB,iBAAiB,GAAGD,YAAY,CAAC,mBAAmB,CAAC;EAC3D,MAAME,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACH,iBAAiB,CAAC;EACjDE,MAAM,CAACE,cAAc,CAACH,QAAQ,EAAE3B,KAAK,CAAC+B,kBAAkB,EAAE;IACxDpB,KAAK,EAAE;MAAEY,MAAM;MAAEC,IAAI;MAAEQ,KAAK,EAAE;IAAE,CAAC;IACjCC,YAAY,EAAE;EAChB,CAAC,CAAC;EACF,OAAON,QAAQ;AACjB,CAAC;AAED,SAASO,WAAWA,CAAChB,YAAY,EAAEiB,SAAS,EAAE;EAC5C,IAAIC,KAAK;EACT,IAAID,SAAS,KAAKE,SAAS,EAAE;IAC3BD,KAAK,GAAGD,SAAS,CAACG,SAAS;EAC7B;EAEA,IAAI,CAACtC,KAAK,CAACY,QAAQ,CAACwB,KAAK,CAAC,EAAE;IAC1BA,KAAK,GAAGlB,YAAY,CAACX,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC+B,SAAS;EAChE;EAEA,OAAOV,MAAM,CAACC,MAAM,CAACO,KAAK,CAAC;AAC7B;AAEA3B,OAAO,CAACoB,MAAM,GAAG,CAACX,YAAY,EAAEqB,eAAe,EAAEC,WAAW,KAAK;EAC/D,MAAMC,OAAO,GAAGP,WAAW,CAAChB,YAAY,CAAC;EACzC,OAAOT,OAAO,CAACiC,KAAK,CAACD,OAAO,EAAEvB,YAAY,EAAEqB,eAAe,EAAEC,WAAW,CAAC;AAC3E,CAAC;AAED/B,OAAO,CAACkC,UAAU,GAAG,CAACzB,YAAY,EAAEqB,eAAe,EAAEC,WAAW,KAAK;EACnE,MAAMC,OAAO,GAAGhC,OAAO,CAACoB,MAAM,CAACX,YAAY,EAAEqB,eAAe,EAAEC,WAAW,CAAC;EAC1E,OAAOxC,KAAK,CAACoB,cAAc,CAACqB,OAAO,CAAC;AACtC,CAAC;AAEDhC,OAAO,CAACmC,cAAc,GAAG,CAACH,OAAO,EAAEvB,YAAY,KAAK,CAAC,CAAC;AAEtDT,OAAO,CAACiC,KAAK,GAAG,CAACD,OAAO,EAAEvB,YAAY,EAAEqB,eAAe,GAAG,EAAE,EAAEC,WAAW,GAAG,CAAC,CAAC,KAAK;EACjFA,WAAW,CAACC,OAAO,GAAGA,OAAO;EAE7BhC,OAAO,CAACmC,cAAc,CAACH,OAAO,EAAEvB,YAAY,CAAC;EAC7CU,MAAM,CAACE,cAAc,CAACW,OAAO,EAAEnC,UAAU,EAAE;IACzCK,KAAK,EAAE,IAAIG,IAAI,CAACC,cAAc,CAACG,YAAY,EAAEqB,eAAe,EAAEC,WAAW,CAAC;IAC1EP,YAAY,EAAE;EAChB,CAAC,CAAC;EAEFQ,OAAO,CAACnC,UAAU,CAAC,CAACN,KAAK,CAAC6C,aAAa,CAAC,GAAGJ,OAAO;EAClD,IAAI3B,IAAI,CAACgC,IAAI,EAAE;IACbhC,IAAI,CAACgC,IAAI,CAACL,OAAO,CAACnC,UAAU,CAAC,CAAC;EAChC;EACA,OAAOmC,OAAO;AAChB,CAAC;AAEDhC,OAAO,CAACsC,GAAG,GAAG,CAAC7B,YAAY,EAAEiB,SAAS,KAAK;EACzC,MAAMM,OAAO,GAAGP,WAAW,CAAChB,YAAY,EAAEiB,SAAS,CAAC;EAEpD1B,OAAO,CAACmC,cAAc,CAACH,OAAO,EAAEvB,YAAY,CAAC;EAC7CU,MAAM,CAACE,cAAc,CAACW,OAAO,EAAEnC,UAAU,EAAE;IACzCK,KAAK,EAAEiB,MAAM,CAACC,MAAM,CAACf,IAAI,CAACC,cAAc,CAACuB,SAAS,CAAC;IACnDL,YAAY,EAAE;EAChB,CAAC,CAAC;EAEFQ,OAAO,CAACnC,UAAU,CAAC,CAACN,KAAK,CAAC6C,aAAa,CAAC,GAAGJ,OAAO;EAClD,IAAI3B,IAAI,CAACgC,IAAI,EAAE;IACbhC,IAAI,CAACgC,IAAI,CAACL,OAAO,CAACnC,UAAU,CAAC,CAAC;EAChC;EACA,OAAOmC,OAAO,CAACnC,UAAU,CAAC;AAC5B,CAAC;AAED,MAAM0C,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAE7CxC,OAAO,CAACyC,OAAO,GAAG,CAAChC,YAAY,EAAEiC,WAAW,KAAK;EAC/C,IAAI,CAACA,WAAW,CAACC,IAAI,CAACC,UAAU,IAAIL,OAAO,CAACM,GAAG,CAACD,UAAU,CAAC,CAAC,EAAE;IAC5D;EACF;EAEA,MAAM5B,YAAY,GAAGzB,KAAK,CAACuD,gBAAgB,CAACrC,YAAY,CAAC;EACzD,MAAMsC,QAAQ,CAAC;IACbC,WAAWA,CAAA,EAAG;MACZ,MAAMC,IAAI,GAAG,EAAE;MACf;QACE,IAAIC,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;QACzB,IAAID,MAAM,KAAKtB,SAAS,EAAE;UACxBsB,MAAM,GAAG1D,eAAe,CAACgB,OAAO,CAACC,YAAY,EAAEyC,MAAM,EAAE;YACrDxC,OAAO,EAAE;UACX,CAAC,CAAC;QACJ;QACAuC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;MACnB;MACA;QACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;QACzB,IAAID,MAAM,KAAKtB,SAAS,EAAE;UACxB,IAAIsB,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKtB,SAAS,EAAE;YAC3CsB,MAAM,GAAG,IAAI;UACf,CAAC,MAAM;YACLA,MAAM,GAAGzD,WAAW,CAACe,OAAO,CAACC,YAAY,EAAEyC,MAAM,EAAE;cACjDxC,OAAO,EAAE;YACX,CAAC,CAAC;UACJ;QACF,CAAC,MAAM;UACLwC,MAAM,GAAG,IAAI;QACf;QACAD,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;MACnB;MACA,OAAOlD,OAAO,CAACiC,KAAK,CAACd,MAAM,CAACC,MAAM,CAACkB,GAAG,CAACxB,MAAM,CAACe,SAAS,CAAC,EAAEpB,YAAY,EAAEwC,IAAI,CAAC;IAC/E;IAEAI,MAAMA,CAACC,IAAI,EAAEpD,KAAK,EAAE;MAClB,MAAMqD,OAAO,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK3B,SAAS,GAAG,IAAI,GAAGnB,YAAY;MACzE,IAAI,CAACT,OAAO,CAACC,EAAE,CAACsD,OAAO,CAAC,EAAE;QACxB,MAAM,IAAI9C,YAAY,CAACG,SAAS,CAAC,wEAAwE,CAAC;MAC5G;MAEA,IAAIuC,SAAS,CAACK,MAAM,GAAG,CAAC,EAAE;QACxB,MAAM,IAAI/C,YAAY,CAACG,SAAS,CAC9B,4EAA4EuC,SAAS,CAACK,MAAM,WAC9F,CAAC;MACH;MACA,MAAMP,IAAI,GAAG,EAAE;MACf,QAAQE,SAAS,CAACK,MAAM;QACtB,KAAK,CAAC;UACJ;YACE,IAAIN,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;YACzBD,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;cACxCxC,OAAO,EAAE,uDAAuD;cAChE+C,OAAO,EAAEhD;YACX,CAAC,CAAC;YACFwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;UACnB;UACA;YACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;YACzB,IAAIzD,IAAI,CAACO,EAAE,CAACiD,MAAM,CAAC,EAAE;cACnB;gBACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;gBACzBD,MAAM,GAAGxD,IAAI,CAACc,OAAO,CAACC,YAAY,EAAEyC,MAAM,EAAE;kBAC1CxC,OAAO,EAAE;gBACX,CAAC,CAAC;gBACFuC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;cACnB;YACF,CAAC,MAAM;cACL;gBACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;gBACzBD,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;kBACxCxC,OAAO,EAAE,uDAAuD;kBAChE+C,OAAO,EAAEhD;gBACX,CAAC,CAAC;gBACFwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;cACnB;YACF;UACF;UACA;QACF;UACE;YACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;YACzBD,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;cACxCxC,OAAO,EAAE,uDAAuD;cAChE+C,OAAO,EAAEhD;YACX,CAAC,CAAC;YACFwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;UACnB;UACA;YACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;YACzBD,MAAM,GAAGxD,IAAI,CAACc,OAAO,CAACC,YAAY,EAAEyC,MAAM,EAAE;cAC1CxC,OAAO,EAAE;YACX,CAAC,CAAC;YACFuC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;UACnB;UACA;YACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;YACzB,IAAID,MAAM,KAAKtB,SAAS,EAAE;cACxBsB,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;gBACxCxC,OAAO,EAAE,uDAAuD;gBAChE+C,OAAO,EAAEhD;cACX,CAAC,CAAC;YACJ;YACAwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;UACnB;MACJ;MACA,OAAOK,OAAO,CAAC1D,UAAU,CAAC,CAACwD,MAAM,CAAC,GAAGJ,IAAI,CAAC;IAC5C;IAEAS,MAAMA,CAACJ,IAAI,EAAE;MACX,MAAMC,OAAO,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK3B,SAAS,GAAG,IAAI,GAAGnB,YAAY;MACzE,IAAI,CAACT,OAAO,CAACC,EAAE,CAACsD,OAAO,CAAC,EAAE;QACxB,MAAM,IAAI9C,YAAY,CAACG,SAAS,CAAC,wEAAwE,CAAC;MAC5G;MAEA,IAAIuC,SAAS,CAACK,MAAM,GAAG,CAAC,EAAE;QACxB,MAAM,IAAI/C,YAAY,CAACG,SAAS,CAC9B,2EAA2EuC,SAAS,CAACK,MAAM,WAC7F,CAAC;MACH;MACA,MAAMP,IAAI,GAAG,EAAE;MACf;QACE,IAAIC,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;QACzBD,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;UACxCxC,OAAO,EAAE,uDAAuD;UAChE+C,OAAO,EAAEhD;QACX,CAAC,CAAC;QACFwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;MACnB;MACA,OAAOK,OAAO,CAAC1D,UAAU,CAAC,CAAC6D,MAAM,CAAC,GAAGT,IAAI,CAAC;IAC5C;IAEAU,GAAGA,CAACL,IAAI,EAAE;MACR,MAAMC,OAAO,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK3B,SAAS,GAAG,IAAI,GAAGnB,YAAY;MACzE,IAAI,CAACT,OAAO,CAACC,EAAE,CAACsD,OAAO,CAAC,EAAE;QACxB,MAAM,IAAI9C,YAAY,CAACG,SAAS,CAAC,qEAAqE,CAAC;MACzG;MAEA,IAAIuC,SAAS,CAACK,MAAM,GAAG,CAAC,EAAE;QACxB,MAAM,IAAI/C,YAAY,CAACG,SAAS,CAC9B,wEAAwEuC,SAAS,CAACK,MAAM,WAC1F,CAAC;MACH;MACA,MAAMP,IAAI,GAAG,EAAE;MACf;QACE,IAAIC,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;QACzBD,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;UACxCxC,OAAO,EAAE,oDAAoD;UAC7D+C,OAAO,EAAEhD;QACX,CAAC,CAAC;QACFwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;MACnB;MACA,OAAO3D,KAAK,CAACqE,iBAAiB,CAACL,OAAO,CAAC1D,UAAU,CAAC,CAAC8D,GAAG,CAAC,GAAGV,IAAI,CAAC,CAAC;IAClE;IAEAY,MAAMA,CAACP,IAAI,EAAE;MACX,MAAMC,OAAO,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK3B,SAAS,GAAG,IAAI,GAAGnB,YAAY;MACzE,IAAI,CAACT,OAAO,CAACC,EAAE,CAACsD,OAAO,CAAC,EAAE;QACxB,MAAM,IAAI9C,YAAY,CAACG,SAAS,CAAC,wEAAwE,CAAC;MAC5G;MAEA,IAAIuC,SAAS,CAACK,MAAM,GAAG,CAAC,EAAE;QACxB,MAAM,IAAI/C,YAAY,CAACG,SAAS,CAC9B,2EAA2EuC,SAAS,CAACK,MAAM,WAC7F,CAAC;MACH;MACA,MAAMP,IAAI,GAAG,EAAE;MACf;QACE,IAAIC,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;QACzBD,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;UACxCxC,OAAO,EAAE,uDAAuD;UAChE+C,OAAO,EAAEhD;QACX,CAAC,CAAC;QACFwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;MACnB;MACA,OAAO3D,KAAK,CAACqE,iBAAiB,CAACL,OAAO,CAAC1D,UAAU,CAAC,CAACgE,MAAM,CAAC,GAAGZ,IAAI,CAAC,CAAC;IACrE;IAEAJ,GAAGA,CAACS,IAAI,EAAE;MACR,MAAMC,OAAO,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK3B,SAAS,GAAG,IAAI,GAAGnB,YAAY;MACzE,IAAI,CAACT,OAAO,CAACC,EAAE,CAACsD,OAAO,CAAC,EAAE;QACxB,MAAM,IAAI9C,YAAY,CAACG,SAAS,CAAC,qEAAqE,CAAC;MACzG;MAEA,IAAIuC,SAAS,CAACK,MAAM,GAAG,CAAC,EAAE;QACxB,MAAM,IAAI/C,YAAY,CAACG,SAAS,CAC9B,wEAAwEuC,SAAS,CAACK,MAAM,WAC1F,CAAC;MACH;MACA,MAAMP,IAAI,GAAG,EAAE;MACf;QACE,IAAIC,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;QACzBD,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;UACxCxC,OAAO,EAAE,oDAAoD;UAC7D+C,OAAO,EAAEhD;QACX,CAAC,CAAC;QACFwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;MACnB;MACA,OAAOK,OAAO,CAAC1D,UAAU,CAAC,CAACgD,GAAG,CAAC,GAAGI,IAAI,CAAC;IACzC;IAEAa,GAAGA,CAACR,IAAI,EAAEpD,KAAK,EAAE;MACf,MAAMqD,OAAO,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK3B,SAAS,GAAG,IAAI,GAAGnB,YAAY;MACzE,IAAI,CAACT,OAAO,CAACC,EAAE,CAACsD,OAAO,CAAC,EAAE;QACxB,MAAM,IAAI9C,YAAY,CAACG,SAAS,CAAC,qEAAqE,CAAC;MACzG;MAEA,IAAIuC,SAAS,CAACK,MAAM,GAAG,CAAC,EAAE;QACxB,MAAM,IAAI/C,YAAY,CAACG,SAAS,CAC9B,yEAAyEuC,SAAS,CAACK,MAAM,WAC3F,CAAC;MACH;MACA,MAAMP,IAAI,GAAG,EAAE;MACf,QAAQE,SAAS,CAACK,MAAM;QACtB,KAAK,CAAC;UACJ;YACE,IAAIN,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;YACzBD,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;cACxCxC,OAAO,EAAE,oDAAoD;cAC7D+C,OAAO,EAAEhD;YACX,CAAC,CAAC;YACFwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;UACnB;UACA;YACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;YACzB,IAAIzD,IAAI,CAACO,EAAE,CAACiD,MAAM,CAAC,EAAE;cACnB;gBACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;gBACzBD,MAAM,GAAGxD,IAAI,CAACc,OAAO,CAACC,YAAY,EAAEyC,MAAM,EAAE;kBAC1CxC,OAAO,EAAE;gBACX,CAAC,CAAC;gBACFuC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;cACnB;YACF,CAAC,MAAM;cACL;gBACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;gBACzBD,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;kBACxCxC,OAAO,EAAE,oDAAoD;kBAC7D+C,OAAO,EAAEhD;gBACX,CAAC,CAAC;gBACFwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;cACnB;YACF;UACF;UACA;QACF;UACE;YACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;YACzBD,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;cACxCxC,OAAO,EAAE,oDAAoD;cAC7D+C,OAAO,EAAEhD;YACX,CAAC,CAAC;YACFwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;UACnB;UACA;YACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;YACzBD,MAAM,GAAGxD,IAAI,CAACc,OAAO,CAACC,YAAY,EAAEyC,MAAM,EAAE;cAC1CxC,OAAO,EAAE;YACX,CAAC,CAAC;YACFuC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;UACnB;UACA;YACE,IAAIA,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;YACzB,IAAID,MAAM,KAAKtB,SAAS,EAAE;cACxBsB,MAAM,GAAG5D,WAAW,CAAC,WAAW,CAAC,CAAC4D,MAAM,EAAE;gBACxCxC,OAAO,EAAE,oDAAoD;gBAC7D+C,OAAO,EAAEhD;cACX,CAAC,CAAC;YACJ;YACAwC,IAAI,CAACG,IAAI,CAACF,MAAM,CAAC;UACnB;MACJ;MACA,OAAOK,OAAO,CAAC1D,UAAU,CAAC,CAACiE,GAAG,CAAC,GAAGb,IAAI,CAAC;IACzC;IAEAc,IAAIA,CAAA,EAAG;MACL,IAAI,CAAC/D,OAAO,CAACC,EAAE,CAAC,IAAI,CAAC,EAAE;QACrB,MAAM,IAAIQ,YAAY,CAACG,SAAS,CAAC,sEAAsE,CAAC;MAC1G;MACA,OAAOZ,OAAO,CAACa,qBAAqB,CAACJ,YAAY,EAAE,IAAI,EAAE,KAAK,CAAC;IACjE;IAEAuD,MAAMA,CAAA,EAAG;MACP,IAAI,CAAChE,OAAO,CAACC,EAAE,CAAC,IAAI,CAAC,EAAE;QACrB,MAAM,IAAIQ,YAAY,CAACG,SAAS,CAAC,wEAAwE,CAAC;MAC5G;MACA,OAAOZ,OAAO,CAACa,qBAAqB,CAACJ,YAAY,EAAE,IAAI,EAAE,OAAO,CAAC;IACnE;IAEAwD,OAAOA,CAAA,EAAG;MACR,IAAI,CAACjE,OAAO,CAACC,EAAE,CAAC,IAAI,CAAC,EAAE;QACrB,MAAM,IAAIQ,YAAY,CAACG,SAAS,CAAC,yEAAyE,CAAC;MAC7G;MACA,OAAOZ,OAAO,CAACa,qBAAqB,CAACJ,YAAY,EAAE,IAAI,EAAE,WAAW,CAAC;IACvE;IAEAyD,OAAOA,CAACC,QAAQ,EAAE;MAChB,IAAI,CAACnE,OAAO,CAACC,EAAE,CAAC,IAAI,CAAC,EAAE;QACrB,MAAM,IAAIQ,YAAY,CAACG,SAAS,CAAC,yEAAyE,CAAC;MAC7G;MACA,IAAIuC,SAAS,CAACK,MAAM,GAAG,CAAC,EAAE;QACxB,MAAM,IAAI/C,YAAY,CAACG,SAAS,CAC9B,qFACF,CAAC;MACH;MACAuD,QAAQ,GAAGxE,QAAQ,CAACa,OAAO,CAACC,YAAY,EAAE0D,QAAQ,EAAE;QAClDzD,OAAO,EAAE;MACX,CAAC,CAAC;MACF,MAAM0D,OAAO,GAAGjB,SAAS,CAAC,CAAC,CAAC;MAC5B,IAAIkB,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC1E,UAAU,CAAC,CAAC;MACxC,IAAI2E,CAAC,GAAG,CAAC;MACT,OAAOA,CAAC,GAAGH,KAAK,CAACb,MAAM,EAAE;QACvB,MAAM,CAACiB,GAAG,EAAEvE,KAAK,CAAC,GAAGmE,KAAK,CAACG,CAAC,CAAC,CAACE,GAAG,CAACnF,KAAK,CAACqE,iBAAiB,CAAC;QAC1DO,QAAQ,CAACQ,IAAI,CAACP,OAAO,EAAElE,KAAK,EAAEuE,GAAG,EAAE,IAAI,CAAC;QACxCJ,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC1E,UAAU,CAAC,CAAC;QACpC2E,CAAC,EAAE;MACL;IACF;EACF;EACArD,MAAM,CAACyD,gBAAgB,CAAC7B,QAAQ,CAAClB,SAAS,EAAE;IAC1CwB,MAAM,EAAE;MAAEwB,UAAU,EAAE;IAAK,CAAC;IAC5BnB,MAAM,EAAE;MAAEmB,UAAU,EAAE;IAAK,CAAC;IAC5BlB,GAAG,EAAE;MAAEkB,UAAU,EAAE;IAAK,CAAC;IACzBhB,MAAM,EAAE;MAAEgB,UAAU,EAAE;IAAK,CAAC;IAC5BhC,GAAG,EAAE;MAAEgC,UAAU,EAAE;IAAK,CAAC;IACzBf,GAAG,EAAE;MAAEe,UAAU,EAAE;IAAK,CAAC;IACzBd,IAAI,EAAE;MAAEc,UAAU,EAAE;IAAK,CAAC;IAC1Bb,MAAM,EAAE;MAAEa,UAAU,EAAE;IAAK,CAAC;IAC5BZ,OAAO,EAAE;MAAEY,UAAU,EAAE;IAAK,CAAC;IAC7BX,OAAO,EAAE;MAAEW,UAAU,EAAE;IAAK,CAAC;IAC7B,CAACC,MAAM,CAACC,WAAW,GAAG;MAAE7E,KAAK,EAAE,UAAU;MAAEsB,YAAY,EAAE;IAAK,CAAC;IAC/D,CAACsD,MAAM,CAAC5D,QAAQ,GAAG;MAAEhB,KAAK,EAAE6C,QAAQ,CAAClB,SAAS,CAACoC,OAAO;MAAEzC,YAAY,EAAE,IAAI;MAAEwD,QAAQ,EAAE;IAAK;EAC7F,CAAC,CAAC;EACFhE,YAAY,CAACjB,aAAa,CAAC,GAAGgD,QAAQ;EAEtC/B,YAAY,CAAC,mBAAmB,CAAC,GAAGG,MAAM,CAACC,MAAM,CAACJ,YAAY,CAAC,qBAAqB,CAAC,EAAE;IACrF,CAAC8D,MAAM,CAACC,WAAW,GAAG;MACpBvD,YAAY,EAAE,IAAI;MAClBtB,KAAK,EAAE;IACT;EACF,CAAC,CAAC;EACFX,KAAK,CAAC0F,MAAM,CAACjE,YAAY,CAAC,mBAAmB,CAAC,EAAE;IAC9CkE,IAAIA,CAAA,EAAG;MACL,MAAMC,QAAQ,GAAG,IAAI,IAAI,IAAI,CAAC5F,KAAK,CAAC+B,kBAAkB,CAAC;MACvD,IAAI,CAAC6D,QAAQ,EAAE;QACb,MAAM,IAAI1E,YAAY,CAACG,SAAS,CAAC,iEAAiE,CAAC;MACrG;MAEA,MAAM;QAAEE,MAAM;QAAEC,IAAI;QAAEQ;MAAM,CAAC,GAAG4D,QAAQ;MACxC,MAAMnB,MAAM,GAAGM,KAAK,CAACC,IAAI,CAACzD,MAAM,CAACjB,UAAU,CAAC,CAAC;MAC7C,MAAMuF,GAAG,GAAGpB,MAAM,CAACR,MAAM;MACzB,IAAIjC,KAAK,IAAI6D,GAAG,EAAE;QAChB,OAAOxF,gBAAgB,CAACa,YAAY,EAAE;UAAEP,KAAK,EAAE0B,SAAS;UAAEyD,IAAI,EAAE;QAAK,CAAC,CAAC;MACzE;MAEA,MAAMC,IAAI,GAAGtB,MAAM,CAACzC,KAAK,CAAC;MAC1B4D,QAAQ,CAAC5D,KAAK,GAAGA,KAAK,GAAG,CAAC;MAC1B,OAAO3B,gBAAgB,CAACa,YAAY,EAAElB,KAAK,CAACgG,cAAc,CAACD,IAAI,CAACZ,GAAG,CAACnF,KAAK,CAACqE,iBAAiB,CAAC,EAAE7C,IAAI,CAAC,CAAC;IACtG;EACF,CAAC,CAAC;EAEFI,MAAM,CAACE,cAAc,CAACZ,YAAY,EAAEV,aAAa,EAAE;IACjDyB,YAAY,EAAE,IAAI;IAClBwD,QAAQ,EAAE,IAAI;IACd9E,KAAK,EAAE6C;EACT,CAAC,CAAC;AACJ,CAAC;AAED,MAAM1C,IAAI,GAAGhB,OAAO,CAAC,yBAAyB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}