{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array-buffer.detached.js\");\nrequire(\"core-js/modules/es.array-buffer.transfer.js\");\nrequire(\"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\");\nrequire(\"core-js/modules/es.set.difference.v2.js\");\nrequire(\"core-js/modules/es.set.intersection.v2.js\");\nrequire(\"core-js/modules/es.set.is-disjoint-from.v2.js\");\nrequire(\"core-js/modules/es.set.is-subset-of.v2.js\");\nrequire(\"core-js/modules/es.set.is-superset-of.v2.js\");\nrequire(\"core-js/modules/es.set.symmetric-difference.v2.js\");\nrequire(\"core-js/modules/es.set.union.v2.js\");\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nrequire(\"core-js/modules/esnext.iterator.constructor.js\");\nrequire(\"core-js/modules/esnext.iterator.filter.js\");\nrequire(\"core-js/modules/esnext.iterator.find.js\");\nrequire(\"core-js/modules/esnext.iterator.map.js\");\nconst HTTP_STATUS_CODES = require(\"http\").STATUS_CODES;\nconst {\n  spawnSync\n} = require(\"child_process\");\nconst {\n  URL\n} = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst tough = require(\"tough-cookie\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst xhrUtils = require(\"./xhr-utils\");\nconst DOMException = require(\"../generated/DOMException\");\nconst {\n  documentBaseURLSerialized\n} = require(\"../helpers/document-base-url\");\nconst {\n  asciiCaseInsensitiveMatch\n} = require(\"../helpers/strings\");\nconst idlUtils = require(\"../generated/utils\");\nconst Document = require(\"../generated/Document\");\nconst Blob = require(\"../generated/Blob\");\nconst FormData = require(\"../generated/FormData\");\nconst XMLHttpRequestEventTargetImpl = require(\"./XMLHttpRequestEventTarget-impl\").implementation;\nconst XMLHttpRequestUpload = require(\"../generated/XMLHttpRequestUpload\");\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\nconst {\n  isArrayBuffer\n} = require(\"../generated/utils\");\nconst {\n  parseIntoDocument\n} = require(\"../../browser/parser\");\nconst {\n  fragmentSerialization\n} = require(\"../domparsing/serialization\");\nconst {\n  setupForSimpleEventAccessors\n} = require(\"../helpers/create-event-accessor\");\nconst {\n  parseJSONFromBytes\n} = require(\"../helpers/json\");\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\nconst {\n  copyToArrayBufferInNewRealm\n} = require(\"../helpers/binary-data\");\nconst {\n  READY_STATES\n} = xhrUtils;\nconst syncWorkerFile = require.resolve ? require.resolve(\"./xhr-sync-worker.js\") : null;\nconst tokenRegexp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\nconst fieldValueRegexp = /^[ \\t]*(?:[\\x21-\\x7E\\x80-\\xFF](?:[ \\t][\\x21-\\x7E\\x80-\\xFF])?)*[ \\t]*$/;\nconst forbiddenRequestHeaders = new Set([\"accept-charset\", \"accept-encoding\", \"access-control-request-headers\", \"access-control-request-method\", \"connection\", \"content-length\", \"cookie\", \"cookie2\", \"date\", \"dnt\", \"expect\", \"host\", \"keep-alive\", \"origin\", \"referer\", \"te\", \"trailer\", \"transfer-encoding\", \"upgrade\", \"via\"]);\nconst forbiddenResponseHeaders = new Set([\"set-cookie\", \"set-cookie2\"]);\nconst uniqueResponseHeaders = new Set([\"content-type\", \"content-length\", \"user-agent\", \"referer\", \"host\", \"authorization\", \"proxy-authorization\", \"if-modified-since\", \"if-unmodified-since\", \"from\", \"location\", \"max-forwards\"]);\nconst corsSafeResponseHeaders = new Set([\"cache-control\", \"content-language\", \"content-length\", \"content-type\", \"expires\", \"last-modified\", \"pragma\"]);\nconst allowedRequestMethods = new Set([\"OPTIONS\", \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\"]);\nconst forbiddenRequestMethods = new Set([\"TRACK\", \"TRACE\", \"CONNECT\"]);\nclass XMLHttpRequestImpl extends XMLHttpRequestEventTargetImpl {\n  constructor(window) {\n    super(window);\n\n    // Avoid running `_ownerDocument` getter multiple times in the constructor:\n    const {\n      _ownerDocument\n    } = this;\n    this.upload = XMLHttpRequestUpload.createImpl(window);\n    this.readyState = READY_STATES.UNSENT;\n    this.responseURL = \"\";\n    this.status = 0;\n    this.statusText = \"\";\n    this.flag = {\n      synchronous: false,\n      withCredentials: false,\n      mimeType: null,\n      auth: null,\n      method: undefined,\n      responseType: \"\",\n      requestHeaders: {},\n      referrer: _ownerDocument.URL,\n      uri: \"\",\n      timeout: 0,\n      body: undefined,\n      formData: false,\n      preflight: false,\n      requestManager: _ownerDocument._requestManager,\n      strictSSL: window._resourceLoader._strictSSL,\n      proxy: window._resourceLoader._proxy,\n      cookieJar: _ownerDocument._cookieJar,\n      encoding: _ownerDocument._encoding,\n      origin: window._origin,\n      userAgent: window.navigator.userAgent\n    };\n    this.properties = {\n      beforeSend: false,\n      send: false,\n      client: null,\n      timeoutStart: 0,\n      timeoutId: 0,\n      timeoutFn: null,\n      responseBuffer: null,\n      responseCache: null,\n      responseTextCache: null,\n      responseXMLCache: null,\n      responseHeaders: {},\n      filteredResponseHeaders: [],\n      error: \"\",\n      uploadComplete: false,\n      uploadListener: false,\n      // Signifies that we're calling abort() from xhr-utils.js because of a window shutdown.\n      // In that case the termination reason is \"fatal\", not \"end-user abort\".\n      abortError: false,\n      cookieJar: _ownerDocument._cookieJar,\n      bufferStepSize: 1 * 1024 * 1024,\n      // pre-allocate buffer increase step size. init value is 1MB\n      totalReceivedChunkSize: 0\n    };\n  }\n  get responseType() {\n    return this.flag.responseType;\n  }\n  set responseType(responseType) {\n    const {\n      flag\n    } = this;\n    if (this.readyState === READY_STATES.LOADING || this.readyState === READY_STATES.DONE) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    if (this.readyState === READY_STATES.OPENED && flag.synchronous) {\n      throw DOMException.create(this._globalObject, [\"The object does not support the operation or argument.\", \"InvalidAccessError\"]);\n    }\n    flag.responseType = responseType;\n  }\n  get response() {\n    const {\n      properties\n    } = this;\n    if (properties.responseCache) {\n      // Needed because of: https://github.com/jsdom/webidl2js/issues/149\n      return idlUtils.tryWrapperForImpl(properties.responseCache);\n    }\n    let res;\n    const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n    switch (this.responseType) {\n      case \"\":\n      case \"text\":\n        {\n          res = this.responseText;\n          break;\n        }\n      case \"arraybuffer\":\n        {\n          if (!responseBuffer) {\n            return null;\n          }\n          res = copyToArrayBufferInNewRealm(responseBuffer, this._globalObject);\n          break;\n        }\n      case \"blob\":\n        {\n          if (!responseBuffer) {\n            return null;\n          }\n          const contentType = finalMIMEType(this);\n          res = Blob.createImpl(this._globalObject, [[new Uint8Array(responseBuffer)], {\n            type: contentType || \"\"\n          }]);\n          break;\n        }\n      case \"document\":\n        {\n          res = this.responseXML;\n          break;\n        }\n      case \"json\":\n        {\n          if (this.readyState !== READY_STATES.DONE || !responseBuffer) {\n            res = null;\n          }\n          try {\n            res = parseJSONFromBytes(responseBuffer);\n          } catch {\n            res = null;\n          }\n          break;\n        }\n    }\n    properties.responseCache = res;\n    // Needed because of: https://github.com/jsdom/webidl2js/issues/149\n    return idlUtils.tryWrapperForImpl(res);\n  }\n  get responseText() {\n    const {\n      properties\n    } = this;\n    if (this.responseType !== \"\" && this.responseType !== \"text\") {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    if (this.readyState !== READY_STATES.LOADING && this.readyState !== READY_STATES.DONE) {\n      return \"\";\n    }\n    if (properties.responseTextCache) {\n      return properties.responseTextCache;\n    }\n    const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n    if (!responseBuffer) {\n      return \"\";\n    }\n    const fallbackEncoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n    const res = whatwgEncoding.decode(responseBuffer, fallbackEncoding);\n    properties.responseTextCache = res;\n    return res;\n  }\n  get responseXML() {\n    const {\n      flag,\n      properties\n    } = this;\n    if (this.responseType !== \"\" && this.responseType !== \"document\") {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    if (this.readyState !== READY_STATES.DONE) {\n      return null;\n    }\n    if (properties.responseXMLCache) {\n      return properties.responseXMLCache;\n    }\n    const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n    if (!responseBuffer) {\n      return null;\n    }\n    const contentType = finalMIMEType(this);\n    let isHTML = false;\n    let isXML = false;\n    const parsed = MIMEType.parse(contentType);\n    if (parsed) {\n      isHTML = parsed.isHTML();\n      isXML = parsed.isXML();\n      if (!isXML && !isHTML) {\n        return null;\n      }\n    }\n    if (this.responseType === \"\" && isHTML) {\n      return null;\n    }\n    const encoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n    const resText = whatwgEncoding.decode(responseBuffer, encoding);\n    if (!resText) {\n      return null;\n    }\n    const res = Document.createImpl(this._globalObject, [], {\n      options: {\n        url: flag.uri,\n        lastModified: new Date(getResponseHeader(this, \"last-modified\")),\n        parsingMode: isHTML ? \"html\" : \"xml\",\n        cookieJar: {\n          setCookieSync: () => undefined,\n          getCookieStringSync: () => \"\"\n        },\n        encoding,\n        parseOptions: this._ownerDocument._parseOptions\n      }\n    });\n    try {\n      parseIntoDocument(resText, res);\n    } catch {\n      properties.responseXMLCache = null;\n      return null;\n    }\n    res.close();\n    properties.responseXMLCache = res;\n    return res;\n  }\n  get timeout() {\n    return this.flag.timeout;\n  }\n  set timeout(val) {\n    const {\n      flag,\n      properties\n    } = this;\n    if (flag.synchronous) {\n      throw DOMException.create(this._globalObject, [\"The object does not support the operation or argument.\", \"InvalidAccessError\"]);\n    }\n    flag.timeout = val;\n    clearTimeout(properties.timeoutId);\n    if (val > 0 && properties.timeoutFn) {\n      properties.timeoutId = setTimeout(properties.timeoutFn, Math.max(0, val - (new Date().getTime() - properties.timeoutStart)));\n    } else {\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n    }\n  }\n  get withCredentials() {\n    return this.flag.withCredentials;\n  }\n  set withCredentials(val) {\n    const {\n      flag,\n      properties\n    } = this;\n    if (!(this.readyState === READY_STATES.UNSENT || this.readyState === READY_STATES.OPENED)) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    if (properties.send) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    flag.withCredentials = val;\n  }\n  abort() {\n    const {\n      properties\n    } = this;\n    // Terminate the request\n    clearTimeout(properties.timeoutId);\n    properties.timeoutFn = null;\n    properties.timeoutStart = 0;\n    const {\n      client\n    } = properties;\n    if (client) {\n      client.abort();\n      properties.client = null;\n    }\n    if (properties.abortError) {\n      // Special case that ideally shouldn't be going through the public API at all.\n      // Run the https://xhr.spec.whatwg.org/#handle-errors \"fatal\" steps.\n      this.readyState = READY_STATES.DONE;\n      properties.send = false;\n      xhrUtils.setResponseToNetworkError(this);\n      return;\n    }\n    if (this.readyState === READY_STATES.OPENED && properties.send || this.readyState === READY_STATES.HEADERS_RECEIVED || this.readyState === READY_STATES.LOADING) {\n      xhrUtils.requestErrorSteps(this, \"abort\");\n    }\n    if (this.readyState === READY_STATES.DONE) {\n      this.readyState = READY_STATES.UNSENT;\n      xhrUtils.setResponseToNetworkError(this);\n    }\n  }\n  getAllResponseHeaders() {\n    const {\n      properties,\n      readyState\n    } = this;\n    if (readyState === READY_STATES.UNSENT || readyState === READY_STATES.OPENED) {\n      return \"\";\n    }\n    return Object.keys(properties.responseHeaders).filter(key => properties.filteredResponseHeaders.indexOf(key) === -1).map(key => [key.toLowerCase(), properties.responseHeaders[key]].join(\": \")).join(\"\\r\\n\");\n  }\n  getResponseHeader(header) {\n    const {\n      properties,\n      readyState\n    } = this;\n    if (readyState === READY_STATES.UNSENT || readyState === READY_STATES.OPENED) {\n      return null;\n    }\n    const lcHeader = header.toLowerCase();\n    if (properties.filteredResponseHeaders.find(filtered => lcHeader === filtered.toLowerCase())) {\n      return null;\n    }\n    return getResponseHeader(this, lcHeader);\n  }\n  open(method, uri, asynchronous, user, password) {\n    const {\n      flag,\n      properties,\n      _ownerDocument\n    } = this;\n    if (!_ownerDocument) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    if (!tokenRegexp.test(method)) {\n      throw DOMException.create(this._globalObject, [\"The string did not match the expected pattern.\", \"SyntaxError\"]);\n    }\n    const upperCaseMethod = method.toUpperCase();\n    if (forbiddenRequestMethods.has(upperCaseMethod)) {\n      throw DOMException.create(this._globalObject, [\"The operation is insecure.\", \"SecurityError\"]);\n    }\n    const {\n      client\n    } = properties;\n    if (client && typeof client.abort === \"function\") {\n      client.abort();\n    }\n    if (allowedRequestMethods.has(upperCaseMethod)) {\n      method = upperCaseMethod;\n    }\n    if (typeof asynchronous !== \"undefined\") {\n      flag.synchronous = !asynchronous;\n    } else {\n      flag.synchronous = false;\n    }\n    if (flag.responseType && flag.synchronous) {\n      throw DOMException.create(this._globalObject, [\"The object does not support the operation or argument.\", \"InvalidAccessError\"]);\n    }\n    if (flag.synchronous && flag.timeout) {\n      throw DOMException.create(this._globalObject, [\"The object does not support the operation or argument.\", \"InvalidAccessError\"]);\n    }\n    flag.method = method;\n    let urlObj;\n    try {\n      urlObj = new URL(uri, documentBaseURLSerialized(_ownerDocument));\n    } catch {\n      throw DOMException.create(this._globalObject, [\"The string did not match the expected pattern.\", \"SyntaxError\"]);\n    }\n    if (user || password && !urlObj.username) {\n      flag.auth = {\n        user,\n        pass: password\n      };\n      urlObj.username = \"\";\n      urlObj.password = \"\";\n    }\n    flag.uri = urlObj.href;\n    flag.requestHeaders = {};\n    flag.preflight = false;\n    properties.send = false;\n    properties.uploadListener = false;\n    properties.abortError = false;\n    this.responseURL = \"\";\n    readyStateChange(this, READY_STATES.OPENED);\n  }\n  overrideMimeType(mime) {\n    const {\n      readyState\n    } = this;\n    if (readyState === READY_STATES.LOADING || readyState === READY_STATES.DONE) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    this.flag.overrideMIMEType = \"application/octet-stream\";\n\n    // Waiting for better spec: https://github.com/whatwg/xhr/issues/157\n    const parsed = MIMEType.parse(mime);\n    if (parsed) {\n      this.flag.overrideMIMEType = parsed.essence;\n      const charset = parsed.parameters.get(\"charset\");\n      if (charset) {\n        this.flag.overrideCharset = whatwgEncoding.labelToName(charset);\n      }\n    }\n  }\n\n  // TODO: Add support for URLSearchParams and ReadableStream\n  send(body) {\n    const {\n      flag,\n      properties,\n      upload,\n      _ownerDocument\n    } = this;\n    // Not per spec, but per tests: https://github.com/whatwg/xhr/issues/65\n    if (!_ownerDocument) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    if (this.readyState !== READY_STATES.OPENED || properties.send) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    properties.beforeSend = true;\n    try {\n      if (flag.method === \"GET\" || flag.method === \"HEAD\") {\n        body = null;\n      }\n      if (body !== null) {\n        let encoding = null;\n        let mimeType = null;\n        if (Document.isImpl(body)) {\n          encoding = \"UTF-8\";\n          mimeType = (body._parsingMode === \"html\" ? \"text/html\" : \"application/xml\") + \";charset=UTF-8\";\n          flag.body = fragmentSerialization(body, {\n            requireWellFormed: false\n          });\n        } else {\n          if (typeof body === \"string\") {\n            encoding = \"UTF-8\";\n          }\n          const {\n            buffer,\n            formData,\n            contentType\n          } = extractBody(body);\n          mimeType = contentType;\n          flag.body = buffer || formData;\n          flag.formData = Boolean(formData);\n        }\n        const existingContentType = xhrUtils.getRequestHeader(flag.requestHeaders, \"content-type\");\n        if (mimeType !== null && existingContentType === null) {\n          flag.requestHeaders[\"Content-Type\"] = mimeType;\n        } else if (existingContentType !== null && encoding !== null) {\n          // Waiting for better spec: https://github.com/whatwg/xhr/issues/188. This seems like a good guess at what\n          // the spec will be, in the meantime.\n          const parsed = MIMEType.parse(existingContentType);\n          if (parsed) {\n            const charset = parsed.parameters.get(\"charset\");\n            if (charset && !asciiCaseInsensitiveMatch(charset, encoding) && encoding !== null) {\n              parsed.parameters.set(\"charset\", encoding);\n              xhrUtils.updateRequestHeader(flag.requestHeaders, \"content-type\", parsed.toString());\n            }\n          }\n        }\n      }\n    } finally {\n      if (properties.beforeSend) {\n        properties.beforeSend = false;\n      } else {\n        throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n      }\n    }\n    if (Object.keys(upload._eventListeners).length > 0) {\n      properties.uploadListener = true;\n    }\n\n    // request doesn't like zero-length bodies\n    if (flag.body && flag.body.byteLength === 0) {\n      flag.body = null;\n    }\n    if (flag.synchronous) {\n      const flagStr = JSON.stringify(flag, function (k, v) {\n        if (this === flag && k === \"requestManager\") {\n          return null;\n        }\n        if (this === flag && k === \"pool\" && v) {\n          return {\n            maxSockets: v.maxSockets\n          };\n        }\n        return v;\n      });\n      const res = spawnSync(process.execPath, [syncWorkerFile], {\n        input: flagStr,\n        maxBuffer: Infinity\n      });\n      if (res.status !== 0) {\n        throw new Error(res.stderr.toString());\n      }\n      if (res.error) {\n        if (typeof res.error === \"string\") {\n          res.error = new Error(res.error);\n        }\n        throw res.error;\n      }\n      const response = JSON.parse(res.stdout.toString());\n      const resProp = response.properties;\n      if (resProp.responseBuffer && resProp.responseBuffer.data) {\n        resProp.responseBuffer = Buffer.from(resProp.responseBuffer.data);\n      }\n      if (resProp.cookieJar) {\n        resProp.cookieJar = tough.CookieJar.deserializeSync(resProp.cookieJar, _ownerDocument._cookieJar.store);\n      }\n      this.readyState = READY_STATES.LOADING;\n      this.status = response.status;\n      this.statusText = response.statusText;\n      this.responseURL = response.responseURL;\n      Object.assign(this.properties, response.properties);\n      if (resProp.error) {\n        xhrUtils.dispatchError(this);\n        throw DOMException.create(this._globalObject, [resProp.error, \"NetworkError\"]);\n      } else {\n        const {\n          responseBuffer\n        } = properties;\n        const contentLength = getResponseHeader(this, \"content-length\") || \"0\";\n        const bufferLength = parseInt(contentLength) || responseBuffer.length;\n        const progressObj = {\n          lengthComputable: false\n        };\n        if (bufferLength !== 0) {\n          progressObj.total = bufferLength;\n          progressObj.loaded = bufferLength;\n          progressObj.lengthComputable = true;\n        }\n        fireAnEvent(\"progress\", this, ProgressEvent, progressObj);\n        readyStateChange(this, READY_STATES.DONE);\n        fireAnEvent(\"load\", this, ProgressEvent, progressObj);\n        fireAnEvent(\"loadend\", this, ProgressEvent, progressObj);\n      }\n    } else {\n      properties.send = true;\n      fireAnEvent(\"loadstart\", this, ProgressEvent);\n      const client = xhrUtils.createClient(this);\n      properties.client = client;\n      // For new client, reset totalReceivedChunkSize and bufferStepSize\n      properties.totalReceivedChunkSize = 0;\n      properties.bufferStepSize = 1 * 1024 * 1024;\n      properties.origin = flag.origin;\n      client.on(\"error\", err => {\n        client.removeAllListeners();\n        properties.error = err;\n        xhrUtils.dispatchError(this);\n      });\n      client.on(\"response\", (res, url) => receiveResponse(this, res, url));\n      client.on(\"redirect\", (response, requestHeaders, currentURL) => {\n        const destUrlObj = new URL(requestHeaders.Referer);\n        const urlObj = new URL(currentURL);\n        if (destUrlObj.origin !== urlObj.origin && destUrlObj.origin !== flag.origin) {\n          properties.origin = \"null\";\n        }\n        requestHeaders.Origin = properties.origin;\n        if (flag.origin !== destUrlObj.origin && destUrlObj.protocol !== \"data:\") {\n          if (!xhrUtils.validCORSHeaders(this, response, flag, properties, flag.origin)) {\n            return;\n          }\n          if (urlObj.username || urlObj.password) {\n            properties.error = \"Userinfo forbidden in cors redirect\";\n            xhrUtils.dispatchError(this);\n          }\n        }\n      });\n      if (body !== null && body !== \"\") {\n        properties.uploadComplete = false;\n        setDispatchProgressEvents(this);\n      } else {\n        properties.uploadComplete = true;\n      }\n      if (this.timeout > 0) {\n        properties.timeoutStart = new Date().getTime();\n        properties.timeoutFn = () => {\n          client.abort();\n          if (!(this.readyState === READY_STATES.UNSENT || this.readyState === READY_STATES.OPENED && !properties.send || this.readyState === READY_STATES.DONE)) {\n            properties.send = false;\n            let stateChanged = false;\n            if (!properties.uploadComplete) {\n              fireAnEvent(\"progress\", upload, ProgressEvent);\n              readyStateChange(this, READY_STATES.DONE);\n              fireAnEvent(\"timeout\", upload, ProgressEvent);\n              fireAnEvent(\"loadend\", upload, ProgressEvent);\n              stateChanged = true;\n            }\n            fireAnEvent(\"progress\", this, ProgressEvent);\n            if (!stateChanged) {\n              readyStateChange(this, READY_STATES.DONE);\n            }\n            fireAnEvent(\"timeout\", this, ProgressEvent);\n            fireAnEvent(\"loadend\", this, ProgressEvent);\n          }\n          this.readyState = READY_STATES.UNSENT;\n        };\n        properties.timeoutId = setTimeout(properties.timeoutFn, this.timeout);\n      }\n    }\n  }\n  setRequestHeader(header, value) {\n    const {\n      flag,\n      properties\n    } = this;\n    if (this.readyState !== READY_STATES.OPENED || properties.send) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    value = normalizeHeaderValue(value);\n    if (!tokenRegexp.test(header) || !fieldValueRegexp.test(value)) {\n      throw DOMException.create(this._globalObject, [\"The string did not match the expected pattern.\", \"SyntaxError\"]);\n    }\n    const lcHeader = header.toLowerCase();\n    if (forbiddenRequestHeaders.has(lcHeader) || lcHeader.startsWith(\"sec-\") || lcHeader.startsWith(\"proxy-\")) {\n      return;\n    }\n    const keys = Object.keys(flag.requestHeaders);\n    let n = keys.length;\n    while (n--) {\n      const key = keys[n];\n      if (key.toLowerCase() === lcHeader) {\n        flag.requestHeaders[key] += \", \" + value;\n        return;\n      }\n    }\n    flag.requestHeaders[header] = value;\n  }\n}\nsetupForSimpleEventAccessors(XMLHttpRequestImpl.prototype, [\"readystatechange\"]);\nfunction readyStateChange(xhr, readyState) {\n  if (xhr.readyState === readyState) {\n    return;\n  }\n  xhr.readyState = readyState;\n  fireAnEvent(\"readystatechange\", xhr);\n}\nfunction receiveResponse(xhr, response, currentURL) {\n  const {\n    flag,\n    properties\n  } = xhr;\n  const {\n    rawHeaders,\n    statusCode\n  } = response;\n  let byteOffset = 0;\n  const headers = {};\n  const filteredResponseHeaders = [];\n  const headerMap = {};\n  const n = Number(rawHeaders.length);\n  for (let i = 0; i < n; i += 2) {\n    const k = rawHeaders[i];\n    const kl = k.toLowerCase();\n    const v = rawHeaders[i + 1];\n    if (uniqueResponseHeaders.has(kl)) {\n      if (headerMap[kl] !== undefined) {\n        delete headers[headerMap[kl]];\n      }\n      headers[k] = v;\n    } else if (headerMap[kl] !== undefined) {\n      headers[headerMap[kl]] += \", \" + v;\n    } else {\n      headers[k] = v;\n    }\n    headerMap[kl] = k;\n  }\n  const destUrlObj = new URL(currentURL);\n  if (properties.origin !== destUrlObj.origin && destUrlObj.protocol !== \"data:\") {\n    if (!xhrUtils.validCORSHeaders(xhr, response, flag, properties, properties.origin)) {\n      return;\n    }\n    const acehStr = response.headers[\"access-control-expose-headers\"];\n    const aceh = new Set(acehStr ? acehStr.trim().toLowerCase().split(xhrUtils.headerListSeparatorRegexp) : []);\n    for (const header in headers) {\n      const lcHeader = header.toLowerCase();\n      if (!corsSafeResponseHeaders.has(lcHeader) && !aceh.has(lcHeader)) {\n        filteredResponseHeaders.push(header);\n      }\n    }\n  }\n  for (const header in headers) {\n    const lcHeader = header.toLowerCase();\n    if (forbiddenResponseHeaders.has(lcHeader)) {\n      filteredResponseHeaders.push(header);\n    }\n  }\n  xhr.responseURL = destUrlObj.href;\n  xhr.status = statusCode;\n  xhr.statusText = response.statusMessage || HTTP_STATUS_CODES[statusCode] || \"\";\n  properties.responseHeaders = headers;\n  properties.filteredResponseHeaders = filteredResponseHeaders;\n  const contentLength = getResponseHeader(xhr, \"content-length\") || \"0\";\n  const bufferLength = parseInt(contentLength) || 0;\n  const progressObj = {\n    lengthComputable: false\n  };\n  let lastProgressReported;\n  if (bufferLength !== 0) {\n    progressObj.total = bufferLength;\n    progressObj.loaded = 0;\n    progressObj.lengthComputable = true;\n  }\n  // pre-allocate buffer.\n  properties.responseBuffer = Buffer.alloc(properties.bufferStepSize);\n  properties.responseCache = null;\n  properties.responseTextCache = null;\n  properties.responseXMLCache = null;\n  readyStateChange(xhr, READY_STATES.HEADERS_RECEIVED);\n  if (!properties.client) {\n    // The request was aborted in reaction to the readystatechange event.\n    return;\n  }\n\n  // Can't use the client since the client gets the post-ungzipping bytes (which can be greater than the\n  // Content-Length).\n  response.on(\"data\", chunk => {\n    byteOffset += chunk.length;\n    progressObj.loaded = byteOffset;\n  });\n  properties.client.on(\"data\", chunk => {\n    properties.totalReceivedChunkSize += chunk.length;\n    if (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n      properties.bufferStepSize *= 2;\n      while (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n        properties.bufferStepSize *= 2;\n      }\n      const tmpBuf = Buffer.alloc(properties.bufferStepSize);\n      properties.responseBuffer.copy(tmpBuf, 0, 0, properties.responseBuffer.length);\n      properties.responseBuffer = tmpBuf;\n    }\n    chunk.copy(properties.responseBuffer, properties.totalReceivedChunkSize - chunk.length, 0, chunk.length);\n    properties.responseCache = null;\n    properties.responseTextCache = null;\n    properties.responseXMLCache = null;\n    if (xhr.readyState === READY_STATES.HEADERS_RECEIVED) {\n      xhr.readyState = READY_STATES.LOADING;\n    }\n    fireAnEvent(\"readystatechange\", xhr);\n    if (progressObj.total !== progressObj.loaded || properties.totalReceivedChunkSize === byteOffset) {\n      if (lastProgressReported !== progressObj.loaded) {\n        // This is a necessary check in the gzip case where we can be getting new data from the client, as it\n        // un-gzips, but no new data has been gotten from the response, so we should not fire a progress event.\n        lastProgressReported = progressObj.loaded;\n        fireAnEvent(\"progress\", xhr, ProgressEvent, progressObj);\n      }\n    }\n  });\n  properties.client.on(\"end\", () => {\n    clearTimeout(properties.timeoutId);\n    properties.timeoutFn = null;\n    properties.timeoutStart = 0;\n    properties.client = null;\n    if (lastProgressReported !== progressObj.loaded) {\n      // https://github.com/whatwg/xhr/issues/318\n      fireAnEvent(\"progress\", xhr, ProgressEvent, progressObj);\n    }\n    readyStateChange(xhr, READY_STATES.DONE);\n    fireAnEvent(\"load\", xhr, ProgressEvent, progressObj);\n    fireAnEvent(\"loadend\", xhr, ProgressEvent, progressObj);\n  });\n}\nfunction setDispatchProgressEvents(xhr) {\n  const {\n    properties,\n    upload\n  } = xhr;\n  const {\n    client\n  } = properties;\n  let total = 0;\n  let lengthComputable = false;\n  const length = client.headers && parseInt(xhrUtils.getRequestHeader(client.headers, \"content-length\"));\n  if (length) {\n    total = length;\n    lengthComputable = true;\n  }\n  const initProgress = {\n    lengthComputable,\n    total,\n    loaded: 0\n  };\n  if (properties.uploadListener) {\n    fireAnEvent(\"loadstart\", upload, ProgressEvent, initProgress);\n  }\n  client.on(\"request\", req => {\n    req.on(\"response\", () => {\n      properties.uploadComplete = true;\n      if (!properties.uploadListener) {\n        return;\n      }\n      const progress = {\n        lengthComputable,\n        total,\n        loaded: total\n      };\n      fireAnEvent(\"progress\", upload, ProgressEvent, progress);\n      fireAnEvent(\"load\", upload, ProgressEvent, progress);\n      fireAnEvent(\"loadend\", upload, ProgressEvent, progress);\n    });\n  });\n}\nfunction finalMIMEType(xhr) {\n  const {\n    flag\n  } = xhr;\n  return flag.overrideMIMEType || getResponseHeader(xhr, \"content-type\");\n}\nfunction finalCharset(xhr) {\n  const {\n    flag\n  } = xhr;\n  if (flag.overrideCharset) {\n    return flag.overrideCharset;\n  }\n  const parsedContentType = MIMEType.parse(getResponseHeader(xhr, \"content-type\"));\n  if (parsedContentType) {\n    return whatwgEncoding.labelToName(parsedContentType.parameters.get(\"charset\"));\n  }\n  return null;\n}\nfunction getResponseHeader(xhr, lcHeader) {\n  const {\n    properties\n  } = xhr;\n  const keys = Object.keys(properties.responseHeaders);\n  let n = keys.length;\n  while (n--) {\n    const key = keys[n];\n    if (key.toLowerCase() === lcHeader) {\n      return properties.responseHeaders[key];\n    }\n  }\n  return null;\n}\nfunction normalizeHeaderValue(value) {\n  return value.replace(/^[\\x09\\x0A\\x0D\\x20]+/, \"\").replace(/[\\x09\\x0A\\x0D\\x20]+$/, \"\");\n}\nfunction extractBody(bodyInit) {\n  // https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n  // except we represent the body as a Node.js Buffer instead,\n  // or a special case for FormData since we want request to handle that. Probably it would be\n  // cleaner (and allow a future without request) if we did the form encoding ourself.\n\n  if (Blob.isImpl(bodyInit)) {\n    return {\n      buffer: bodyInit._buffer,\n      contentType: bodyInit.type === \"\" ? null : bodyInit.type\n    };\n  } else if (isArrayBuffer(bodyInit)) {\n    return {\n      buffer: Buffer.from(bodyInit),\n      contentType: null\n    };\n  } else if (ArrayBuffer.isView(bodyInit)) {\n    return {\n      buffer: Buffer.from(bodyInit.buffer, bodyInit.byteOffset, bodyInit.byteLength),\n      contentType: null\n    };\n  } else if (FormData.isImpl(bodyInit)) {\n    const formData = [];\n    for (const entry of bodyInit._entries) {\n      let val;\n      if (Blob.isImpl(entry.value)) {\n        const blob = entry.value;\n        val = {\n          name: entry.name,\n          value: blob._buffer,\n          options: {\n            filename: blob.name,\n            contentType: blob.type,\n            knownLength: blob.size\n          }\n        };\n      } else {\n        val = entry;\n      }\n      formData.push(val);\n    }\n    return {\n      formData\n    };\n  }\n\n  // Must be a string\n  return {\n    buffer: Buffer.from(bodyInit, \"utf-8\"),\n    contentType: \"text/plain;charset=UTF-8\"\n  };\n}\nexports.implementation = XMLHttpRequestImpl;","map":{"version":3,"names":["require","HTTP_STATUS_CODES","STATUS_CODES","spawnSync","URL","whatwgEncoding","tough","MIMEType","xhrUtils","DOMException","documentBaseURLSerialized","asciiCaseInsensitiveMatch","idlUtils","Document","Blob","FormData","XMLHttpRequestEventTargetImpl","implementation","XMLHttpRequestUpload","ProgressEvent","isArrayBuffer","parseIntoDocument","fragmentSerialization","setupForSimpleEventAccessors","parseJSONFromBytes","fireAnEvent","copyToArrayBufferInNewRealm","READY_STATES","syncWorkerFile","resolve","tokenRegexp","fieldValueRegexp","forbiddenRequestHeaders","Set","forbiddenResponseHeaders","uniqueResponseHeaders","corsSafeResponseHeaders","allowedRequestMethods","forbiddenRequestMethods","XMLHttpRequestImpl","constructor","window","_ownerDocument","upload","createImpl","readyState","UNSENT","responseURL","status","statusText","flag","synchronous","withCredentials","mimeType","auth","method","undefined","responseType","requestHeaders","referrer","uri","timeout","body","formData","preflight","requestManager","_requestManager","strictSSL","_resourceLoader","_strictSSL","proxy","_proxy","cookieJar","_cookieJar","encoding","_encoding","origin","_origin","userAgent","navigator","properties","beforeSend","send","client","timeoutStart","timeoutId","timeoutFn","responseBuffer","responseCache","responseTextCache","responseXMLCache","responseHeaders","filteredResponseHeaders","error","uploadComplete","uploadListener","abortError","bufferStepSize","totalReceivedChunkSize","LOADING","DONE","create","_globalObject","OPENED","response","tryWrapperForImpl","res","slice","responseText","contentType","finalMIMEType","Uint8Array","type","responseXML","fallbackEncoding","finalCharset","getBOMEncoding","decode","isHTML","isXML","parsed","parse","resText","options","url","lastModified","Date","getResponseHeader","parsingMode","setCookieSync","getCookieStringSync","parseOptions","_parseOptions","close","val","clearTimeout","setTimeout","Math","max","getTime","abort","setResponseToNetworkError","HEADERS_RECEIVED","requestErrorSteps","getAllResponseHeaders","Object","keys","filter","key","indexOf","map","toLowerCase","join","header","lcHeader","find","filtered","open","asynchronous","user","password","test","upperCaseMethod","toUpperCase","has","urlObj","username","pass","href","readyStateChange","overrideMimeType","mime","overrideMIMEType","essence","charset","parameters","get","overrideCharset","labelToName","isImpl","_parsingMode","requireWellFormed","buffer","extractBody","Boolean","existingContentType","getRequestHeader","set","updateRequestHeader","toString","_eventListeners","length","byteLength","flagStr","JSON","stringify","k","v","maxSockets","process","execPath","input","maxBuffer","Infinity","Error","stderr","stdout","resProp","data","Buffer","from","CookieJar","deserializeSync","store","assign","dispatchError","contentLength","bufferLength","parseInt","progressObj","lengthComputable","total","loaded","createClient","on","err","removeAllListeners","receiveResponse","currentURL","destUrlObj","Referer","Origin","protocol","validCORSHeaders","setDispatchProgressEvents","stateChanged","setRequestHeader","value","normalizeHeaderValue","startsWith","n","prototype","xhr","rawHeaders","statusCode","byteOffset","headers","headerMap","Number","i","kl","acehStr","aceh","trim","split","headerListSeparatorRegexp","push","statusMessage","lastProgressReported","alloc","chunk","tmpBuf","copy","initProgress","req","progress","parsedContentType","replace","bodyInit","_buffer","ArrayBuffer","isView","entry","_entries","blob","name","filename","knownLength","size","exports"],"sources":["/Users/feyraf/Desktop/projets/Roma/invest/node_modules/jsdom/lib/jsdom/living/xhr/XMLHttpRequest-impl.js"],"sourcesContent":["\"use strict\";\n\nconst HTTP_STATUS_CODES = require(\"http\").STATUS_CODES;\nconst { spawnSync } = require(\"child_process\");\nconst { URL } = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst tough = require(\"tough-cookie\");\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst xhrUtils = require(\"./xhr-utils\");\nconst DOMException = require(\"../generated/DOMException\");\nconst { documentBaseURLSerialized } = require(\"../helpers/document-base-url\");\nconst { asciiCaseInsensitiveMatch } = require(\"../helpers/strings\");\nconst idlUtils = require(\"../generated/utils\");\nconst Document = require(\"../generated/Document\");\nconst Blob = require(\"../generated/Blob\");\nconst FormData = require(\"../generated/FormData\");\nconst XMLHttpRequestEventTargetImpl = require(\"./XMLHttpRequestEventTarget-impl\").implementation;\nconst XMLHttpRequestUpload = require(\"../generated/XMLHttpRequestUpload\");\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\nconst { isArrayBuffer } = require(\"../generated/utils\");\nconst { parseIntoDocument } = require(\"../../browser/parser\");\nconst { fragmentSerialization } = require(\"../domparsing/serialization\");\nconst { setupForSimpleEventAccessors } = require(\"../helpers/create-event-accessor\");\nconst { parseJSONFromBytes } = require(\"../helpers/json\");\nconst { fireAnEvent } = require(\"../helpers/events\");\nconst { copyToArrayBufferInNewRealm } = require(\"../helpers/binary-data\");\n\nconst { READY_STATES } = xhrUtils;\n\nconst syncWorkerFile = require.resolve ? require.resolve(\"./xhr-sync-worker.js\") : null;\n\nconst tokenRegexp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\nconst fieldValueRegexp = /^[ \\t]*(?:[\\x21-\\x7E\\x80-\\xFF](?:[ \\t][\\x21-\\x7E\\x80-\\xFF])?)*[ \\t]*$/;\n\nconst forbiddenRequestHeaders = new Set([\n  \"accept-charset\",\n  \"accept-encoding\",\n  \"access-control-request-headers\",\n  \"access-control-request-method\",\n  \"connection\",\n  \"content-length\",\n  \"cookie\",\n  \"cookie2\",\n  \"date\",\n  \"dnt\",\n  \"expect\",\n  \"host\",\n  \"keep-alive\",\n  \"origin\",\n  \"referer\",\n  \"te\",\n  \"trailer\",\n  \"transfer-encoding\",\n  \"upgrade\",\n  \"via\"\n]);\nconst forbiddenResponseHeaders = new Set([\n  \"set-cookie\",\n  \"set-cookie2\"\n]);\nconst uniqueResponseHeaders = new Set([\n  \"content-type\",\n  \"content-length\",\n  \"user-agent\",\n  \"referer\",\n  \"host\",\n  \"authorization\",\n  \"proxy-authorization\",\n  \"if-modified-since\",\n  \"if-unmodified-since\",\n  \"from\",\n  \"location\",\n  \"max-forwards\"\n]);\nconst corsSafeResponseHeaders = new Set([\n  \"cache-control\",\n  \"content-language\",\n  \"content-length\",\n  \"content-type\",\n  \"expires\",\n  \"last-modified\",\n  \"pragma\"\n]);\n\nconst allowedRequestMethods = new Set([\"OPTIONS\", \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\"]);\nconst forbiddenRequestMethods = new Set([\"TRACK\", \"TRACE\", \"CONNECT\"]);\n\nclass XMLHttpRequestImpl extends XMLHttpRequestEventTargetImpl {\n  constructor(window) {\n    super(window);\n\n    // Avoid running `_ownerDocument` getter multiple times in the constructor:\n    const { _ownerDocument } = this;\n\n    this.upload = XMLHttpRequestUpload.createImpl(window);\n\n    this.readyState = READY_STATES.UNSENT;\n    this.responseURL = \"\";\n    this.status = 0;\n    this.statusText = \"\";\n\n    this.flag = {\n      synchronous: false,\n      withCredentials: false,\n      mimeType: null,\n      auth: null,\n      method: undefined,\n      responseType: \"\",\n      requestHeaders: {},\n      referrer: _ownerDocument.URL,\n      uri: \"\",\n      timeout: 0,\n      body: undefined,\n      formData: false,\n      preflight: false,\n      requestManager: _ownerDocument._requestManager,\n      strictSSL: window._resourceLoader._strictSSL,\n      proxy: window._resourceLoader._proxy,\n      cookieJar: _ownerDocument._cookieJar,\n      encoding: _ownerDocument._encoding,\n      origin: window._origin,\n      userAgent: window.navigator.userAgent\n    };\n\n    this.properties = {\n      beforeSend: false,\n      send: false,\n      client: null,\n\n      timeoutStart: 0,\n      timeoutId: 0,\n      timeoutFn: null,\n\n      responseBuffer: null,\n      responseCache: null,\n      responseTextCache: null,\n      responseXMLCache: null,\n\n      responseHeaders: {},\n      filteredResponseHeaders: [],\n\n      error: \"\",\n      uploadComplete: false,\n      uploadListener: false,\n\n      // Signifies that we're calling abort() from xhr-utils.js because of a window shutdown.\n      // In that case the termination reason is \"fatal\", not \"end-user abort\".\n      abortError: false,\n\n      cookieJar: _ownerDocument._cookieJar,\n      bufferStepSize: 1 * 1024 * 1024, // pre-allocate buffer increase step size. init value is 1MB\n      totalReceivedChunkSize: 0\n    };\n  }\n\n  get responseType() {\n    return this.flag.responseType;\n  }\n  set responseType(responseType) {\n    const { flag } = this;\n    if (this.readyState === READY_STATES.LOADING || this.readyState === READY_STATES.DONE) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    if (this.readyState === READY_STATES.OPENED && flag.synchronous) {\n      throw DOMException.create(this._globalObject, [\n        \"The object does not support the operation or argument.\",\n        \"InvalidAccessError\"\n      ]);\n    }\n    flag.responseType = responseType;\n  }\n\n  get response() {\n    const { properties } = this;\n    if (properties.responseCache) {\n      // Needed because of: https://github.com/jsdom/webidl2js/issues/149\n      return idlUtils.tryWrapperForImpl(properties.responseCache);\n    }\n    let res;\n\n    const responseBuffer = properties.responseBuffer ?\n      properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n      null;\n\n    switch (this.responseType) {\n      case \"\":\n      case \"text\": {\n        res = this.responseText;\n        break;\n      }\n      case \"arraybuffer\": {\n        if (!responseBuffer) {\n          return null;\n        }\n        res = copyToArrayBufferInNewRealm(responseBuffer, this._globalObject);\n        break;\n      }\n      case \"blob\": {\n        if (!responseBuffer) {\n          return null;\n        }\n        const contentType = finalMIMEType(this);\n        res = Blob.createImpl(this._globalObject, [\n          [new Uint8Array(responseBuffer)],\n          { type: contentType || \"\" }\n        ]);\n        break;\n      }\n      case \"document\": {\n        res = this.responseXML;\n        break;\n      }\n      case \"json\": {\n        if (this.readyState !== READY_STATES.DONE || !responseBuffer) {\n          res = null;\n        }\n\n        try {\n          res = parseJSONFromBytes(responseBuffer);\n        } catch {\n          res = null;\n        }\n        break;\n      }\n    }\n    properties.responseCache = res;\n    // Needed because of: https://github.com/jsdom/webidl2js/issues/149\n    return idlUtils.tryWrapperForImpl(res);\n  }\n  get responseText() {\n    const { properties } = this;\n    if (this.responseType !== \"\" && this.responseType !== \"text\") {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    if (this.readyState !== READY_STATES.LOADING && this.readyState !== READY_STATES.DONE) {\n      return \"\";\n    }\n    if (properties.responseTextCache) {\n      return properties.responseTextCache;\n    }\n    const responseBuffer = properties.responseBuffer ?\n      properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n      null;\n\n    if (!responseBuffer) {\n      return \"\";\n    }\n\n    const fallbackEncoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n    const res = whatwgEncoding.decode(responseBuffer, fallbackEncoding);\n\n    properties.responseTextCache = res;\n    return res;\n  }\n  get responseXML() {\n    const { flag, properties } = this;\n    if (this.responseType !== \"\" && this.responseType !== \"document\") {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    if (this.readyState !== READY_STATES.DONE) {\n      return null;\n    }\n    if (properties.responseXMLCache) {\n      return properties.responseXMLCache;\n    }\n    const responseBuffer = properties.responseBuffer ?\n      properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n      null;\n\n    if (!responseBuffer) {\n      return null;\n    }\n\n    const contentType = finalMIMEType(this);\n    let isHTML = false;\n    let isXML = false;\n    const parsed = MIMEType.parse(contentType);\n    if (parsed) {\n      isHTML = parsed.isHTML();\n      isXML = parsed.isXML();\n      if (!isXML && !isHTML) {\n        return null;\n      }\n    }\n\n    if (this.responseType === \"\" && isHTML) {\n      return null;\n    }\n\n    const encoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n    const resText = whatwgEncoding.decode(responseBuffer, encoding);\n\n    if (!resText) {\n      return null;\n    }\n    const res = Document.createImpl(this._globalObject, [], {\n      options: {\n        url: flag.uri,\n        lastModified: new Date(getResponseHeader(this, \"last-modified\")),\n        parsingMode: isHTML ? \"html\" : \"xml\",\n        cookieJar: { setCookieSync: () => undefined, getCookieStringSync: () => \"\" },\n        encoding,\n        parseOptions: this._ownerDocument._parseOptions\n      }\n    });\n    try {\n      parseIntoDocument(resText, res);\n    } catch {\n      properties.responseXMLCache = null;\n      return null;\n    }\n    res.close();\n    properties.responseXMLCache = res;\n    return res;\n  }\n\n  get timeout() {\n    return this.flag.timeout;\n  }\n  set timeout(val) {\n    const { flag, properties } = this;\n    if (flag.synchronous) {\n      throw DOMException.create(this._globalObject, [\n        \"The object does not support the operation or argument.\",\n        \"InvalidAccessError\"\n      ]);\n    }\n    flag.timeout = val;\n    clearTimeout(properties.timeoutId);\n    if (val > 0 && properties.timeoutFn) {\n      properties.timeoutId = setTimeout(\n        properties.timeoutFn,\n        Math.max(0, val - ((new Date()).getTime() - properties.timeoutStart))\n      );\n    } else {\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n    }\n  }\n\n  get withCredentials() {\n    return this.flag.withCredentials;\n  }\n  set withCredentials(val) {\n    const { flag, properties } = this;\n    if (!(this.readyState === READY_STATES.UNSENT || this.readyState === READY_STATES.OPENED)) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    if (properties.send) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    flag.withCredentials = val;\n  }\n\n  abort() {\n    const { properties } = this;\n    // Terminate the request\n    clearTimeout(properties.timeoutId);\n    properties.timeoutFn = null;\n    properties.timeoutStart = 0;\n\n    const { client } = properties;\n    if (client) {\n      client.abort();\n      properties.client = null;\n    }\n\n    if (properties.abortError) {\n      // Special case that ideally shouldn't be going through the public API at all.\n      // Run the https://xhr.spec.whatwg.org/#handle-errors \"fatal\" steps.\n      this.readyState = READY_STATES.DONE;\n      properties.send = false;\n      xhrUtils.setResponseToNetworkError(this);\n      return;\n    }\n\n    if ((this.readyState === READY_STATES.OPENED && properties.send) ||\n        this.readyState === READY_STATES.HEADERS_RECEIVED ||\n        this.readyState === READY_STATES.LOADING) {\n      xhrUtils.requestErrorSteps(this, \"abort\");\n    }\n\n    if (this.readyState === READY_STATES.DONE) {\n      this.readyState = READY_STATES.UNSENT;\n\n      xhrUtils.setResponseToNetworkError(this);\n    }\n  }\n  getAllResponseHeaders() {\n    const { properties, readyState } = this;\n    if (readyState === READY_STATES.UNSENT || readyState === READY_STATES.OPENED) {\n      return \"\";\n    }\n    return Object.keys(properties.responseHeaders)\n      .filter(key => properties.filteredResponseHeaders.indexOf(key) === -1)\n      .map(key => [key.toLowerCase(), properties.responseHeaders[key]].join(\": \"))\n      .join(\"\\r\\n\");\n  }\n\n  getResponseHeader(header) {\n    const { properties, readyState } = this;\n    if (readyState === READY_STATES.UNSENT || readyState === READY_STATES.OPENED) {\n      return null;\n    }\n    const lcHeader = header.toLowerCase();\n    if (properties.filteredResponseHeaders.find(filtered => lcHeader === filtered.toLowerCase())) {\n      return null;\n    }\n    return getResponseHeader(this, lcHeader);\n  }\n\n  open(method, uri, asynchronous, user, password) {\n    const { flag, properties, _ownerDocument } = this;\n    if (!_ownerDocument) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    if (!tokenRegexp.test(method)) {\n      throw DOMException.create(this._globalObject, [\n        \"The string did not match the expected pattern.\",\n        \"SyntaxError\"\n      ]);\n    }\n    const upperCaseMethod = method.toUpperCase();\n    if (forbiddenRequestMethods.has(upperCaseMethod)) {\n      throw DOMException.create(this._globalObject, [\"The operation is insecure.\", \"SecurityError\"]);\n    }\n\n    const { client } = properties;\n    if (client && typeof client.abort === \"function\") {\n      client.abort();\n    }\n\n    if (allowedRequestMethods.has(upperCaseMethod)) {\n      method = upperCaseMethod;\n    }\n    if (typeof asynchronous !== \"undefined\") {\n      flag.synchronous = !asynchronous;\n    } else {\n      flag.synchronous = false;\n    }\n    if (flag.responseType && flag.synchronous) {\n      throw DOMException.create(this._globalObject, [\n        \"The object does not support the operation or argument.\",\n        \"InvalidAccessError\"\n      ]);\n    }\n    if (flag.synchronous && flag.timeout) {\n      throw DOMException.create(this._globalObject, [\n        \"The object does not support the operation or argument.\",\n        \"InvalidAccessError\"\n      ]);\n    }\n    flag.method = method;\n\n    let urlObj;\n    try {\n      urlObj = new URL(uri, documentBaseURLSerialized(_ownerDocument));\n    } catch {\n      throw DOMException.create(this._globalObject, [\n        \"The string did not match the expected pattern.\",\n        \"SyntaxError\"\n      ]);\n    }\n\n    if (user || (password && !urlObj.username)) {\n      flag.auth = {\n        user,\n        pass: password\n      };\n      urlObj.username = \"\";\n      urlObj.password = \"\";\n    }\n\n    flag.uri = urlObj.href;\n    flag.requestHeaders = {};\n    flag.preflight = false;\n\n    properties.send = false;\n    properties.uploadListener = false;\n    properties.abortError = false;\n    this.responseURL = \"\";\n    readyStateChange(this, READY_STATES.OPENED);\n  }\n\n  overrideMimeType(mime) {\n    const { readyState } = this;\n    if (readyState === READY_STATES.LOADING || readyState === READY_STATES.DONE) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    this.flag.overrideMIMEType = \"application/octet-stream\";\n\n    // Waiting for better spec: https://github.com/whatwg/xhr/issues/157\n    const parsed = MIMEType.parse(mime);\n    if (parsed) {\n      this.flag.overrideMIMEType = parsed.essence;\n\n      const charset = parsed.parameters.get(\"charset\");\n      if (charset) {\n        this.flag.overrideCharset = whatwgEncoding.labelToName(charset);\n      }\n    }\n  }\n\n  // TODO: Add support for URLSearchParams and ReadableStream\n  send(body) {\n    const { flag, properties, upload, _ownerDocument } = this;\n    // Not per spec, but per tests: https://github.com/whatwg/xhr/issues/65\n    if (!_ownerDocument) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    if (this.readyState !== READY_STATES.OPENED || properties.send) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    properties.beforeSend = true;\n\n    try {\n      if (flag.method === \"GET\" || flag.method === \"HEAD\") {\n        body = null;\n      }\n\n      if (body !== null) {\n        let encoding = null;\n        let mimeType = null;\n\n        if (Document.isImpl(body)) {\n          encoding = \"UTF-8\";\n          mimeType = (body._parsingMode === \"html\" ? \"text/html\" : \"application/xml\") + \";charset=UTF-8\";\n          flag.body = fragmentSerialization(body, { requireWellFormed: false });\n        } else {\n          if (typeof body === \"string\") {\n            encoding = \"UTF-8\";\n          }\n          const { buffer, formData, contentType } = extractBody(body);\n          mimeType = contentType;\n          flag.body = buffer || formData;\n          flag.formData = Boolean(formData);\n        }\n\n        const existingContentType = xhrUtils.getRequestHeader(flag.requestHeaders, \"content-type\");\n        if (mimeType !== null && existingContentType === null) {\n          flag.requestHeaders[\"Content-Type\"] = mimeType;\n        } else if (existingContentType !== null && encoding !== null) {\n          // Waiting for better spec: https://github.com/whatwg/xhr/issues/188. This seems like a good guess at what\n          // the spec will be, in the meantime.\n          const parsed = MIMEType.parse(existingContentType);\n          if (parsed) {\n            const charset = parsed.parameters.get(\"charset\");\n            if (charset && !asciiCaseInsensitiveMatch(charset, encoding) && encoding !== null) {\n              parsed.parameters.set(\"charset\", encoding);\n              xhrUtils.updateRequestHeader(flag.requestHeaders, \"content-type\", parsed.toString());\n            }\n          }\n        }\n      }\n    } finally {\n      if (properties.beforeSend) {\n        properties.beforeSend = false;\n      } else {\n        throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n      }\n    }\n\n    if (Object.keys(upload._eventListeners).length > 0) {\n      properties.uploadListener = true;\n    }\n\n    // request doesn't like zero-length bodies\n    if (flag.body && flag.body.byteLength === 0) {\n      flag.body = null;\n    }\n\n    if (flag.synchronous) {\n      const flagStr = JSON.stringify(flag, function (k, v) {\n        if (this === flag && k === \"requestManager\") {\n          return null;\n        }\n        if (this === flag && k === \"pool\" && v) {\n          return { maxSockets: v.maxSockets };\n        }\n        return v;\n      });\n      const res = spawnSync(\n        process.execPath,\n        [syncWorkerFile],\n        { input: flagStr, maxBuffer: Infinity }\n      );\n      if (res.status !== 0) {\n        throw new Error(res.stderr.toString());\n      }\n      if (res.error) {\n        if (typeof res.error === \"string\") {\n          res.error = new Error(res.error);\n        }\n        throw res.error;\n      }\n\n      const response = JSON.parse(res.stdout.toString());\n      const resProp = response.properties;\n      if (resProp.responseBuffer && resProp.responseBuffer.data) {\n        resProp.responseBuffer = Buffer.from(resProp.responseBuffer.data);\n      }\n      if (resProp.cookieJar) {\n        resProp.cookieJar = tough.CookieJar.deserializeSync(\n          resProp.cookieJar,\n          _ownerDocument._cookieJar.store\n        );\n      }\n\n      this.readyState = READY_STATES.LOADING;\n      this.status = response.status;\n      this.statusText = response.statusText;\n      this.responseURL = response.responseURL;\n      Object.assign(this.properties, response.properties);\n\n      if (resProp.error) {\n        xhrUtils.dispatchError(this);\n        throw DOMException.create(this._globalObject, [resProp.error, \"NetworkError\"]);\n      } else {\n        const { responseBuffer } = properties;\n        const contentLength = getResponseHeader(this, \"content-length\") || \"0\";\n        const bufferLength = parseInt(contentLength) || responseBuffer.length;\n        const progressObj = { lengthComputable: false };\n        if (bufferLength !== 0) {\n          progressObj.total = bufferLength;\n          progressObj.loaded = bufferLength;\n          progressObj.lengthComputable = true;\n        }\n        fireAnEvent(\"progress\", this, ProgressEvent, progressObj);\n        readyStateChange(this, READY_STATES.DONE);\n        fireAnEvent(\"load\", this, ProgressEvent, progressObj);\n        fireAnEvent(\"loadend\", this, ProgressEvent, progressObj);\n      }\n    } else {\n      properties.send = true;\n\n      fireAnEvent(\"loadstart\", this, ProgressEvent);\n\n      const client = xhrUtils.createClient(this);\n\n      properties.client = client;\n      // For new client, reset totalReceivedChunkSize and bufferStepSize\n      properties.totalReceivedChunkSize = 0;\n      properties.bufferStepSize = 1 * 1024 * 1024;\n\n      properties.origin = flag.origin;\n\n      client.on(\"error\", err => {\n        client.removeAllListeners();\n        properties.error = err;\n        xhrUtils.dispatchError(this);\n      });\n\n      client.on(\"response\", (res, url) => receiveResponse(this, res, url));\n\n      client.on(\"redirect\", (response, requestHeaders, currentURL) => {\n        const destUrlObj = new URL(requestHeaders.Referer);\n        const urlObj = new URL(currentURL);\n\n        if (destUrlObj.origin !== urlObj.origin && destUrlObj.origin !== flag.origin) {\n          properties.origin = \"null\";\n        }\n\n        requestHeaders.Origin = properties.origin;\n\n        if (flag.origin !== destUrlObj.origin &&\n            destUrlObj.protocol !== \"data:\") {\n          if (!xhrUtils.validCORSHeaders(this, response, flag, properties, flag.origin)) {\n            return;\n          }\n          if (urlObj.username || urlObj.password) {\n            properties.error = \"Userinfo forbidden in cors redirect\";\n            xhrUtils.dispatchError(this);\n          }\n        }\n      });\n      if (body !== null && body !== \"\") {\n        properties.uploadComplete = false;\n        setDispatchProgressEvents(this);\n      } else {\n        properties.uploadComplete = true;\n      }\n      if (this.timeout > 0) {\n        properties.timeoutStart = (new Date()).getTime();\n        properties.timeoutFn = () => {\n          client.abort();\n          if (!(this.readyState === READY_STATES.UNSENT ||\n              (this.readyState === READY_STATES.OPENED && !properties.send) ||\n              this.readyState === READY_STATES.DONE)) {\n            properties.send = false;\n            let stateChanged = false;\n            if (!properties.uploadComplete) {\n              fireAnEvent(\"progress\", upload, ProgressEvent);\n              readyStateChange(this, READY_STATES.DONE);\n              fireAnEvent(\"timeout\", upload, ProgressEvent);\n              fireAnEvent(\"loadend\", upload, ProgressEvent);\n              stateChanged = true;\n            }\n            fireAnEvent(\"progress\", this, ProgressEvent);\n            if (!stateChanged) {\n              readyStateChange(this, READY_STATES.DONE);\n            }\n            fireAnEvent(\"timeout\", this, ProgressEvent);\n            fireAnEvent(\"loadend\", this, ProgressEvent);\n          }\n          this.readyState = READY_STATES.UNSENT;\n        };\n        properties.timeoutId = setTimeout(properties.timeoutFn, this.timeout);\n      }\n    }\n  }\n\n  setRequestHeader(header, value) {\n    const { flag, properties } = this;\n\n    if (this.readyState !== READY_STATES.OPENED || properties.send) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    value = normalizeHeaderValue(value);\n\n    if (!tokenRegexp.test(header) || !fieldValueRegexp.test(value)) {\n      throw DOMException.create(this._globalObject, [\n        \"The string did not match the expected pattern.\",\n        \"SyntaxError\"\n      ]);\n    }\n\n    const lcHeader = header.toLowerCase();\n\n    if (forbiddenRequestHeaders.has(lcHeader) || lcHeader.startsWith(\"sec-\") || lcHeader.startsWith(\"proxy-\")) {\n      return;\n    }\n\n    const keys = Object.keys(flag.requestHeaders);\n    let n = keys.length;\n    while (n--) {\n      const key = keys[n];\n      if (key.toLowerCase() === lcHeader) {\n        flag.requestHeaders[key] += \", \" + value;\n        return;\n      }\n    }\n    flag.requestHeaders[header] = value;\n  }\n}\n\nsetupForSimpleEventAccessors(XMLHttpRequestImpl.prototype, [\"readystatechange\"]);\n\nfunction readyStateChange(xhr, readyState) {\n  if (xhr.readyState === readyState) {\n    return;\n  }\n\n  xhr.readyState = readyState;\n\n  fireAnEvent(\"readystatechange\", xhr);\n}\n\nfunction receiveResponse(xhr, response, currentURL) {\n  const { flag, properties } = xhr;\n  const { rawHeaders, statusCode } = response;\n\n  let byteOffset = 0;\n\n  const headers = {};\n  const filteredResponseHeaders = [];\n  const headerMap = {};\n  const n = Number(rawHeaders.length);\n  for (let i = 0; i < n; i += 2) {\n    const k = rawHeaders[i];\n    const kl = k.toLowerCase();\n    const v = rawHeaders[i + 1];\n    if (uniqueResponseHeaders.has(kl)) {\n      if (headerMap[kl] !== undefined) {\n        delete headers[headerMap[kl]];\n      }\n      headers[k] = v;\n    } else if (headerMap[kl] !== undefined) {\n      headers[headerMap[kl]] += \", \" + v;\n    } else {\n      headers[k] = v;\n    }\n    headerMap[kl] = k;\n  }\n\n  const destUrlObj = new URL(currentURL);\n  if (properties.origin !== destUrlObj.origin &&\n      destUrlObj.protocol !== \"data:\") {\n    if (!xhrUtils.validCORSHeaders(xhr, response, flag, properties, properties.origin)) {\n      return;\n    }\n    const acehStr = response.headers[\"access-control-expose-headers\"];\n    const aceh = new Set(acehStr ? acehStr.trim().toLowerCase().split(xhrUtils.headerListSeparatorRegexp) : []);\n    for (const header in headers) {\n      const lcHeader = header.toLowerCase();\n      if (!corsSafeResponseHeaders.has(lcHeader) && !aceh.has(lcHeader)) {\n        filteredResponseHeaders.push(header);\n      }\n    }\n  }\n\n  for (const header in headers) {\n    const lcHeader = header.toLowerCase();\n    if (forbiddenResponseHeaders.has(lcHeader)) {\n      filteredResponseHeaders.push(header);\n    }\n  }\n\n  xhr.responseURL = destUrlObj.href;\n\n  xhr.status = statusCode;\n  xhr.statusText = response.statusMessage || HTTP_STATUS_CODES[statusCode] || \"\";\n\n  properties.responseHeaders = headers;\n  properties.filteredResponseHeaders = filteredResponseHeaders;\n\n  const contentLength = getResponseHeader(xhr, \"content-length\") || \"0\";\n  const bufferLength = parseInt(contentLength) || 0;\n  const progressObj = { lengthComputable: false };\n  let lastProgressReported;\n  if (bufferLength !== 0) {\n    progressObj.total = bufferLength;\n    progressObj.loaded = 0;\n    progressObj.lengthComputable = true;\n  }\n  // pre-allocate buffer.\n  properties.responseBuffer = Buffer.alloc(properties.bufferStepSize);\n  properties.responseCache = null;\n  properties.responseTextCache = null;\n  properties.responseXMLCache = null;\n  readyStateChange(xhr, READY_STATES.HEADERS_RECEIVED);\n\n  if (!properties.client) {\n    // The request was aborted in reaction to the readystatechange event.\n    return;\n  }\n\n  // Can't use the client since the client gets the post-ungzipping bytes (which can be greater than the\n  // Content-Length).\n  response.on(\"data\", chunk => {\n    byteOffset += chunk.length;\n    progressObj.loaded = byteOffset;\n  });\n\n  properties.client.on(\"data\", chunk => {\n    properties.totalReceivedChunkSize += chunk.length;\n    if (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n      properties.bufferStepSize *= 2;\n      while (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n        properties.bufferStepSize *= 2;\n      }\n      const tmpBuf = Buffer.alloc(properties.bufferStepSize);\n      properties.responseBuffer.copy(tmpBuf, 0, 0, properties.responseBuffer.length);\n      properties.responseBuffer = tmpBuf;\n    }\n    chunk.copy(properties.responseBuffer, properties.totalReceivedChunkSize - chunk.length, 0, chunk.length);\n    properties.responseCache = null;\n    properties.responseTextCache = null;\n    properties.responseXMLCache = null;\n\n    if (xhr.readyState === READY_STATES.HEADERS_RECEIVED) {\n      xhr.readyState = READY_STATES.LOADING;\n    }\n    fireAnEvent(\"readystatechange\", xhr);\n\n    if (progressObj.total !== progressObj.loaded || properties.totalReceivedChunkSize === byteOffset) {\n      if (lastProgressReported !== progressObj.loaded) {\n        // This is a necessary check in the gzip case where we can be getting new data from the client, as it\n        // un-gzips, but no new data has been gotten from the response, so we should not fire a progress event.\n        lastProgressReported = progressObj.loaded;\n        fireAnEvent(\"progress\", xhr, ProgressEvent, progressObj);\n      }\n    }\n  });\n  properties.client.on(\"end\", () => {\n    clearTimeout(properties.timeoutId);\n    properties.timeoutFn = null;\n    properties.timeoutStart = 0;\n    properties.client = null;\n    if (lastProgressReported !== progressObj.loaded) {\n      // https://github.com/whatwg/xhr/issues/318\n      fireAnEvent(\"progress\", xhr, ProgressEvent, progressObj);\n    }\n    readyStateChange(xhr, READY_STATES.DONE);\n    fireAnEvent(\"load\", xhr, ProgressEvent, progressObj);\n    fireAnEvent(\"loadend\", xhr, ProgressEvent, progressObj);\n  });\n}\n\nfunction setDispatchProgressEvents(xhr) {\n  const { properties, upload } = xhr;\n  const { client } = properties;\n\n  let total = 0;\n  let lengthComputable = false;\n  const length = client.headers && parseInt(xhrUtils.getRequestHeader(client.headers, \"content-length\"));\n  if (length) {\n    total = length;\n    lengthComputable = true;\n  }\n  const initProgress = {\n    lengthComputable,\n    total,\n    loaded: 0\n  };\n\n  if (properties.uploadListener) {\n    fireAnEvent(\"loadstart\", upload, ProgressEvent, initProgress);\n  }\n\n  client.on(\"request\", req => {\n    req.on(\"response\", () => {\n      properties.uploadComplete = true;\n\n      if (!properties.uploadListener) {\n        return;\n      }\n\n      const progress = {\n        lengthComputable,\n        total,\n        loaded: total\n      };\n      fireAnEvent(\"progress\", upload, ProgressEvent, progress);\n      fireAnEvent(\"load\", upload, ProgressEvent, progress);\n      fireAnEvent(\"loadend\", upload, ProgressEvent, progress);\n    });\n  });\n}\n\nfunction finalMIMEType(xhr) {\n  const { flag } = xhr;\n  return flag.overrideMIMEType || getResponseHeader(xhr, \"content-type\");\n}\n\nfunction finalCharset(xhr) {\n  const { flag } = xhr;\n  if (flag.overrideCharset) {\n    return flag.overrideCharset;\n  }\n  const parsedContentType = MIMEType.parse(getResponseHeader(xhr, \"content-type\"));\n  if (parsedContentType) {\n    return whatwgEncoding.labelToName(parsedContentType.parameters.get(\"charset\"));\n  }\n  return null;\n}\n\nfunction getResponseHeader(xhr, lcHeader) {\n  const { properties } = xhr;\n  const keys = Object.keys(properties.responseHeaders);\n  let n = keys.length;\n  while (n--) {\n    const key = keys[n];\n    if (key.toLowerCase() === lcHeader) {\n      return properties.responseHeaders[key];\n    }\n  }\n  return null;\n}\n\nfunction normalizeHeaderValue(value) {\n  return value.replace(/^[\\x09\\x0A\\x0D\\x20]+/, \"\").replace(/[\\x09\\x0A\\x0D\\x20]+$/, \"\");\n}\n\nfunction extractBody(bodyInit) {\n  // https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n  // except we represent the body as a Node.js Buffer instead,\n  // or a special case for FormData since we want request to handle that. Probably it would be\n  // cleaner (and allow a future without request) if we did the form encoding ourself.\n\n  if (Blob.isImpl(bodyInit)) {\n    return {\n      buffer: bodyInit._buffer,\n      contentType: bodyInit.type === \"\" ? null : bodyInit.type\n    };\n  } else if (isArrayBuffer(bodyInit)) {\n    return {\n      buffer: Buffer.from(bodyInit),\n      contentType: null\n    };\n  } else if (ArrayBuffer.isView(bodyInit)) {\n    return {\n      buffer: Buffer.from(bodyInit.buffer, bodyInit.byteOffset, bodyInit.byteLength),\n      contentType: null\n    };\n  } else if (FormData.isImpl(bodyInit)) {\n    const formData = [];\n    for (const entry of bodyInit._entries) {\n      let val;\n      if (Blob.isImpl(entry.value)) {\n        const blob = entry.value;\n        val = {\n          name: entry.name,\n          value: blob._buffer,\n          options: {\n            filename: blob.name,\n            contentType: blob.type,\n            knownLength: blob.size\n          }\n        };\n      } else {\n        val = entry;\n      }\n\n      formData.push(val);\n    }\n\n    return { formData };\n  }\n\n  // Must be a string\n  return {\n    buffer: Buffer.from(bodyInit, \"utf-8\"),\n    contentType: \"text/plain;charset=UTF-8\"\n  };\n}\n\nexports.implementation = XMLHttpRequestImpl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}