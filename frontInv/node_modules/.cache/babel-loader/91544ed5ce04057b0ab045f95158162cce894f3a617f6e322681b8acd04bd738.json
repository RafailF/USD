{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tokenizer = exports.TokenizerMode = void 0;\nconst preprocessor_js_1 = require(\"./preprocessor.js\");\nconst unicode_js_1 = require(\"../common/unicode.js\");\nconst token_js_1 = require(\"../common/token.js\");\nconst decode_js_1 = require(\"entities/lib/decode.js\");\nconst error_codes_js_1 = require(\"../common/error-codes.js\");\nconst html_js_1 = require(\"../common/html.js\");\n//States\nvar State;\n(function (State) {\n  State[State[\"DATA\"] = 0] = \"DATA\";\n  State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n  State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n  State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n  State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n  State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n  State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n  State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n  State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n  State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n  State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n  State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n  State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n  State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n  State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n  State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n  State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n  State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n  State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n  State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n  State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n  State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n  State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n  State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n  State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n  State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n  State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n  State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n  State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n  State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n  State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n  State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n  State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n  State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n  State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n  State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n  State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n  State[State[\"AMBIGUOUS_AMPERSAND\"] = 72] = \"AMBIGUOUS_AMPERSAND\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexports.TokenizerMode = {\n  DATA: State.DATA,\n  RCDATA: State.RCDATA,\n  RAWTEXT: State.RAWTEXT,\n  SCRIPT_DATA: State.SCRIPT_DATA,\n  PLAINTEXT: State.PLAINTEXT,\n  CDATA_SECTION: State.CDATA_SECTION\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.DIGIT_0 && cp <= unicode_js_1.CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction toAsciiLower(cp) {\n  return cp + 32;\n}\nfunction isWhitespace(cp) {\n  return cp === unicode_js_1.CODE_POINTS.SPACE || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.TABULATION || cp === unicode_js_1.CODE_POINTS.FORM_FEED;\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n  return isWhitespace(cp) || cp === unicode_js_1.CODE_POINTS.SOLIDUS || cp === unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN;\n}\nfunction getErrorForNumericCharacterReference(code) {\n  if (code === unicode_js_1.CODE_POINTS.NULL) {\n    return error_codes_js_1.ERR.nullCharacterReference;\n  } else if (code > 1114111) {\n    return error_codes_js_1.ERR.characterReferenceOutsideUnicodeRange;\n  } else if ((0, unicode_js_1.isSurrogate)(code)) {\n    return error_codes_js_1.ERR.surrogateCharacterReference;\n  } else if ((0, unicode_js_1.isUndefinedCodePoint)(code)) {\n    return error_codes_js_1.ERR.noncharacterCharacterReference;\n  } else if ((0, unicode_js_1.isControlCodePoint)(code) || code === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n    return error_codes_js_1.ERR.controlCharacterReference;\n  }\n  return null;\n}\n//Tokenizer\nclass Tokenizer {\n  constructor(options, handler) {\n    this.options = options;\n    this.handler = handler;\n    this.paused = false;\n    /** Ensures that the parsing loop isn't run multiple times at once. */\n    this.inLoop = false;\n    /**\n     * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n     * and that it is not an integration point for either MathML or HTML.\n     *\n     * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n     */\n    this.inForeignNode = false;\n    this.lastStartTagName = '';\n    this.active = false;\n    this.state = State.DATA;\n    this.returnState = State.DATA;\n    this.entityStartPos = 0;\n    this.consumedAfterSnapshot = -1;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = {\n      name: '',\n      value: ''\n    };\n    this.preprocessor = new preprocessor_js_1.Preprocessor(handler);\n    this.currentLocation = this.getCurrentLocation(-1);\n    this.entityDecoder = new decode_js_1.EntityDecoder(decode_js_1.htmlDecodeTree, (cp, consumed) => {\n      // Note: Set `pos` _before_ flushing, as flushing might drop\n      // the current chunk and invalidate `entityStartPos`.\n      this.preprocessor.pos = this.entityStartPos + consumed - 1;\n      this._flushCodePointConsumedAsCharacterReference(cp);\n    }, handler.onParseError ? {\n      missingSemicolonAfterCharacterReference: () => {\n        this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference, 1);\n      },\n      absenceOfDigitsInNumericCharacterReference: consumed => {\n        this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + consumed);\n      },\n      validateNumericCharacterReference: code => {\n        const error = getErrorForNumericCharacterReference(code);\n        if (error) this._err(error, 1);\n      }\n    } : undefined);\n  }\n  //Errors\n  _err(code, cpOffset = 0) {\n    var _a, _b;\n    (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code, cpOffset));\n  }\n  // NOTE: `offset` may never run across line boundaries.\n  getCurrentLocation(offset) {\n    if (!this.options.sourceCodeLocationInfo) {\n      return null;\n    }\n    return {\n      startLine: this.preprocessor.line,\n      startCol: this.preprocessor.col - offset,\n      startOffset: this.preprocessor.offset - offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    };\n  }\n  _runParsingLoop() {\n    if (this.inLoop) return;\n    this.inLoop = true;\n    while (this.active && !this.paused) {\n      this.consumedAfterSnapshot = 0;\n      const cp = this._consume();\n      if (!this._ensureHibernation()) {\n        this._callState(cp);\n      }\n    }\n    this.inLoop = false;\n  }\n  //API\n  pause() {\n    this.paused = true;\n  }\n  resume(writeCallback) {\n    if (!this.paused) {\n      throw new Error('Parser was already resumed');\n    }\n    this.paused = false;\n    // Necessary for synchronous resume.\n    if (this.inLoop) return;\n    this._runParsingLoop();\n    if (!this.paused) {\n      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n    }\n  }\n  write(chunk, isLastChunk, writeCallback) {\n    this.active = true;\n    this.preprocessor.write(chunk, isLastChunk);\n    this._runParsingLoop();\n    if (!this.paused) {\n      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n    }\n  }\n  insertHtmlAtCurrentPos(chunk) {\n    this.active = true;\n    this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    this._runParsingLoop();\n  }\n  //Hibernation\n  _ensureHibernation() {\n    if (this.preprocessor.endOfChunkHit) {\n      this.preprocessor.retreat(this.consumedAfterSnapshot);\n      this.consumedAfterSnapshot = 0;\n      this.active = false;\n      return true;\n    }\n    return false;\n  }\n  //Consumption\n  _consume() {\n    this.consumedAfterSnapshot++;\n    return this.preprocessor.advance();\n  }\n  _advanceBy(count) {\n    this.consumedAfterSnapshot += count;\n    for (let i = 0; i < count; i++) {\n      this.preprocessor.advance();\n    }\n  }\n  _consumeSequenceIfMatch(pattern, caseSensitive) {\n    if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n      // We will already have consumed one character before calling this method.\n      this._advanceBy(pattern.length - 1);\n      return true;\n    }\n    return false;\n  }\n  //Token creation\n  _createStartTagToken() {\n    this.currentToken = {\n      type: token_js_1.TokenType.START_TAG,\n      tagName: '',\n      tagID: html_js_1.TAG_ID.UNKNOWN,\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: [],\n      location: this.getCurrentLocation(1)\n    };\n  }\n  _createEndTagToken() {\n    this.currentToken = {\n      type: token_js_1.TokenType.END_TAG,\n      tagName: '',\n      tagID: html_js_1.TAG_ID.UNKNOWN,\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: [],\n      location: this.getCurrentLocation(2)\n    };\n  }\n  _createCommentToken(offset) {\n    this.currentToken = {\n      type: token_js_1.TokenType.COMMENT,\n      data: '',\n      location: this.getCurrentLocation(offset)\n    };\n  }\n  _createDoctypeToken(initialName) {\n    this.currentToken = {\n      type: token_js_1.TokenType.DOCTYPE,\n      name: initialName,\n      forceQuirks: false,\n      publicId: null,\n      systemId: null,\n      location: this.currentLocation\n    };\n  }\n  _createCharacterToken(type, chars) {\n    this.currentCharacterToken = {\n      type,\n      chars,\n      location: this.currentLocation\n    };\n  }\n  //Tag attributes\n  _createAttr(attrNameFirstCh) {\n    this.currentAttr = {\n      name: attrNameFirstCh,\n      value: ''\n    };\n    this.currentLocation = this.getCurrentLocation(0);\n  }\n  _leaveAttrName() {\n    var _a;\n    var _b;\n    const token = this.currentToken;\n    if ((0, token_js_1.getTokenAttr)(token, this.currentAttr.name) === null) {\n      token.attrs.push(this.currentAttr);\n      if (token.location && this.currentLocation) {\n        const attrLocations = (_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : _b.attrs = Object.create(null);\n        attrLocations[this.currentAttr.name] = this.currentLocation;\n        // Set end location\n        this._leaveAttrValue();\n      }\n    } else {\n      this._err(error_codes_js_1.ERR.duplicateAttribute);\n    }\n  }\n  _leaveAttrValue() {\n    if (this.currentLocation) {\n      this.currentLocation.endLine = this.preprocessor.line;\n      this.currentLocation.endCol = this.preprocessor.col;\n      this.currentLocation.endOffset = this.preprocessor.offset;\n    }\n  }\n  //Token emission\n  prepareToken(ct) {\n    this._emitCurrentCharacterToken(ct.location);\n    this.currentToken = null;\n    if (ct.location) {\n      ct.location.endLine = this.preprocessor.line;\n      ct.location.endCol = this.preprocessor.col + 1;\n      ct.location.endOffset = this.preprocessor.offset + 1;\n    }\n    this.currentLocation = this.getCurrentLocation(-1);\n  }\n  emitCurrentTagToken() {\n    const ct = this.currentToken;\n    this.prepareToken(ct);\n    ct.tagID = (0, html_js_1.getTagID)(ct.tagName);\n    if (ct.type === token_js_1.TokenType.START_TAG) {\n      this.lastStartTagName = ct.tagName;\n      this.handler.onStartTag(ct);\n    } else {\n      if (ct.attrs.length > 0) {\n        this._err(error_codes_js_1.ERR.endTagWithAttributes);\n      }\n      if (ct.selfClosing) {\n        this._err(error_codes_js_1.ERR.endTagWithTrailingSolidus);\n      }\n      this.handler.onEndTag(ct);\n    }\n    this.preprocessor.dropParsedChunk();\n  }\n  emitCurrentComment(ct) {\n    this.prepareToken(ct);\n    this.handler.onComment(ct);\n    this.preprocessor.dropParsedChunk();\n  }\n  emitCurrentDoctype(ct) {\n    this.prepareToken(ct);\n    this.handler.onDoctype(ct);\n    this.preprocessor.dropParsedChunk();\n  }\n  _emitCurrentCharacterToken(nextLocation) {\n    if (this.currentCharacterToken) {\n      //NOTE: if we have a pending character token, make it's end location equal to the\n      //current token's start location.\n      if (nextLocation && this.currentCharacterToken.location) {\n        this.currentCharacterToken.location.endLine = nextLocation.startLine;\n        this.currentCharacterToken.location.endCol = nextLocation.startCol;\n        this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n      }\n      switch (this.currentCharacterToken.type) {\n        case token_js_1.TokenType.CHARACTER:\n          {\n            this.handler.onCharacter(this.currentCharacterToken);\n            break;\n          }\n        case token_js_1.TokenType.NULL_CHARACTER:\n          {\n            this.handler.onNullCharacter(this.currentCharacterToken);\n            break;\n          }\n        case token_js_1.TokenType.WHITESPACE_CHARACTER:\n          {\n            this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n            break;\n          }\n      }\n      this.currentCharacterToken = null;\n    }\n  }\n  _emitEOFToken() {\n    const location = this.getCurrentLocation(0);\n    if (location) {\n      location.endLine = location.startLine;\n      location.endCol = location.startCol;\n      location.endOffset = location.startOffset;\n    }\n    this._emitCurrentCharacterToken(location);\n    this.handler.onEof({\n      type: token_js_1.TokenType.EOF,\n      location\n    });\n    this.active = false;\n  }\n  //Characters emission\n  //OPTIMIZATION: The specification uses only one type of character token (one token per character).\n  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n  //If we have a sequence of characters that belong to the same group, the parser can process it\n  //as a single solid character token.\n  //So, there are 3 types of character tokens in parse5:\n  //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n  //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n  //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n  _appendCharToCurrentCharacterToken(type, ch) {\n    if (this.currentCharacterToken) {\n      if (this.currentCharacterToken.type === type) {\n        this.currentCharacterToken.chars += ch;\n        return;\n      } else {\n        this.currentLocation = this.getCurrentLocation(0);\n        this._emitCurrentCharacterToken(this.currentLocation);\n        this.preprocessor.dropParsedChunk();\n      }\n    }\n    this._createCharacterToken(type, ch);\n  }\n  _emitCodePoint(cp) {\n    const type = isWhitespace(cp) ? token_js_1.TokenType.WHITESPACE_CHARACTER : cp === unicode_js_1.CODE_POINTS.NULL ? token_js_1.TokenType.NULL_CHARACTER : token_js_1.TokenType.CHARACTER;\n    this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n  }\n  //NOTE: used when we emit characters explicitly.\n  //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n  _emitChars(ch) {\n    this._appendCharToCurrentCharacterToken(token_js_1.TokenType.CHARACTER, ch);\n  }\n  // Character reference helpers\n  _startCharacterReference() {\n    this.returnState = this.state;\n    this.state = State.CHARACTER_REFERENCE;\n    this.entityStartPos = this.preprocessor.pos;\n    this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? decode_js_1.DecodingMode.Attribute : decode_js_1.DecodingMode.Legacy);\n  }\n  _isCharacterReferenceInAttribute() {\n    return this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED;\n  }\n  _flushCodePointConsumedAsCharacterReference(cp) {\n    if (this._isCharacterReferenceInAttribute()) {\n      this.currentAttr.value += String.fromCodePoint(cp);\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n  // Calling states this way turns out to be much faster than any other approach.\n  _callState(cp) {\n    switch (this.state) {\n      case State.DATA:\n        {\n          this._stateData(cp);\n          break;\n        }\n      case State.RCDATA:\n        {\n          this._stateRcdata(cp);\n          break;\n        }\n      case State.RAWTEXT:\n        {\n          this._stateRawtext(cp);\n          break;\n        }\n      case State.SCRIPT_DATA:\n        {\n          this._stateScriptData(cp);\n          break;\n        }\n      case State.PLAINTEXT:\n        {\n          this._statePlaintext(cp);\n          break;\n        }\n      case State.TAG_OPEN:\n        {\n          this._stateTagOpen(cp);\n          break;\n        }\n      case State.END_TAG_OPEN:\n        {\n          this._stateEndTagOpen(cp);\n          break;\n        }\n      case State.TAG_NAME:\n        {\n          this._stateTagName(cp);\n          break;\n        }\n      case State.RCDATA_LESS_THAN_SIGN:\n        {\n          this._stateRcdataLessThanSign(cp);\n          break;\n        }\n      case State.RCDATA_END_TAG_OPEN:\n        {\n          this._stateRcdataEndTagOpen(cp);\n          break;\n        }\n      case State.RCDATA_END_TAG_NAME:\n        {\n          this._stateRcdataEndTagName(cp);\n          break;\n        }\n      case State.RAWTEXT_LESS_THAN_SIGN:\n        {\n          this._stateRawtextLessThanSign(cp);\n          break;\n        }\n      case State.RAWTEXT_END_TAG_OPEN:\n        {\n          this._stateRawtextEndTagOpen(cp);\n          break;\n        }\n      case State.RAWTEXT_END_TAG_NAME:\n        {\n          this._stateRawtextEndTagName(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataLessThanSign(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_END_TAG_OPEN:\n        {\n          this._stateScriptDataEndTagOpen(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_END_TAG_NAME:\n        {\n          this._stateScriptDataEndTagName(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPE_START:\n        {\n          this._stateScriptDataEscapeStart(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPE_START_DASH:\n        {\n          this._stateScriptDataEscapeStartDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED:\n        {\n          this._stateScriptDataEscaped(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_DASH:\n        {\n          this._stateScriptDataEscapedDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_DASH_DASH:\n        {\n          this._stateScriptDataEscapedDashDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataEscapedLessThanSign(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:\n        {\n          this._stateScriptDataEscapedEndTagOpen(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME:\n        {\n          this._stateScriptDataEscapedEndTagName(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPE_START:\n        {\n          this._stateScriptDataDoubleEscapeStart(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED:\n        {\n          this._stateScriptDataDoubleEscaped(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:\n        {\n          this._stateScriptDataDoubleEscapedDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:\n        {\n          this._stateScriptDataDoubleEscapedDashDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataDoubleEscapedLessThanSign(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPE_END:\n        {\n          this._stateScriptDataDoubleEscapeEnd(cp);\n          break;\n        }\n      case State.BEFORE_ATTRIBUTE_NAME:\n        {\n          this._stateBeforeAttributeName(cp);\n          break;\n        }\n      case State.ATTRIBUTE_NAME:\n        {\n          this._stateAttributeName(cp);\n          break;\n        }\n      case State.AFTER_ATTRIBUTE_NAME:\n        {\n          this._stateAfterAttributeName(cp);\n          break;\n        }\n      case State.BEFORE_ATTRIBUTE_VALUE:\n        {\n          this._stateBeforeAttributeValue(cp);\n          break;\n        }\n      case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED:\n        {\n          this._stateAttributeValueDoubleQuoted(cp);\n          break;\n        }\n      case State.ATTRIBUTE_VALUE_SINGLE_QUOTED:\n        {\n          this._stateAttributeValueSingleQuoted(cp);\n          break;\n        }\n      case State.ATTRIBUTE_VALUE_UNQUOTED:\n        {\n          this._stateAttributeValueUnquoted(cp);\n          break;\n        }\n      case State.AFTER_ATTRIBUTE_VALUE_QUOTED:\n        {\n          this._stateAfterAttributeValueQuoted(cp);\n          break;\n        }\n      case State.SELF_CLOSING_START_TAG:\n        {\n          this._stateSelfClosingStartTag(cp);\n          break;\n        }\n      case State.BOGUS_COMMENT:\n        {\n          this._stateBogusComment(cp);\n          break;\n        }\n      case State.MARKUP_DECLARATION_OPEN:\n        {\n          this._stateMarkupDeclarationOpen(cp);\n          break;\n        }\n      case State.COMMENT_START:\n        {\n          this._stateCommentStart(cp);\n          break;\n        }\n      case State.COMMENT_START_DASH:\n        {\n          this._stateCommentStartDash(cp);\n          break;\n        }\n      case State.COMMENT:\n        {\n          this._stateComment(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN:\n        {\n          this._stateCommentLessThanSign(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN_BANG:\n        {\n          this._stateCommentLessThanSignBang(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH:\n        {\n          this._stateCommentLessThanSignBangDash(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:\n        {\n          this._stateCommentLessThanSignBangDashDash(cp);\n          break;\n        }\n      case State.COMMENT_END_DASH:\n        {\n          this._stateCommentEndDash(cp);\n          break;\n        }\n      case State.COMMENT_END:\n        {\n          this._stateCommentEnd(cp);\n          break;\n        }\n      case State.COMMENT_END_BANG:\n        {\n          this._stateCommentEndBang(cp);\n          break;\n        }\n      case State.DOCTYPE:\n        {\n          this._stateDoctype(cp);\n          break;\n        }\n      case State.BEFORE_DOCTYPE_NAME:\n        {\n          this._stateBeforeDoctypeName(cp);\n          break;\n        }\n      case State.DOCTYPE_NAME:\n        {\n          this._stateDoctypeName(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_NAME:\n        {\n          this._stateAfterDoctypeName(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_PUBLIC_KEYWORD:\n        {\n          this._stateAfterDoctypePublicKeyword(cp);\n          break;\n        }\n      case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:\n        {\n          this._stateBeforeDoctypePublicIdentifier(cp);\n          break;\n        }\n      case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:\n        {\n          this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n          break;\n        }\n      case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:\n        {\n          this._stateDoctypePublicIdentifierSingleQuoted(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:\n        {\n          this._stateAfterDoctypePublicIdentifier(cp);\n          break;\n        }\n      case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:\n        {\n          this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_SYSTEM_KEYWORD:\n        {\n          this._stateAfterDoctypeSystemKeyword(cp);\n          break;\n        }\n      case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:\n        {\n          this._stateBeforeDoctypeSystemIdentifier(cp);\n          break;\n        }\n      case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:\n        {\n          this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n          break;\n        }\n      case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:\n        {\n          this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:\n        {\n          this._stateAfterDoctypeSystemIdentifier(cp);\n          break;\n        }\n      case State.BOGUS_DOCTYPE:\n        {\n          this._stateBogusDoctype(cp);\n          break;\n        }\n      case State.CDATA_SECTION:\n        {\n          this._stateCdataSection(cp);\n          break;\n        }\n      case State.CDATA_SECTION_BRACKET:\n        {\n          this._stateCdataSectionBracket(cp);\n          break;\n        }\n      case State.CDATA_SECTION_END:\n        {\n          this._stateCdataSectionEnd(cp);\n          break;\n        }\n      case State.CHARACTER_REFERENCE:\n        {\n          this._stateCharacterReference();\n          break;\n        }\n      case State.AMBIGUOUS_AMPERSAND:\n        {\n          this._stateAmbiguousAmpersand(cp);\n          break;\n        }\n      default:\n        {\n          throw new Error('Unknown state');\n        }\n    }\n  }\n  // State machine\n  // Data state\n  //------------------------------------------------------------------\n  _stateData(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.TAG_OPEN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this._startCharacterReference();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitCodePoint(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  //  RCDATA state\n  //------------------------------------------------------------------\n  _stateRcdata(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this._startCharacterReference();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.RCDATA_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // RAWTEXT state\n  //------------------------------------------------------------------\n  _stateRawtext(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.RAWTEXT_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data state\n  //------------------------------------------------------------------\n  _stateScriptData(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // PLAINTEXT state\n  //------------------------------------------------------------------\n  _statePlaintext(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Tag open state\n  //------------------------------------------------------------------\n  _stateTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this._createStartTagToken();\n      this.state = State.TAG_NAME;\n      this._stateTagName(cp);\n    } else switch (cp) {\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          this.state = State.MARKUP_DECLARATION_OPEN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.END_TAG_OPEN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUESTION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedQuestionMarkInsteadOfTagName);\n          this._createCommentToken(1);\n          this.state = State.BOGUS_COMMENT;\n          this._stateBogusComment(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofBeforeTagName);\n          this._emitChars('<');\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n          this._emitChars('<');\n          this.state = State.DATA;\n          this._stateData(cp);\n        }\n    }\n  }\n  // End tag open state\n  //------------------------------------------------------------------\n  _stateEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n      this.state = State.TAG_NAME;\n      this._stateTagName(cp);\n    } else switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingEndTagName);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofBeforeTagName);\n          this._emitChars('</');\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n          this._createCommentToken(2);\n          this.state = State.BOGUS_COMMENT;\n          this._stateBogusComment(cp);\n        }\n    }\n  }\n  // Tag name state\n  //------------------------------------------------------------------\n  _stateTagName(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.tagName += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  }\n  // RCDATA less-than sign state\n  //------------------------------------------------------------------\n  _stateRcdataLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.RCDATA_END_TAG_OPEN;\n    } else {\n      this._emitChars('<');\n      this.state = State.RCDATA;\n      this._stateRcdata(cp);\n    }\n  }\n  // RCDATA end tag open state\n  //------------------------------------------------------------------\n  _stateRcdataEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.RCDATA_END_TAG_NAME;\n      this._stateRcdataEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.RCDATA;\n      this._stateRcdata(cp);\n    }\n  }\n  handleSpecialEndTag(_cp) {\n    if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n      return !this._ensureHibernation();\n    }\n    this._createEndTagToken();\n    const token = this.currentToken;\n    token.tagName = this.lastStartTagName;\n    const cp = this.preprocessor.peek(this.lastStartTagName.length);\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          return false;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n          this.state = State.SELF_CLOSING_START_TAG;\n          return false;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n          this.emitCurrentTagToken();\n          this.state = State.DATA;\n          return false;\n        }\n      default:\n        {\n          return !this._ensureHibernation();\n        }\n    }\n  }\n  // RCDATA end tag name state\n  //------------------------------------------------------------------\n  _stateRcdataEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.RCDATA;\n      this._stateRcdata(cp);\n    }\n  }\n  // RAWTEXT less-than sign state\n  //------------------------------------------------------------------\n  _stateRawtextLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.RAWTEXT_END_TAG_OPEN;\n    } else {\n      this._emitChars('<');\n      this.state = State.RAWTEXT;\n      this._stateRawtext(cp);\n    }\n  }\n  // RAWTEXT end tag open state\n  //------------------------------------------------------------------\n  _stateRawtextEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.RAWTEXT_END_TAG_NAME;\n      this._stateRawtextEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.RAWTEXT;\n      this._stateRawtext(cp);\n    }\n  }\n  // RAWTEXT end tag name state\n  //------------------------------------------------------------------\n  _stateRawtextEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.RAWTEXT;\n      this._stateRawtext(cp);\n    }\n  }\n  // Script data less-than sign state\n  //------------------------------------------------------------------\n  _stateScriptDataLessThanSign(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPE_START;\n          this._emitChars('<!');\n          break;\n        }\n      default:\n        {\n          this._emitChars('<');\n          this.state = State.SCRIPT_DATA;\n          this._stateScriptData(cp);\n        }\n    }\n  }\n  // Script data end tag open state\n  //------------------------------------------------------------------\n  _stateScriptDataEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.SCRIPT_DATA_END_TAG_NAME;\n      this._stateScriptDataEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data end tag name state\n  //------------------------------------------------------------------\n  _stateScriptDataEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data escape start state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapeStart(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n      this._emitChars('-');\n    } else {\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data escape start dash state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapeStartDash(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n      this._emitChars('-');\n    } else {\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data escaped state\n  //------------------------------------------------------------------\n  _stateScriptDataEscaped(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data escaped dash state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data escaped dash dash state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedDashDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA;\n          this._emitChars('>');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data escaped less-than sign state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n    } else if (isAsciiLetter(cp)) {\n      this._emitChars('<');\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n      this._stateScriptDataDoubleEscapeStart(cp);\n    } else {\n      this._emitChars('<');\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data escaped end tag open state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n      this._stateScriptDataEscapedEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data escaped end tag name state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data double escape start state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapeStart(cp) {\n    if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n      this._emitCodePoint(cp);\n      for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n        this._emitCodePoint(this._consume());\n      }\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n    } else if (!this._ensureHibernation()) {\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data double escaped state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscaped(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n          this._emitChars('<');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data double escaped dash state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapedDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n          this._emitChars('<');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data double escaped dash dash state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapedDashDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n          this._emitChars('<');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA;\n          this._emitChars('>');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data double escaped less-than sign state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapedLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n      this._emitChars('/');\n    } else {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n      this._stateScriptDataDoubleEscaped(cp);\n    }\n  }\n  // Script data double escape end state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapeEnd(cp) {\n    if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n      this._emitCodePoint(cp);\n      for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n        this._emitCodePoint(this._consume());\n      }\n      this.state = State.SCRIPT_DATA_ESCAPED;\n    } else if (!this._ensureHibernation()) {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n      this._stateScriptDataDoubleEscaped(cp);\n    }\n  }\n  // Before attribute name state\n  //------------------------------------------------------------------\n  _stateBeforeAttributeName(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this.state = State.AFTER_ATTRIBUTE_NAME;\n          this._stateAfterAttributeName(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedEqualsSignBeforeAttributeName);\n          this._createAttr('=');\n          this.state = State.ATTRIBUTE_NAME;\n          break;\n        }\n      default:\n        {\n          this._createAttr('');\n          this.state = State.ATTRIBUTE_NAME;\n          this._stateAttributeName(cp);\n        }\n    }\n  }\n  // Attribute name state\n  //------------------------------------------------------------------\n  _stateAttributeName(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._leaveAttrName();\n          this.state = State.AFTER_ATTRIBUTE_NAME;\n          this._stateAfterAttributeName(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n        {\n          this._leaveAttrName();\n          this.state = State.BEFORE_ATTRIBUTE_VALUE;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedCharacterInAttributeName);\n          this.currentAttr.name += String.fromCodePoint(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.currentAttr.name += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      default:\n        {\n          this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  }\n  // After attribute name state\n  //------------------------------------------------------------------\n  _stateAfterAttributeName(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n        {\n          this.state = State.BEFORE_ATTRIBUTE_VALUE;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._createAttr('');\n          this.state = State.ATTRIBUTE_NAME;\n          this._stateAttributeName(cp);\n        }\n    }\n  }\n  // Before attribute value state\n  //------------------------------------------------------------------\n  _stateBeforeAttributeValue(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingAttributeValue);\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n          this._stateAttributeValueUnquoted(cp);\n        }\n    }\n  }\n  // Attribute value (double-quoted) state\n  //------------------------------------------------------------------\n  _stateAttributeValueDoubleQuoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this._startCharacterReference();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Attribute value (single-quoted) state\n  //------------------------------------------------------------------\n  _stateAttributeValueSingleQuoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this._startCharacterReference();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Attribute value (unquoted) state\n  //------------------------------------------------------------------\n  _stateAttributeValueUnquoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this._leaveAttrValue();\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this._startCharacterReference();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._leaveAttrValue();\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n      case unicode_js_1.CODE_POINTS.GRAVE_ACCENT:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedCharacterInUnquotedAttributeValue);\n          this.currentAttr.value += String.fromCodePoint(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // After attribute value (quoted) state\n  //------------------------------------------------------------------\n  _stateAfterAttributeValueQuoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this._leaveAttrValue();\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this._leaveAttrValue();\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._leaveAttrValue();\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBetweenAttributes);\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          this._stateBeforeAttributeName(cp);\n        }\n    }\n  }\n  // Self-closing start tag state\n  //------------------------------------------------------------------\n  _stateSelfClosingStartTag(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          const token = this.currentToken;\n          token.selfClosing = true;\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedSolidusInTag);\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          this._stateBeforeAttributeName(cp);\n        }\n    }\n  }\n  // Bogus comment state\n  //------------------------------------------------------------------\n  _stateBogusComment(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      default:\n        {\n          token.data += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Markup declaration open state\n  //------------------------------------------------------------------\n  _stateMarkupDeclarationOpen(cp) {\n    if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DASH_DASH, true)) {\n      this._createCommentToken(unicode_js_1.SEQUENCES.DASH_DASH.length + 1);\n      this.state = State.COMMENT_START;\n    } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DOCTYPE, false)) {\n      // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n      this.currentLocation = this.getCurrentLocation(unicode_js_1.SEQUENCES.DOCTYPE.length + 1);\n      this.state = State.DOCTYPE;\n    } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.CDATA_START, true)) {\n      if (this.inForeignNode) {\n        this.state = State.CDATA_SECTION;\n      } else {\n        this._err(error_codes_js_1.ERR.cdataInHtmlContent);\n        this._createCommentToken(unicode_js_1.SEQUENCES.CDATA_START.length + 1);\n        this.currentToken.data = '[CDATA[';\n        this.state = State.BOGUS_COMMENT;\n      }\n    }\n    //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(error_codes_js_1.ERR.incorrectlyOpenedComment);\n      this._createCommentToken(2);\n      this.state = State.BOGUS_COMMENT;\n      this._stateBogusComment(cp);\n    }\n  }\n  // Comment start state\n  //------------------------------------------------------------------\n  _stateCommentStart(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_START_DASH;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n          this.state = State.DATA;\n          const token = this.currentToken;\n          this.emitCurrentComment(token);\n          break;\n        }\n      default:\n        {\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment start dash state\n  //------------------------------------------------------------------\n  _stateCommentStartDash(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '-';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment state\n  //------------------------------------------------------------------\n  _stateComment(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END_DASH;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          token.data += '<';\n          this.state = State.COMMENT_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Comment less-than sign state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSign(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          token.data += '!';\n          this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          token.data += '<';\n          break;\n        }\n      default:\n        {\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment less-than sign bang state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSignBang(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n    } else {\n      this.state = State.COMMENT;\n      this._stateComment(cp);\n    }\n  }\n  // Comment less-than sign bang dash state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSignBangDash(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n    } else {\n      this.state = State.COMMENT_END_DASH;\n      this._stateCommentEndDash(cp);\n    }\n  }\n  // Comment less-than sign bang dash dash state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSignBangDashDash(cp) {\n    if (cp !== unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN && cp !== unicode_js_1.CODE_POINTS.EOF) {\n      this._err(error_codes_js_1.ERR.nestedComment);\n    }\n    this.state = State.COMMENT_END;\n    this._stateCommentEnd(cp);\n  }\n  // Comment end dash state\n  //------------------------------------------------------------------\n  _stateCommentEndDash(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '-';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment end state\n  //------------------------------------------------------------------\n  _stateCommentEnd(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          this.state = State.COMMENT_END_BANG;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          token.data += '-';\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '--';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment end bang state\n  //------------------------------------------------------------------\n  _stateCommentEndBang(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          token.data += '--!';\n          this.state = State.COMMENT_END_DASH;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.incorrectlyClosedComment);\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '--!';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // DOCTYPE state\n  //------------------------------------------------------------------\n  _stateDoctype(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          this._stateBeforeDoctypeName(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          this._createDoctypeToken(null);\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBeforeDoctypeName);\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          this._stateBeforeDoctypeName(cp);\n        }\n    }\n  }\n  // Before DOCTYPE name state\n  //------------------------------------------------------------------\n  _stateBeforeDoctypeName(cp) {\n    if (isAsciiUpper(cp)) {\n      this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n      this.state = State.DOCTYPE_NAME;\n    } else switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._createDoctypeToken(unicode_js_1.REPLACEMENT_CHARACTER);\n          this.state = State.DOCTYPE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypeName);\n          this._createDoctypeToken(null);\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          this._createDoctypeToken(null);\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._createDoctypeToken(String.fromCodePoint(cp));\n          this.state = State.DOCTYPE_NAME;\n        }\n    }\n  }\n  // DOCTYPE name state\n  //------------------------------------------------------------------\n  _stateDoctypeName(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.AFTER_DOCTYPE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.name += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  }\n  // After DOCTYPE name state\n  //------------------------------------------------------------------\n  _stateAfterDoctypeName(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.PUBLIC, false)) {\n            this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n          } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.SYSTEM, false)) {\n            this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n          }\n          //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n          //results are no longer valid and we will need to start over.\n          else if (!this._ensureHibernation()) {\n            this._err(error_codes_js_1.ERR.invalidCharacterSequenceAfterDoctypeName);\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n        }\n    }\n  }\n  // After DOCTYPE public keyword state\n  //------------------------------------------------------------------\n  _stateAfterDoctypePublicKeyword(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Before DOCTYPE public identifier state\n  //------------------------------------------------------------------\n  _stateBeforeDoctypePublicIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // DOCTYPE public identifier (double-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.publicId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // DOCTYPE public identifier (single-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypePublicIdentifierSingleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.publicId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // After DOCTYPE public identifier state\n  //------------------------------------------------------------------\n  _stateAfterDoctypePublicIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Between DOCTYPE public and system identifiers state\n  //------------------------------------------------------------------\n  _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // After DOCTYPE system keyword state\n  //------------------------------------------------------------------\n  _stateAfterDoctypeSystemKeyword(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Before DOCTYPE system identifier state\n  //------------------------------------------------------------------\n  _stateBeforeDoctypeSystemIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // DOCTYPE system identifier (double-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.systemId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // DOCTYPE system identifier (single-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.systemId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // After DOCTYPE system identifier state\n  //------------------------------------------------------------------\n  _stateAfterDoctypeSystemIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Bogus DOCTYPE state\n  //------------------------------------------------------------------\n  _stateBogusDoctype(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  // CDATA section state\n  //------------------------------------------------------------------\n  _stateCdataSection(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET:\n        {\n          this.state = State.CDATA_SECTION_BRACKET;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInCdata);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // CDATA section bracket state\n  //------------------------------------------------------------------\n  _stateCdataSectionBracket(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET) {\n      this.state = State.CDATA_SECTION_END;\n    } else {\n      this._emitChars(']');\n      this.state = State.CDATA_SECTION;\n      this._stateCdataSection(cp);\n    }\n  }\n  // CDATA section end state\n  //------------------------------------------------------------------\n  _stateCdataSectionEnd(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET:\n        {\n          this._emitChars(']');\n          break;\n        }\n      default:\n        {\n          this._emitChars(']]');\n          this.state = State.CDATA_SECTION;\n          this._stateCdataSection(cp);\n        }\n    }\n  }\n  // Character reference state\n  //------------------------------------------------------------------\n  _stateCharacterReference() {\n    let length = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);\n    if (length < 0) {\n      if (this.preprocessor.lastChunkWritten) {\n        length = this.entityDecoder.end();\n      } else {\n        // Wait for the rest of the entity.\n        this.active = false;\n        // Mark the entire buffer as read.\n        this.preprocessor.pos = this.preprocessor.html.length - 1;\n        this.consumedAfterSnapshot = 0;\n        this.preprocessor.endOfChunkHit = true;\n        return;\n      }\n    }\n    if (length === 0) {\n      // This was not a valid entity. Go back to the beginning, and\n      // figure out what to do.\n      this.preprocessor.pos = this.entityStartPos;\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n      this.state = !this._isCharacterReferenceInAttribute() && isAsciiAlphaNumeric(this.preprocessor.peek(1)) ? State.AMBIGUOUS_AMPERSAND : this.returnState;\n    } else {\n      // We successfully parsed an entity. Switch to the return state.\n      this.state = this.returnState;\n    }\n  }\n  // Ambiguos ampersand state\n  //------------------------------------------------------------------\n  _stateAmbiguousAmpersand(cp) {\n    if (isAsciiAlphaNumeric(cp)) {\n      this._flushCodePointConsumedAsCharacterReference(cp);\n    } else {\n      if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n        this._err(error_codes_js_1.ERR.unknownNamedCharacterReference);\n      }\n      this.state = this.returnState;\n      this._callState(cp);\n    }\n  }\n}\nexports.Tokenizer = Tokenizer;","map":{"version":3,"names":["require","Object","defineProperty","exports","value","Tokenizer","TokenizerMode","preprocessor_js_1","unicode_js_1","token_js_1","decode_js_1","error_codes_js_1","html_js_1","State","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","CDATA_SECTION","isAsciiDigit","cp","CODE_POINTS","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","toAsciiLower","isWhitespace","SPACE","LINE_FEED","TABULATION","FORM_FEED","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","getErrorForNumericCharacterReference","code","NULL","ERR","nullCharacterReference","characterReferenceOutsideUnicodeRange","isSurrogate","surrogateCharacterReference","isUndefinedCodePoint","noncharacterCharacterReference","isControlCodePoint","CARRIAGE_RETURN","controlCharacterReference","constructor","options","handler","paused","inLoop","inForeignNode","lastStartTagName","active","state","returnState","entityStartPos","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","name","preprocessor","Preprocessor","currentLocation","getCurrentLocation","entityDecoder","EntityDecoder","htmlDecodeTree","consumed","pos","_flushCodePointConsumedAsCharacterReference","onParseError","missingSemicolonAfterCharacterReference","_err","absenceOfDigitsInNumericCharacterReference","validateNumericCharacterReference","error","undefined","cpOffset","_a","_b","call","getError","offset","sourceCodeLocationInfo","startLine","line","startCol","col","startOffset","endLine","endCol","endOffset","_runParsingLoop","_consume","_ensureHibernation","_callState","pause","resume","writeCallback","Error","write","chunk","isLastChunk","insertHtmlAtCurrentPos","endOfChunkHit","retreat","advance","_advanceBy","count","i","_consumeSequenceIfMatch","pattern","caseSensitive","startsWith","length","_createStartTagToken","type","TokenType","START_TAG","tagName","tagID","TAG_ID","UNKNOWN","selfClosing","ackSelfClosing","attrs","location","_createEndTagToken","END_TAG","_createCommentToken","COMMENT","data","_createDoctypeToken","initialName","DOCTYPE","forceQuirks","publicId","systemId","_createCharacterToken","chars","_createAttr","attrNameFirstCh","_leaveAttrName","token","getTokenAttr","push","attrLocations","create","_leaveAttrValue","duplicateAttribute","prepareToken","ct","_emitCurrentCharacterToken","emitCurrentTagToken","getTagID","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","dropParsedChunk","emitCurrentComment","onComment","emitCurrentDoctype","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","_emitEOFToken","onEof","EOF","_appendCharToCurrentCharacterToken","ch","_emitCodePoint","String","fromCodePoint","_emitChars","_startCharacterReference","CHARACTER_REFERENCE","startEntity","_isCharacterReferenceInAttribute","DecodingMode","Attribute","Legacy","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","_stateCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","REPLACEMENT_CHARACTER","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","missingEndTagName","eofInTag","handleSpecialEndTag","_cp","peek","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","SEQUENCES","SCRIPT","EQUALS_SIGN","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","DASH_DASH","CDATA_START","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","fromCharCode","missingDoctypeName","PUBLIC","SYSTEM","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","html","lastChunkWritten","end","SEMICOLON","unknownNamedCharacterReference"],"sources":["/Users/feyraf/Desktop/projets/Roma/invest/node_modules/jsdom/node_modules/parse5/dist/cjs/tokenizer/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tokenizer = exports.TokenizerMode = void 0;\nconst preprocessor_js_1 = require(\"./preprocessor.js\");\nconst unicode_js_1 = require(\"../common/unicode.js\");\nconst token_js_1 = require(\"../common/token.js\");\nconst decode_js_1 = require(\"entities/lib/decode.js\");\nconst error_codes_js_1 = require(\"../common/error-codes.js\");\nconst html_js_1 = require(\"../common/html.js\");\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 72] = \"AMBIGUOUS_AMPERSAND\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexports.TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.DIGIT_0 && cp <= unicode_js_1.CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === unicode_js_1.CODE_POINTS.SPACE || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.TABULATION || cp === unicode_js_1.CODE_POINTS.FORM_FEED;\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === unicode_js_1.CODE_POINTS.SOLIDUS || cp === unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN;\n}\nfunction getErrorForNumericCharacterReference(code) {\n    if (code === unicode_js_1.CODE_POINTS.NULL) {\n        return error_codes_js_1.ERR.nullCharacterReference;\n    }\n    else if (code > 1114111) {\n        return error_codes_js_1.ERR.characterReferenceOutsideUnicodeRange;\n    }\n    else if ((0, unicode_js_1.isSurrogate)(code)) {\n        return error_codes_js_1.ERR.surrogateCharacterReference;\n    }\n    else if ((0, unicode_js_1.isUndefinedCodePoint)(code)) {\n        return error_codes_js_1.ERR.noncharacterCharacterReference;\n    }\n    else if ((0, unicode_js_1.isControlCodePoint)(code) || code === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n        return error_codes_js_1.ERR.controlCharacterReference;\n    }\n    return null;\n}\n//Tokenizer\nclass Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.entityStartPos = 0;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new preprocessor_js_1.Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n        this.entityDecoder = new decode_js_1.EntityDecoder(decode_js_1.htmlDecodeTree, (cp, consumed) => {\n            // Note: Set `pos` _before_ flushing, as flushing might drop\n            // the current chunk and invalidate `entityStartPos`.\n            this.preprocessor.pos = this.entityStartPos + consumed - 1;\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }, handler.onParseError\n            ? {\n                missingSemicolonAfterCharacterReference: () => {\n                    this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference, 1);\n                },\n                absenceOfDigitsInNumericCharacterReference: (consumed) => {\n                    this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + consumed);\n                },\n                validateNumericCharacterReference: (code) => {\n                    const error = getErrorForNumericCharacterReference(code);\n                    if (error)\n                        this._err(error, 1);\n                },\n            }\n            : undefined);\n    }\n    //Errors\n    _err(code, cpOffset = 0) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code, cpOffset));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this.preprocessor.retreat(this.consumedAfterSnapshot);\n            this.consumedAfterSnapshot = 0;\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: token_js_1.TokenType.START_TAG,\n            tagName: '',\n            tagID: html_js_1.TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: token_js_1.TokenType.END_TAG,\n            tagName: '',\n            tagID: html_js_1.TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: token_js_1.TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: token_js_1.TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if ((0, token_js_1.getTokenAttr)(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(error_codes_js_1.ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = (0, html_js_1.getTagID)(ct.tagName);\n        if (ct.type === token_js_1.TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(error_codes_js_1.ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(error_codes_js_1.ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case token_js_1.TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case token_js_1.TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case token_js_1.TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: token_js_1.TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: The specification uses only one type of character token (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type === type) {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n            else {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? token_js_1.TokenType.WHITESPACE_CHARACTER\n            : cp === unicode_js_1.CODE_POINTS.NULL\n                ? token_js_1.TokenType.NULL_CHARACTER\n                : token_js_1.TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(token_js_1.TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _startCharacterReference() {\n        this.returnState = this.state;\n        this.state = State.CHARACTER_REFERENCE;\n        this.entityStartPos = this.preprocessor.pos;\n        this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? decode_js_1.DecodingMode.Attribute : decode_js_1.DecodingMode.Legacy);\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference();\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.QUESTION_MARK: {\n                    this._err(error_codes_js_1.ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.EOF: {\n                    this._err(error_codes_js_1.ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                    this._err(error_codes_js_1.ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.EOF: {\n                    this._err(error_codes_js_1.ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.tagName += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN: {\n                this._err(error_codes_js_1.ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.name += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n            case unicode_js_1.CODE_POINTS.GRAVE_ACCENT: {\n                this._err(error_codes_js_1.ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DASH_DASH, true)) {\n            this._createCommentToken(unicode_js_1.SEQUENCES.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation(unicode_js_1.SEQUENCES.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(error_codes_js_1.ERR.cdataInHtmlContent);\n                this._createCommentToken(unicode_js_1.SEQUENCES.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(error_codes_js_1.ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN && cp !== unicode_js_1.CODE_POINTS.EOF) {\n            this._err(error_codes_js_1.ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case unicode_js_1.CODE_POINTS.SPACE:\n                case unicode_js_1.CODE_POINTS.LINE_FEED:\n                case unicode_js_1.CODE_POINTS.TABULATION:\n                case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.NULL: {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(unicode_js_1.REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                    this._err(error_codes_js_1.ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.EOF: {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.name += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(error_codes_js_1.ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n            }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference() {\n        let length = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);\n        if (length < 0) {\n            if (this.preprocessor.lastChunkWritten) {\n                length = this.entityDecoder.end();\n            }\n            else {\n                // Wait for the rest of the entity.\n                this.active = false;\n                // Mark the entire buffer as read.\n                this.preprocessor.pos = this.preprocessor.html.length - 1;\n                this.consumedAfterSnapshot = 0;\n                this.preprocessor.endOfChunkHit = true;\n                return;\n            }\n        }\n        if (length === 0) {\n            // This was not a valid entity. Go back to the beginning, and\n            // figure out what to do.\n            this.preprocessor.pos = this.entityStartPos;\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this.state =\n                !this._isCharacterReferenceInAttribute() && isAsciiAlphaNumeric(this.preprocessor.peek(1))\n                    ? State.AMBIGUOUS_AMPERSAND\n                    : this.returnState;\n        }\n        else {\n            // We successfully parsed an entity. Switch to the return state.\n            this.state = this.returnState;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n                this._err(error_codes_js_1.ERR.unknownNamedCharacterReference);\n            }\n            this.state = this.returnState;\n            this._callState(cp);\n        }\n    }\n}\nexports.Tokenizer = Tokenizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}