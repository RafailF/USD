{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.set.difference.v2.js\");\nrequire(\"core-js/modules/es.set.intersection.v2.js\");\nrequire(\"core-js/modules/es.set.is-disjoint-from.v2.js\");\nrequire(\"core-js/modules/es.set.is-subset-of.v2.js\");\nrequire(\"core-js/modules/es.set.is-superset-of.v2.js\");\nrequire(\"core-js/modules/es.set.symmetric-difference.v2.js\");\nrequire(\"core-js/modules/es.set.union.v2.js\");\nconst iconvLite = require(\"iconv-lite\");\nconst supportedNames = require(\"./supported-names.json\");\nconst labelsToNames = require(\"./labels-to-names.json\");\nconst supportedNamesSet = new Set(supportedNames);\n\n// https://encoding.spec.whatwg.org/#concept-encoding-get\nexports.labelToName = label => {\n  label = String(label).trim().toLowerCase();\n  return labelsToNames[label] || null;\n};\n\n// https://encoding.spec.whatwg.org/#decode\nexports.decode = (uint8Array, fallbackEncodingName) => {\n  let encoding = fallbackEncodingName;\n  if (!exports.isSupported(encoding)) {\n    throw new RangeError(`\"${encoding}\" is not a supported encoding name`);\n  }\n  const bomEncoding = exports.getBOMEncoding(uint8Array);\n  if (bomEncoding !== null) {\n    encoding = bomEncoding;\n    // iconv-lite will strip BOMs for us, so no need to do the extra byte removal that the spec does.\n    // Note that we won't end up in the x-user-defined case when there's a bomEncoding.\n  }\n  if (encoding === \"x-user-defined\") {\n    // https://encoding.spec.whatwg.org/#x-user-defined-decoder\n    let result = \"\";\n    for (const byte of uint8Array) {\n      if (byte <= 0x7F) {\n        result += String.fromCodePoint(byte);\n      } else {\n        result += String.fromCodePoint(0xF780 + byte - 0x80);\n      }\n    }\n    return result;\n  }\n  return iconvLite.decode(uint8Array, encoding);\n};\n\n// https://github.com/whatwg/html/issues/1910#issuecomment-254017369\nexports.getBOMEncoding = uint8Array => {\n  if (uint8Array[0] === 0xFE && uint8Array[1] === 0xFF) {\n    return \"UTF-16BE\";\n  } else if (uint8Array[0] === 0xFF && uint8Array[1] === 0xFE) {\n    return \"UTF-16LE\";\n  } else if (uint8Array[0] === 0xEF && uint8Array[1] === 0xBB && uint8Array[2] === 0xBF) {\n    return \"UTF-8\";\n  }\n  return null;\n};\nexports.isSupported = name => {\n  return supportedNamesSet.has(String(name));\n};","map":{"version":3,"names":["require","iconvLite","supportedNames","labelsToNames","supportedNamesSet","Set","exports","labelToName","label","String","trim","toLowerCase","decode","uint8Array","fallbackEncodingName","encoding","isSupported","RangeError","bomEncoding","getBOMEncoding","result","byte","fromCodePoint","name","has"],"sources":["/Users/feyraf/Desktop/projets/Roma/invest/node_modules/whatwg-encoding/lib/whatwg-encoding.js"],"sourcesContent":["\"use strict\";\nconst iconvLite = require(\"iconv-lite\");\nconst supportedNames = require(\"./supported-names.json\");\nconst labelsToNames = require(\"./labels-to-names.json\");\n\nconst supportedNamesSet = new Set(supportedNames);\n\n// https://encoding.spec.whatwg.org/#concept-encoding-get\nexports.labelToName = label => {\n  label = String(label).trim().toLowerCase();\n\n  return labelsToNames[label] || null;\n};\n\n// https://encoding.spec.whatwg.org/#decode\nexports.decode = (uint8Array, fallbackEncodingName) => {\n  let encoding = fallbackEncodingName;\n  if (!exports.isSupported(encoding)) {\n    throw new RangeError(`\"${encoding}\" is not a supported encoding name`);\n  }\n\n  const bomEncoding = exports.getBOMEncoding(uint8Array);\n  if (bomEncoding !== null) {\n    encoding = bomEncoding;\n    // iconv-lite will strip BOMs for us, so no need to do the extra byte removal that the spec does.\n    // Note that we won't end up in the x-user-defined case when there's a bomEncoding.\n  }\n\n  if (encoding === \"x-user-defined\") {\n    // https://encoding.spec.whatwg.org/#x-user-defined-decoder\n    let result = \"\";\n    for (const byte of uint8Array) {\n      if (byte <= 0x7F) {\n        result += String.fromCodePoint(byte);\n      } else {\n        result += String.fromCodePoint(0xF780 + byte - 0x80);\n      }\n    }\n    return result;\n  }\n\n  return iconvLite.decode(uint8Array, encoding);\n};\n\n// https://github.com/whatwg/html/issues/1910#issuecomment-254017369\nexports.getBOMEncoding = uint8Array => {\n  if (uint8Array[0] === 0xFE && uint8Array[1] === 0xFF) {\n    return \"UTF-16BE\";\n  } else if (uint8Array[0] === 0xFF && uint8Array[1] === 0xFE) {\n    return \"UTF-16LE\";\n  } else if (uint8Array[0] === 0xEF && uint8Array[1] === 0xBB && uint8Array[2] === 0xBF) {\n    return \"UTF-8\";\n  }\n\n  return null;\n};\n\nexports.isSupported = name => {\n  return supportedNamesSet.has(String(name));\n};\n"],"mappings":"AAAA,YAAY;;AAACA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AACb,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAY,CAAC;AACvC,MAAME,cAAc,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AACxD,MAAMG,aAAa,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AAEvD,MAAMI,iBAAiB,GAAG,IAAIC,GAAG,CAACH,cAAc,CAAC;;AAEjD;AACAI,OAAO,CAACC,WAAW,GAAGC,KAAK,IAAI;EAC7BA,KAAK,GAAGC,MAAM,CAACD,KAAK,CAAC,CAACE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAE1C,OAAOR,aAAa,CAACK,KAAK,CAAC,IAAI,IAAI;AACrC,CAAC;;AAED;AACAF,OAAO,CAACM,MAAM,GAAG,CAACC,UAAU,EAAEC,oBAAoB,KAAK;EACrD,IAAIC,QAAQ,GAAGD,oBAAoB;EACnC,IAAI,CAACR,OAAO,CAACU,WAAW,CAACD,QAAQ,CAAC,EAAE;IAClC,MAAM,IAAIE,UAAU,CAAC,IAAIF,QAAQ,oCAAoC,CAAC;EACxE;EAEA,MAAMG,WAAW,GAAGZ,OAAO,CAACa,cAAc,CAACN,UAAU,CAAC;EACtD,IAAIK,WAAW,KAAK,IAAI,EAAE;IACxBH,QAAQ,GAAGG,WAAW;IACtB;IACA;EACF;EAEA,IAAIH,QAAQ,KAAK,gBAAgB,EAAE;IACjC;IACA,IAAIK,MAAM,GAAG,EAAE;IACf,KAAK,MAAMC,IAAI,IAAIR,UAAU,EAAE;MAC7B,IAAIQ,IAAI,IAAI,IAAI,EAAE;QAChBD,MAAM,IAAIX,MAAM,CAACa,aAAa,CAACD,IAAI,CAAC;MACtC,CAAC,MAAM;QACLD,MAAM,IAAIX,MAAM,CAACa,aAAa,CAAC,MAAM,GAAGD,IAAI,GAAG,IAAI,CAAC;MACtD;IACF;IACA,OAAOD,MAAM;EACf;EAEA,OAAOnB,SAAS,CAACW,MAAM,CAACC,UAAU,EAAEE,QAAQ,CAAC;AAC/C,CAAC;;AAED;AACAT,OAAO,CAACa,cAAc,GAAGN,UAAU,IAAI;EACrC,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IACpD,OAAO,UAAU;EACnB,CAAC,MAAM,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IAC3D,OAAO,UAAU;EACnB,CAAC,MAAM,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IACrF,OAAO,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDP,OAAO,CAACU,WAAW,GAAGO,IAAI,IAAI;EAC5B,OAAOnB,iBAAiB,CAACoB,GAAG,CAACf,MAAM,CAACc,IAAI,CAAC,CAAC;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}